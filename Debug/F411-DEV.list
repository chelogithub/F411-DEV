
F411-DEV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fc8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002bc  08005160  08005160  00015160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800541c  0800541c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800541c  0800541c  0001541c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005424  08005424  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005424  08005424  00015424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005428  08005428  00015428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800542c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002240  20000010  0800543c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002250  0800543c  00022250  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e034  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c3c  00000000  00000000  0002e074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c00  00000000  00000000  0002fcb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b38  00000000  00000000  000308b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001638a  00000000  00000000  000313e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cdc5  00000000  00000000  00047772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dff4  00000000  00000000  00054537  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e252b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003294  00000000  00000000  000e257c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005148 	.word	0x08005148

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08005148 	.word	0x08005148

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	6039      	str	r1, [r7, #0]
 80004e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	db0a      	blt.n	8000506 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	b2da      	uxtb	r2, r3
 80004f4:	490c      	ldr	r1, [pc, #48]	; (8000528 <__NVIC_SetPriority+0x4c>)
 80004f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004fa:	0112      	lsls	r2, r2, #4
 80004fc:	b2d2      	uxtb	r2, r2
 80004fe:	440b      	add	r3, r1
 8000500:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000504:	e00a      	b.n	800051c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	b2da      	uxtb	r2, r3
 800050a:	4908      	ldr	r1, [pc, #32]	; (800052c <__NVIC_SetPriority+0x50>)
 800050c:	79fb      	ldrb	r3, [r7, #7]
 800050e:	f003 030f 	and.w	r3, r3, #15
 8000512:	3b04      	subs	r3, #4
 8000514:	0112      	lsls	r2, r2, #4
 8000516:	b2d2      	uxtb	r2, r2
 8000518:	440b      	add	r3, r1
 800051a:	761a      	strb	r2, [r3, #24]
}
 800051c:	bf00      	nop
 800051e:	370c      	adds	r7, #12
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr
 8000528:	e000e100 	.word	0xe000e100
 800052c:	e000ed00 	.word	0xe000ed00

08000530 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	3b01      	subs	r3, #1
 800053c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000540:	d301      	bcc.n	8000546 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000542:	2301      	movs	r3, #1
 8000544:	e00f      	b.n	8000566 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000546:	4a0a      	ldr	r2, [pc, #40]	; (8000570 <SysTick_Config+0x40>)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	3b01      	subs	r3, #1
 800054c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800054e:	210f      	movs	r1, #15
 8000550:	f04f 30ff 	mov.w	r0, #4294967295
 8000554:	f7ff ffc2 	bl	80004dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000558:	4b05      	ldr	r3, [pc, #20]	; (8000570 <SysTick_Config+0x40>)
 800055a:	2200      	movs	r2, #0
 800055c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800055e:	4b04      	ldr	r3, [pc, #16]	; (8000570 <SysTick_Config+0x40>)
 8000560:	2207      	movs	r2, #7
 8000562:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000564:	2300      	movs	r3, #0
}
 8000566:	4618      	mov	r0, r3
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	e000e010 	.word	0xe000e010

08000574 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800057c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000580:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000584:	f003 0301 	and.w	r3, r3, #1
 8000588:	2b00      	cmp	r3, #0
 800058a:	d013      	beq.n	80005b4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800058c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000590:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000594:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000598:	2b00      	cmp	r3, #0
 800059a:	d00b      	beq.n	80005b4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800059c:	e000      	b.n	80005a0 <ITM_SendChar+0x2c>
    {
      __NOP();
 800059e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d0f9      	beq.n	800059e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005aa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	b2d2      	uxtb	r2, r2
 80005b2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005b4:	687b      	ldr	r3, [r7, #4]
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
	...

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	//----------------------- ETHERNET W5500 Environment-------------------------//

	//	GATEWAY ADDRESS
		ETH.GAR[0]=192;
 80005ca:	4bcf      	ldr	r3, [pc, #828]	; (8000908 <main+0x344>)
 80005cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80005d0:	22c0      	movs	r2, #192	; 0xc0
 80005d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		ETH.GAR[1]=168;
 80005d6:	4bcc      	ldr	r3, [pc, #816]	; (8000908 <main+0x344>)
 80005d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80005dc:	22a8      	movs	r2, #168	; 0xa8
 80005de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		ETH.GAR[2]=0;
 80005e2:	4bc9      	ldr	r3, [pc, #804]	; (8000908 <main+0x344>)
 80005e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80005e8:	2200      	movs	r2, #0
 80005ea:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		ETH.GAR[3]=1;
 80005ee:	4bc6      	ldr	r3, [pc, #792]	; (8000908 <main+0x344>)
 80005f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80005f4:	2201      	movs	r2, #1
 80005f6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	//	SUBNET MASK
		ETH.SUBR[0]=255;
 80005fa:	4bc3      	ldr	r3, [pc, #780]	; (8000908 <main+0x344>)
 80005fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000600:	22ff      	movs	r2, #255	; 0xff
 8000602:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		ETH.SUBR[1]=255;
 8000606:	4bc0      	ldr	r3, [pc, #768]	; (8000908 <main+0x344>)
 8000608:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800060c:	22ff      	movs	r2, #255	; 0xff
 800060e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		ETH.SUBR[2]=255;
 8000612:	4bbd      	ldr	r3, [pc, #756]	; (8000908 <main+0x344>)
 8000614:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000618:	22ff      	movs	r2, #255	; 0xff
 800061a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		ETH.SUBR[3]=0;
 800061e:	4bba      	ldr	r3, [pc, #744]	; (8000908 <main+0x344>)
 8000620:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000624:	2200      	movs	r2, #0
 8000626:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	//	MAC ADDRESS
		ETH.SHAR[0]=0x00;
 800062a:	4bb7      	ldr	r3, [pc, #732]	; (8000908 <main+0x344>)
 800062c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000630:	2200      	movs	r2, #0
 8000632:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		ETH.SHAR[1]=0x08;
 8000636:	4bb4      	ldr	r3, [pc, #720]	; (8000908 <main+0x344>)
 8000638:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800063c:	2208      	movs	r2, #8
 800063e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		ETH.SHAR[2]=0xDC;
 8000642:	4bb1      	ldr	r3, [pc, #708]	; (8000908 <main+0x344>)
 8000644:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000648:	22dc      	movs	r2, #220	; 0xdc
 800064a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		ETH.SHAR[3]=0x00;
 800064e:	4bae      	ldr	r3, [pc, #696]	; (8000908 <main+0x344>)
 8000650:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000654:	2200      	movs	r2, #0
 8000656:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		ETH.SHAR[4]=0xC0;
 800065a:	4bab      	ldr	r3, [pc, #684]	; (8000908 <main+0x344>)
 800065c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000660:	22c0      	movs	r2, #192	; 0xc0
 8000662:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		ETH.SHAR[5]=0x03;
 8000666:	4ba8      	ldr	r3, [pc, #672]	; (8000908 <main+0x344>)
 8000668:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800066c:	2203      	movs	r2, #3
 800066e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

	//	IP ADDRESS
		ETH.SIPR[0]=192;
 8000672:	4ba5      	ldr	r3, [pc, #660]	; (8000908 <main+0x344>)
 8000674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000678:	22c0      	movs	r2, #192	; 0xc0
 800067a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		ETH.SIPR[1]=168;
 800067e:	4ba2      	ldr	r3, [pc, #648]	; (8000908 <main+0x344>)
 8000680:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000684:	22a8      	movs	r2, #168	; 0xa8
 8000686:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
		ETH.SIPR[2]=0;
 800068a:	4b9f      	ldr	r3, [pc, #636]	; (8000908 <main+0x344>)
 800068c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000690:	2200      	movs	r2, #0
 8000692:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		ETH.SIPR[3]=6,//ETH.SIPR[3]=34,
 8000696:	4b9c      	ldr	r3, [pc, #624]	; (8000908 <main+0x344>)
 8000698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800069c:	2206      	movs	r2, #6
 800069e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	//  Socket RX memory
		ETH.RMSR=0x55;
 80006a2:	4b99      	ldr	r3, [pc, #612]	; (8000908 <main+0x344>)
 80006a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006a8:	2255      	movs	r2, #85	; 0x55
 80006aa:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	//  Socket TX memory
		ETH.TMSR=0x55;
 80006ae:	4b96      	ldr	r3, [pc, #600]	; (8000908 <main+0x344>)
 80006b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006b4:	2255      	movs	r2, #85	; 0x55
 80006b6:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	//  S0 Port Number
		ETH.S_PORT[0]=0x01; //01
 80006ba:	4b93      	ldr	r3, [pc, #588]	; (8000908 <main+0x344>)
 80006bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006c0:	2201      	movs	r2, #1
 80006c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		ETH.S_PORT[1]=0xF6; //f6
 80006c6:	4b90      	ldr	r3, [pc, #576]	; (8000908 <main+0x344>)
 80006c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006cc:	22f6      	movs	r2, #246	; 0xf6
 80006ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	//	S0 Client IP ADDRESS
		ETH.S_DIPR[0]=192;
 80006d2:	4b8d      	ldr	r3, [pc, #564]	; (8000908 <main+0x344>)
 80006d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006d8:	22c0      	movs	r2, #192	; 0xc0
 80006da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		ETH.S_DIPR[1]=168;
 80006de:	4b8a      	ldr	r3, [pc, #552]	; (8000908 <main+0x344>)
 80006e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006e4:	22a8      	movs	r2, #168	; 0xa8
 80006e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		ETH.S_DIPR[2]=0;
 80006ea:	4b87      	ldr	r3, [pc, #540]	; (8000908 <main+0x344>)
 80006ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006f0:	2200      	movs	r2, #0
 80006f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		ETH.S_DIPR[3]=3;
 80006f6:	4b84      	ldr	r3, [pc, #528]	; (8000908 <main+0x344>)
 80006f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006fc:	2203      	movs	r2, #3
 80006fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	//	S0 Client IP ADDRESS
		ETH.S_DPORT[0]=0x01;
 8000702:	4b81      	ldr	r3, [pc, #516]	; (8000908 <main+0x344>)
 8000704:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000708:	2201      	movs	r2, #1
 800070a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		ETH.S_DPORT[1]=0xF6;
 800070e:	4b7e      	ldr	r3, [pc, #504]	; (8000908 <main+0x344>)
 8000710:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000714:	22f6      	movs	r2, #246	; 0xf6
 8000716:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

		ETH.gS_RX_BASE = 0x0000;
 800071a:	4b7b      	ldr	r3, [pc, #492]	; (8000908 <main+0x344>)
 800071c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000720:	2200      	movs	r2, #0
 8000722:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
		ETH.gS_RX_MASK = 0x07FF;
 8000726:	4b78      	ldr	r3, [pc, #480]	; (8000908 <main+0x344>)
 8000728:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800072c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000730:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
		ETH.gS1_RX_BASE = 0x6800;
 8000734:	4b74      	ldr	r3, [pc, #464]	; (8000908 <main+0x344>)
 8000736:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800073a:	f44f 42d0 	mov.w	r2, #26624	; 0x6800
 800073e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		ETH.gS1_RX_MASK = 0x07FF;
 8000742:	4b71      	ldr	r3, [pc, #452]	; (8000908 <main+0x344>)
 8000744:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000748:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800074c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
		ETH.gS2_RX_BASE = 0x7000;
 8000750:	4b6d      	ldr	r3, [pc, #436]	; (8000908 <main+0x344>)
 8000752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000756:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 800075a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
		ETH.gS2_RX_MASK = 0x07FF;
 800075e:	4b6a      	ldr	r3, [pc, #424]	; (8000908 <main+0x344>)
 8000760:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000764:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000768:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
		ETH.gS3_RX_BASE = 0x7800;
 800076c:	4b66      	ldr	r3, [pc, #408]	; (8000908 <main+0x344>)
 800076e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000772:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 8000776:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		ETH.gS3_RX_MASK = 0x07FF;
 800077a:	4b63      	ldr	r3, [pc, #396]	; (8000908 <main+0x344>)
 800077c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000780:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000784:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		ETH.gS_TX_BASE = 0x0000;
 8000788:	4b5f      	ldr	r3, [pc, #380]	; (8000908 <main+0x344>)
 800078a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800078e:	2200      	movs	r2, #0
 8000790:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		ETH.gS_TX_MASK = 0x07FF;
 8000794:	4b5c      	ldr	r3, [pc, #368]	; (8000908 <main+0x344>)
 8000796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800079a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800079e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
		ETH.gS1_TX_BASE = 0x4800;
 80007a2:	4b59      	ldr	r3, [pc, #356]	; (8000908 <main+0x344>)
 80007a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007a8:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 80007ac:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
		ETH.gS1_TX_MASK = 0x07FF;
 80007b0:	4b55      	ldr	r3, [pc, #340]	; (8000908 <main+0x344>)
 80007b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007b6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80007ba:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
		ETH.gS2_TX_BASE = 0x5000;
 80007be:	4b52      	ldr	r3, [pc, #328]	; (8000908 <main+0x344>)
 80007c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007c4:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 80007c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
		ETH.gS2_TX_MASK = 0x07FF;
 80007cc:	4b4e      	ldr	r3, [pc, #312]	; (8000908 <main+0x344>)
 80007ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007d2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80007d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
		ETH.gS3_TX_BASE = 0x5800;
 80007da:	4b4b      	ldr	r3, [pc, #300]	; (8000908 <main+0x344>)
 80007dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007e0:	f44f 42b0 	mov.w	r2, #22528	; 0x5800
 80007e4:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
		ETH.gS3_TX_MASK = 0x07FF;
 80007e8:	4b47      	ldr	r3, [pc, #284]	; (8000908 <main+0x344>)
 80007ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ee:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80007f2:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

		ETH.S_ENserver = 0;			//Actúa como servidor S0_ENserver=1 o cliente S0_ENserver=0
 80007f6:	4b44      	ldr	r3, [pc, #272]	; (8000908 <main+0x344>)
 80007f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007fc:	2200      	movs	r2, #0
 80007fe:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

	  //----------------------- LoRa ------------------------//

	  //----------------------- WIFI ------------------------//

		spi_no_debug=1;
 8000802:	4b42      	ldr	r3, [pc, #264]	; (800090c <main+0x348>)
 8000804:	2201      	movs	r2, #1
 8000806:	701a      	strb	r2, [r3, #0]
		ETH.NSS_PORT=GPIOA;
 8000808:	4b3f      	ldr	r3, [pc, #252]	; (8000908 <main+0x344>)
 800080a:	4a41      	ldr	r2, [pc, #260]	; (8000910 <main+0x34c>)
 800080c:	605a      	str	r2, [r3, #4]
		ETH.NSS_PIN=GPIO_PIN_4;
 800080e:	4b3e      	ldr	r3, [pc, #248]	; (8000908 <main+0x344>)
 8000810:	2210      	movs	r2, #16
 8000812:	811a      	strh	r2, [r3, #8]
		ETH.RST_PORT=GPIOB;
 8000814:	4b3c      	ldr	r3, [pc, #240]	; (8000908 <main+0x344>)
 8000816:	4a3f      	ldr	r2, [pc, #252]	; (8000914 <main+0x350>)
 8000818:	60da      	str	r2, [r3, #12]
		ETH.RST_PIN=GPIO_PIN_0;
 800081a:	4b3b      	ldr	r3, [pc, #236]	; (8000908 <main+0x344>)
 800081c:	2201      	movs	r2, #1
 800081e:	821a      	strh	r2, [r3, #16]
		ETH.SPI= &hspi1;
 8000820:	4b39      	ldr	r3, [pc, #228]	; (8000908 <main+0x344>)
 8000822:	4a3d      	ldr	r2, [pc, #244]	; (8000918 <main+0x354>)
 8000824:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000826:	f000 ffd5 	bl	80017d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800082a:	f000 f8a7 	bl	800097c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick_Config(SystemCoreClock/1000);
 800082e:	4b3b      	ldr	r3, [pc, #236]	; (800091c <main+0x358>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4a3b      	ldr	r2, [pc, #236]	; (8000920 <main+0x35c>)
 8000834:	fba2 2303 	umull	r2, r3, r2, r3
 8000838:	099b      	lsrs	r3, r3, #6
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff fe78 	bl	8000530 <SysTick_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000840:	f000 fa30 	bl	8000ca4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000844:	f000 f902 	bl	8000a4c <MX_SPI1_Init>
  MX_TIM2_Init();
 8000848:	f000 f936 	bl	8000ab8 <MX_TIM2_Init>
  MX_TIM3_Init();
 800084c:	f000 f9ae 	bl	8000bac <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8000850:	2200      	movs	r2, #0
 8000852:	2102      	movs	r1, #2
 8000854:	482e      	ldr	r0, [pc, #184]	; (8000910 <main+0x34c>)
 8000856:	f001 fae9 	bl	8001e2c <HAL_GPIO_WritePin>
  ITM0_Write("\r\n INICIO OK\r\n",strlen("\r\n INICIO OK\r\n"));
 800085a:	210e      	movs	r1, #14
 800085c:	4831      	ldr	r0, [pc, #196]	; (8000924 <main+0x360>)
 800085e:	f000 fabd 	bl	8000ddc <ITM0_Write>

     if (ETH_DBG_EN)ITM0_Write("\r\n SET-UP W5500 \r\n",strlen("\r\n SET-UP W5500 \r\n"));
 8000862:	4b31      	ldr	r3, [pc, #196]	; (8000928 <main+0x364>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d003      	beq.n	8000872 <main+0x2ae>
 800086a:	2112      	movs	r1, #18
 800086c:	482f      	ldr	r0, [pc, #188]	; (800092c <main+0x368>)
 800086e:	f000 fab5 	bl	8000ddc <ITM0_Write>


     SPI_ETH_PHY_RESET(&ETH);
 8000872:	4825      	ldr	r0, [pc, #148]	; (8000908 <main+0x344>)
 8000874:	f003 f8b2 	bl	80039dc <SPI_ETH_PHY_RESET>
     HAL_Delay(800);
 8000878:	f44f 7048 	mov.w	r0, #800	; 0x320
 800087c:	f001 f81c 	bl	80018b8 <HAL_Delay>
     eth_init(&ETH);
 8000880:	4821      	ldr	r0, [pc, #132]	; (8000908 <main+0x344>)
 8000882:	f003 fa95 	bl	8003db0 <eth_init>
     SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8000886:	4920      	ldr	r1, [pc, #128]	; (8000908 <main+0x344>)
 8000888:	4829      	ldr	r0, [pc, #164]	; (8000930 <main+0x36c>)
 800088a:	f003 fe16 	bl	80044ba <SPI_ETH_SNIFF>
     HAL_Delay(800);
 800088e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000892:	f001 f811 	bl	80018b8 <HAL_Delay>
   	 eth_socket_init(&ETH,S0_REG);
 8000896:	2101      	movs	r1, #1
 8000898:	481b      	ldr	r0, [pc, #108]	; (8000908 <main+0x344>)
 800089a:	f003 fb5b 	bl	8003f54 <eth_socket_init>

   	 SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 800089e:	491a      	ldr	r1, [pc, #104]	; (8000908 <main+0x344>)
 80008a0:	4823      	ldr	r0, [pc, #140]	; (8000930 <main+0x36c>)
 80008a2:	f003 fe0a 	bl	80044ba <SPI_ETH_SNIFF>

	 uint16_t b=0;
 80008a6:	2300      	movs	r3, #0
 80008a8:	80fb      	strh	r3, [r7, #6]
	 uint8_t spi_Data[2];
	 b = SPI_ETH_REG(&ETH, S_TX_WR, S0_REG ,SPI_READ, spi_Data,2);
 80008aa:	2302      	movs	r3, #2
 80008ac:	9301      	str	r3, [sp, #4]
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	9300      	str	r3, [sp, #0]
 80008b2:	2300      	movs	r3, #0
 80008b4:	2201      	movs	r2, #1
 80008b6:	2124      	movs	r1, #36	; 0x24
 80008b8:	4813      	ldr	r0, [pc, #76]	; (8000908 <main+0x344>)
 80008ba:	f003 f8e6 	bl	8003a8a <SPI_ETH_REG>
 80008be:	4603      	mov	r3, r0
 80008c0:	80fb      	strh	r3, [r7, #6]

	 eth_wr_SOCKET_MODE(&ETH,S0_REG,MODE_TCP);
 80008c2:	2201      	movs	r2, #1
 80008c4:	2101      	movs	r1, #1
 80008c6:	4810      	ldr	r0, [pc, #64]	; (8000908 <main+0x344>)
 80008c8:	f003 fa50 	bl	8003d6c <eth_wr_SOCKET_MODE>
   	 SPI_ETH_REG(&ETH, S_DIPR, S0_REG,SPI_WRITE, ETH.S_DIPR,4);									// client
 80008cc:	2304      	movs	r3, #4
 80008ce:	9301      	str	r3, [sp, #4]
 80008d0:	4b18      	ldr	r3, [pc, #96]	; (8000934 <main+0x370>)
 80008d2:	9300      	str	r3, [sp, #0]
 80008d4:	2301      	movs	r3, #1
 80008d6:	2201      	movs	r2, #1
 80008d8:	210c      	movs	r1, #12
 80008da:	480b      	ldr	r0, [pc, #44]	; (8000908 <main+0x344>)
 80008dc:	f003 f8d5 	bl	8003a8a <SPI_ETH_REG>
   	 ITM0_Write("\r\nETH-W5500-SOCK0 TCP REMOTE PORT TO CONNECT\r\n",strlen("\r\nETH-W5500-SOCK0 TCP REMOTE PORT TO CONNECT\r\n"));									// client
 80008e0:	212e      	movs	r1, #46	; 0x2e
 80008e2:	4815      	ldr	r0, [pc, #84]	; (8000938 <main+0x374>)
 80008e4:	f000 fa7a 	bl	8000ddc <ITM0_Write>

   	 SPI_ETH_REG(&ETH, S_DPORT, S0_REG,SPI_WRITE, ETH.S_DPORT,2);									// client
 80008e8:	2302      	movs	r3, #2
 80008ea:	9301      	str	r3, [sp, #4]
 80008ec:	4b13      	ldr	r3, [pc, #76]	; (800093c <main+0x378>)
 80008ee:	9300      	str	r3, [sp, #0]
 80008f0:	2301      	movs	r3, #1
 80008f2:	2201      	movs	r2, #1
 80008f4:	2110      	movs	r1, #16
 80008f6:	4804      	ldr	r0, [pc, #16]	; (8000908 <main+0x344>)
 80008f8:	f003 f8c7 	bl	8003a8a <SPI_ETH_REG>
   	 ITM0_Write("\r\nETH-W5500-SOCK0 TCP PORT SET\r\n",strlen("\r\nETH-W5500-SOCK0 TCP PORT SET\r\n"));						//same for server and client
 80008fc:	2120      	movs	r1, #32
 80008fe:	4810      	ldr	r0, [pc, #64]	; (8000940 <main+0x37c>)
 8000900:	f000 fa6c 	bl	8000ddc <ITM0_Write>
 8000904:	e01e      	b.n	8000944 <main+0x380>
 8000906:	bf00      	nop
 8000908:	2000011c 	.word	0x2000011c
 800090c:	20002234 	.word	0x20002234
 8000910:	40020000 	.word	0x40020000
 8000914:	40020400 	.word	0x40020400
 8000918:	2000002c 	.word	0x2000002c
 800091c:	20000004 	.word	0x20000004
 8000920:	10624dd3 	.word	0x10624dd3
 8000924:	08005160 	.word	0x08005160
 8000928:	20000000 	.word	0x20000000
 800092c:	08005170 	.word	0x08005170
 8000930:	20001190 	.word	0x20001190
 8000934:	20001160 	.word	0x20001160
 8000938:	08005184 	.word	0x08005184
 800093c:	20001164 	.word	0x20001164
 8000940:	080051b4 	.word	0x080051b4

   	 SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8000944:	490a      	ldr	r1, [pc, #40]	; (8000970 <main+0x3ac>)
 8000946:	480b      	ldr	r0, [pc, #44]	; (8000974 <main+0x3b0>)
 8000948:	f003 fdb7 	bl	80044ba <SPI_ETH_SNIFF>

   	 eth_wr_SOCKET_CMD(&ETH, S0_REG,OPEN );
 800094c:	2201      	movs	r2, #1
 800094e:	2101      	movs	r1, #1
 8000950:	4807      	ldr	r0, [pc, #28]	; (8000970 <main+0x3ac>)
 8000952:	f003 f9e9 	bl	8003d28 <eth_wr_SOCKET_CMD>

   	 HAL_Delay(1000);
 8000956:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800095a:	f000 ffad 	bl	80018b8 <HAL_Delay>

   	 SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 800095e:	4904      	ldr	r1, [pc, #16]	; (8000970 <main+0x3ac>)
 8000960:	4804      	ldr	r0, [pc, #16]	; (8000974 <main+0x3b0>)
 8000962:	f003 fdaa 	bl	80044ba <SPI_ETH_SNIFF>
		 eth_wr_SOCKET_CMD(&ETH,0, OPEN);																				//only for server
		 if (ETH_DBG_EN)ITM0_Write("\r\nETH-W5500-OPEN SOCKET\r\n",strlen("\r\nETH-W5500-OPEN SOCKET\r\n"));
		 HAL_Delay(1000);
	 	 eth_wr_SOCKET_CMD(&ETH,0, CONNECT);																				//only for server
		 ITM0_Write("\r\nETH-W5500-CONNECT\r\n",strlen("\r\nETH-W5500-CONNECT\r\n"));*/
		 SPI_READ_EN=1;
 8000966:	4b04      	ldr	r3, [pc, #16]	; (8000978 <main+0x3b4>)
 8000968:	2201      	movs	r2, #1
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	e7fb      	b.n	8000966 <main+0x3a2>
 800096e:	bf00      	nop
 8000970:	2000011c 	.word	0x2000011c
 8000974:	20001190 	.word	0x20001190
 8000978:	20002238 	.word	0x20002238

0800097c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b094      	sub	sp, #80	; 0x50
 8000980:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000982:	f107 0320 	add.w	r3, r7, #32
 8000986:	2230      	movs	r2, #48	; 0x30
 8000988:	2100      	movs	r1, #0
 800098a:	4618      	mov	r0, r3
 800098c:	f004 fbd4 	bl	8005138 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000990:	f107 030c 	add.w	r3, r7, #12
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a0:	2300      	movs	r3, #0
 80009a2:	60bb      	str	r3, [r7, #8]
 80009a4:	4b27      	ldr	r3, [pc, #156]	; (8000a44 <SystemClock_Config+0xc8>)
 80009a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a8:	4a26      	ldr	r2, [pc, #152]	; (8000a44 <SystemClock_Config+0xc8>)
 80009aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ae:	6413      	str	r3, [r2, #64]	; 0x40
 80009b0:	4b24      	ldr	r3, [pc, #144]	; (8000a44 <SystemClock_Config+0xc8>)
 80009b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b8:	60bb      	str	r3, [r7, #8]
 80009ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009bc:	2300      	movs	r3, #0
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	4b21      	ldr	r3, [pc, #132]	; (8000a48 <SystemClock_Config+0xcc>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a20      	ldr	r2, [pc, #128]	; (8000a48 <SystemClock_Config+0xcc>)
 80009c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009ca:	6013      	str	r3, [r2, #0]
 80009cc:	4b1e      	ldr	r3, [pc, #120]	; (8000a48 <SystemClock_Config+0xcc>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009d8:	2301      	movs	r3, #1
 80009da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e2:	2302      	movs	r3, #2
 80009e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80009ec:	230c      	movs	r3, #12
 80009ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80009f0:	2360      	movs	r3, #96	; 0x60
 80009f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009f4:	2302      	movs	r3, #2
 80009f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009f8:	2304      	movs	r3, #4
 80009fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009fc:	f107 0320 	add.w	r3, r7, #32
 8000a00:	4618      	mov	r0, r3
 8000a02:	f001 fa2d 	bl	8001e60 <HAL_RCC_OscConfig>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a0c:	f000 fdb4 	bl	8001578 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a10:	230f      	movs	r3, #15
 8000a12:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a14:	2302      	movs	r3, #2
 8000a16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a22:	2300      	movs	r3, #0
 8000a24:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a26:	f107 030c 	add.w	r3, r7, #12
 8000a2a:	2103      	movs	r1, #3
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f001 fc8f 	bl	8002350 <HAL_RCC_ClockConfig>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000a38:	f000 fd9e 	bl	8001578 <Error_Handler>
  }
}
 8000a3c:	bf00      	nop
 8000a3e:	3750      	adds	r7, #80	; 0x50
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40007000 	.word	0x40007000

08000a4c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a50:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <MX_SPI1_Init+0x64>)
 8000a52:	4a18      	ldr	r2, [pc, #96]	; (8000ab4 <MX_SPI1_Init+0x68>)
 8000a54:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a56:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <MX_SPI1_Init+0x64>)
 8000a58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a5c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a5e:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <MX_SPI1_Init+0x64>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a64:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <MX_SPI1_Init+0x64>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <MX_SPI1_Init+0x64>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <MX_SPI1_Init+0x64>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <MX_SPI1_Init+0x64>)
 8000a78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a7c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <MX_SPI1_Init+0x64>)
 8000a80:	2210      	movs	r2, #16
 8000a82:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a84:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <MX_SPI1_Init+0x64>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <MX_SPI1_Init+0x64>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a90:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <MX_SPI1_Init+0x64>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <MX_SPI1_Init+0x64>)
 8000a98:	220a      	movs	r2, #10
 8000a9a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a9c:	4804      	ldr	r0, [pc, #16]	; (8000ab0 <MX_SPI1_Init+0x64>)
 8000a9e:	f001 fe03 	bl	80026a8 <HAL_SPI_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000aa8:	f000 fd66 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	2000002c 	.word	0x2000002c
 8000ab4:	40013000 	.word	0x40013000

08000ab8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08e      	sub	sp, #56	; 0x38
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000abe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000acc:	f107 0320 	add.w	r3, r7, #32
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]
 8000ae4:	615a      	str	r2, [r3, #20]
 8000ae6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ae8:	4b2f      	ldr	r3, [pc, #188]	; (8000ba8 <MX_TIM2_Init+0xf0>)
 8000aea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 8000af0:	4b2d      	ldr	r3, [pc, #180]	; (8000ba8 <MX_TIM2_Init+0xf0>)
 8000af2:	2264      	movs	r2, #100	; 0x64
 8000af4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af6:	4b2c      	ldr	r3, [pc, #176]	; (8000ba8 <MX_TIM2_Init+0xf0>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8000afc:	4b2a      	ldr	r3, [pc, #168]	; (8000ba8 <MX_TIM2_Init+0xf0>)
 8000afe:	2264      	movs	r2, #100	; 0x64
 8000b00:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b02:	4b29      	ldr	r3, [pc, #164]	; (8000ba8 <MX_TIM2_Init+0xf0>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b08:	4b27      	ldr	r3, [pc, #156]	; (8000ba8 <MX_TIM2_Init+0xf0>)
 8000b0a:	2280      	movs	r2, #128	; 0x80
 8000b0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b0e:	4826      	ldr	r0, [pc, #152]	; (8000ba8 <MX_TIM2_Init+0xf0>)
 8000b10:	f002 f8c0 	bl	8002c94 <HAL_TIM_Base_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000b1a:	f000 fd2d 	bl	8001578 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b22:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b28:	4619      	mov	r1, r3
 8000b2a:	481f      	ldr	r0, [pc, #124]	; (8000ba8 <MX_TIM2_Init+0xf0>)
 8000b2c:	f002 fb18 	bl	8003160 <HAL_TIM_ConfigClockSource>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000b36:	f000 fd1f 	bl	8001578 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000b3a:	481b      	ldr	r0, [pc, #108]	; (8000ba8 <MX_TIM2_Init+0xf0>)
 8000b3c:	f002 f8f9 	bl	8002d32 <HAL_TIM_OC_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000b46:	f000 fd17 	bl	8001578 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 8000b4a:	2108      	movs	r1, #8
 8000b4c:	4816      	ldr	r0, [pc, #88]	; (8000ba8 <MX_TIM2_Init+0xf0>)
 8000b4e:	f002 f949 	bl	8002de4 <HAL_TIM_OnePulse_Init>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8000b58:	f000 fd0e 	bl	8001578 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b60:	2300      	movs	r3, #0
 8000b62:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b64:	f107 0320 	add.w	r3, r7, #32
 8000b68:	4619      	mov	r1, r3
 8000b6a:	480f      	ldr	r0, [pc, #60]	; (8000ba8 <MX_TIM2_Init+0xf0>)
 8000b6c:	f002 fe98 	bl	80038a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 8000b76:	f000 fcff 	bl	8001578 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_INACTIVE;
 8000b7a:	2320      	movs	r3, #32
 8000b7c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b86:	2300      	movs	r3, #0
 8000b88:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b8a:	1d3b      	adds	r3, r7, #4
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <MX_TIM2_Init+0xf0>)
 8000b92:	f002 fa89 	bl	80030a8 <HAL_TIM_OC_ConfigChannel>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8000b9c:	f000 fcec 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	3738      	adds	r7, #56	; 0x38
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20000084 	.word	0x20000084

08000bac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08e      	sub	sp, #56	; 0x38
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
 8000bbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc0:	f107 0320 	add.w	r3, r7, #32
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
 8000bd8:	615a      	str	r2, [r3, #20]
 8000bda:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bdc:	4b2f      	ldr	r3, [pc, #188]	; (8000c9c <MX_TIM3_Init+0xf0>)
 8000bde:	4a30      	ldr	r2, [pc, #192]	; (8000ca0 <MX_TIM3_Init+0xf4>)
 8000be0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100;
 8000be2:	4b2e      	ldr	r3, [pc, #184]	; (8000c9c <MX_TIM3_Init+0xf0>)
 8000be4:	2264      	movs	r2, #100	; 0x64
 8000be6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be8:	4b2c      	ldr	r3, [pc, #176]	; (8000c9c <MX_TIM3_Init+0xf0>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 150;
 8000bee:	4b2b      	ldr	r3, [pc, #172]	; (8000c9c <MX_TIM3_Init+0xf0>)
 8000bf0:	2296      	movs	r2, #150	; 0x96
 8000bf2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bf4:	4b29      	ldr	r3, [pc, #164]	; (8000c9c <MX_TIM3_Init+0xf0>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bfa:	4b28      	ldr	r3, [pc, #160]	; (8000c9c <MX_TIM3_Init+0xf0>)
 8000bfc:	2280      	movs	r2, #128	; 0x80
 8000bfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c00:	4826      	ldr	r0, [pc, #152]	; (8000c9c <MX_TIM3_Init+0xf0>)
 8000c02:	f002 f847 	bl	8002c94 <HAL_TIM_Base_Init>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000c0c:	f000 fcb4 	bl	8001578 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c14:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	481f      	ldr	r0, [pc, #124]	; (8000c9c <MX_TIM3_Init+0xf0>)
 8000c1e:	f002 fa9f 	bl	8003160 <HAL_TIM_ConfigClockSource>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000c28:	f000 fca6 	bl	8001578 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000c2c:	481b      	ldr	r0, [pc, #108]	; (8000c9c <MX_TIM3_Init+0xf0>)
 8000c2e:	f002 f880 	bl	8002d32 <HAL_TIM_OC_Init>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000c38:	f000 fc9e 	bl	8001578 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 8000c3c:	2108      	movs	r1, #8
 8000c3e:	4817      	ldr	r0, [pc, #92]	; (8000c9c <MX_TIM3_Init+0xf0>)
 8000c40:	f002 f8d0 	bl	8002de4 <HAL_TIM_OnePulse_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8000c4a:	f000 fc95 	bl	8001578 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c52:	2300      	movs	r3, #0
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c56:	f107 0320 	add.w	r3, r7, #32
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	480f      	ldr	r0, [pc, #60]	; (8000c9c <MX_TIM3_Init+0xf0>)
 8000c5e:	f002 fe1f 	bl	80038a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 8000c68:	f000 fc86 	bl	8001578 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_INACTIVE;
 8000c6c:	2320      	movs	r3, #32
 8000c6e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c74:	2300      	movs	r3, #0
 8000c76:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c7c:	1d3b      	adds	r3, r7, #4
 8000c7e:	2200      	movs	r2, #0
 8000c80:	4619      	mov	r1, r3
 8000c82:	4806      	ldr	r0, [pc, #24]	; (8000c9c <MX_TIM3_Init+0xf0>)
 8000c84:	f002 fa10 	bl	80030a8 <HAL_TIM_OC_ConfigChannel>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8000c8e:	f000 fc73 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c92:	bf00      	nop
 8000c94:	3738      	adds	r7, #56	; 0x38
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	200000cc 	.word	0x200000cc
 8000ca0:	40000400 	.word	0x40000400

08000ca4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08a      	sub	sp, #40	; 0x28
 8000ca8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]
 8000cb4:	609a      	str	r2, [r3, #8]
 8000cb6:	60da      	str	r2, [r3, #12]
 8000cb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
 8000cbe:	4b43      	ldr	r3, [pc, #268]	; (8000dcc <MX_GPIO_Init+0x128>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a42      	ldr	r2, [pc, #264]	; (8000dcc <MX_GPIO_Init+0x128>)
 8000cc4:	f043 0304 	orr.w	r3, r3, #4
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b40      	ldr	r3, [pc, #256]	; (8000dcc <MX_GPIO_Init+0x128>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0304 	and.w	r3, r3, #4
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	4b3c      	ldr	r3, [pc, #240]	; (8000dcc <MX_GPIO_Init+0x128>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a3b      	ldr	r2, [pc, #236]	; (8000dcc <MX_GPIO_Init+0x128>)
 8000ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b39      	ldr	r3, [pc, #228]	; (8000dcc <MX_GPIO_Init+0x128>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60bb      	str	r3, [r7, #8]
 8000cf6:	4b35      	ldr	r3, [pc, #212]	; (8000dcc <MX_GPIO_Init+0x128>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a34      	ldr	r2, [pc, #208]	; (8000dcc <MX_GPIO_Init+0x128>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b32      	ldr	r3, [pc, #200]	; (8000dcc <MX_GPIO_Init+0x128>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	607b      	str	r3, [r7, #4]
 8000d12:	4b2e      	ldr	r3, [pc, #184]	; (8000dcc <MX_GPIO_Init+0x128>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a2d      	ldr	r2, [pc, #180]	; (8000dcc <MX_GPIO_Init+0x128>)
 8000d18:	f043 0302 	orr.w	r3, r3, #2
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b2b      	ldr	r3, [pc, #172]	; (8000dcc <MX_GPIO_Init+0x128>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PCB_LED_GPIO_Port, PCB_LED_Pin, GPIO_PIN_RESET);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d30:	4827      	ldr	r0, [pc, #156]	; (8000dd0 <MX_GPIO_Init+0x12c>)
 8000d32:	f001 f87b 	bl	8001e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000d36:	2200      	movs	r2, #0
 8000d38:	2102      	movs	r1, #2
 8000d3a:	4826      	ldr	r0, [pc, #152]	; (8000dd4 <MX_GPIO_Init+0x130>)
 8000d3c:	f001 f876 	bl	8001e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8000d40:	2201      	movs	r2, #1
 8000d42:	2110      	movs	r1, #16
 8000d44:	4823      	ldr	r0, [pc, #140]	; (8000dd4 <MX_GPIO_Init+0x130>)
 8000d46:	f001 f871 	bl	8001e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_RST_GPIO_Port, SPI_RST_Pin, GPIO_PIN_SET);
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	4822      	ldr	r0, [pc, #136]	; (8000dd8 <MX_GPIO_Init+0x134>)
 8000d50:	f001 f86c 	bl	8001e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PCB_LED_Pin */
  GPIO_InitStruct.Pin = PCB_LED_Pin;
 8000d54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PCB_LED_GPIO_Port, &GPIO_InitStruct);
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4818      	ldr	r0, [pc, #96]	; (8000dd0 <MX_GPIO_Init+0x12c>)
 8000d6e:	f000 fed9 	bl	8001b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_BTN_Pin WiFi_EN_Pin */
  GPIO_InitStruct.Pin = KEY_BTN_Pin|WiFi_EN_Pin;
 8000d72:	f240 1301 	movw	r3, #257	; 0x101
 8000d76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	4619      	mov	r1, r3
 8000d86:	4813      	ldr	r0, [pc, #76]	; (8000dd4 <MX_GPIO_Init+0x130>)
 8000d88:	f000 fecc 	bl	8001b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|SPI1_NSS_Pin;
 8000d8c:	2312      	movs	r3, #18
 8000d8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d90:	2301      	movs	r3, #1
 8000d92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	4619      	mov	r1, r3
 8000da2:	480c      	ldr	r0, [pc, #48]	; (8000dd4 <MX_GPIO_Init+0x130>)
 8000da4:	f000 febe 	bl	8001b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_RST_Pin */
  GPIO_InitStruct.Pin = SPI_RST_Pin;
 8000da8:	2301      	movs	r3, #1
 8000daa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dac:	2301      	movs	r3, #1
 8000dae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db4:	2303      	movs	r3, #3
 8000db6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_RST_GPIO_Port, &GPIO_InitStruct);
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4806      	ldr	r0, [pc, #24]	; (8000dd8 <MX_GPIO_Init+0x134>)
 8000dc0:	f000 feb0 	bl	8001b24 <HAL_GPIO_Init>

}
 8000dc4:	bf00      	nop
 8000dc6:	3728      	adds	r7, #40	; 0x28
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40023800 	.word	0x40023800
 8000dd0:	40020800 	.word	0x40020800
 8000dd4:	40020000 	.word	0x40020000
 8000dd8:	40020400 	.word	0x40020400

08000ddc <ITM0_Write>:

/* USER CODE BEGIN 4 */


int ITM0_Write( char *ptr, int len)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
 int DataIdx;

  for(DataIdx=0; DataIdx<len; DataIdx++)
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	e009      	b.n	8000e00 <ITM0_Write+0x24>
  {
    ITM_SendChar(*ptr++);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	1c5a      	adds	r2, r3, #1
 8000df0:	607a      	str	r2, [r7, #4]
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff fbbd 	bl	8000574 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fa      	ldr	r2, [r7, #12]
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	dbf1      	blt.n	8000dec <ITM0_Write+0x10>
  }
  return len;
 8000e08:	683b      	ldr	r3, [r7, #0]
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
	...

08000e14 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SysTick_IRQn 0 */

	ms_ticks++;	//100 ms
 8000e1a:	4bbf      	ldr	r3, [pc, #764]	; (8001118 <SysTick_Handler+0x304>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	4abd      	ldr	r2, [pc, #756]	; (8001118 <SysTick_Handler+0x304>)
 8000e22:	6013      	str	r3, [r2, #0]

	ESP_ticks++;
 8000e24:	4bbd      	ldr	r3, [pc, #756]	; (800111c <SysTick_Handler+0x308>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	4abc      	ldr	r2, [pc, #752]	; (800111c <SysTick_Handler+0x308>)
 8000e2c:	6013      	str	r3, [r2, #0]

// ENVIO DATOS WF ----------------------------------- ---------------------------//

/**********************[ INICIO - EHTERNET WDG ] **********************/

	if((ETH.S_status == 0))
 8000e2e:	4bbc      	ldr	r3, [pc, #752]	; (8001120 <SysTick_Handler+0x30c>)
 8000e30:	7d9b      	ldrb	r3, [r3, #22]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d10e      	bne.n	8000e54 <SysTick_Handler+0x40>
	{
		ETH.ETH_WDG++;
 8000e36:	4bba      	ldr	r3, [pc, #744]	; (8001120 <SysTick_Handler+0x30c>)
 8000e38:	8a9b      	ldrh	r3, [r3, #20]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	b29a      	uxth	r2, r3
 8000e3e:	4bb8      	ldr	r3, [pc, #736]	; (8001120 <SysTick_Handler+0x30c>)
 8000e40:	829a      	strh	r2, [r3, #20]
		if (ETH.ETH_WDG>=64000)
 8000e42:	4bb7      	ldr	r3, [pc, #732]	; (8001120 <SysTick_Handler+0x30c>)
 8000e44:	8a9b      	ldrh	r3, [r3, #20]
 8000e46:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 8000e4a:	d303      	bcc.n	8000e54 <SysTick_Handler+0x40>
		{
			ETH.ETH_WDG=64000;
 8000e4c:	4bb4      	ldr	r3, [pc, #720]	; (8001120 <SysTick_Handler+0x30c>)
 8000e4e:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8000e52:	829a      	strh	r2, [r3, #20]
		}
	}

/**********************[ FIN 	- EHTERNET WDG ] **********************/

if (ms_ticks==100)//(ms_ticks==250)//(ms_ticks==50)
 8000e54:	4bb0      	ldr	r3, [pc, #704]	; (8001118 <SysTick_Handler+0x304>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b64      	cmp	r3, #100	; 0x64
 8000e5a:	f040 8371 	bne.w	8001540 <SysTick_Handler+0x72c>
  {
	  dbgn++;
 8000e5e:	4bb1      	ldr	r3, [pc, #708]	; (8001124 <SysTick_Handler+0x310>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	3301      	adds	r3, #1
 8000e64:	4aaf      	ldr	r2, [pc, #700]	; (8001124 <SysTick_Handler+0x310>)
 8000e66:	6013      	str	r3, [r2, #0]
	  ms_ticks=0;
 8000e68:	4bab      	ldr	r3, [pc, #684]	; (8001118 <SysTick_Handler+0x304>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
	  min_ticks++;
 8000e6e:	4bae      	ldr	r3, [pc, #696]	; (8001128 <SysTick_Handler+0x314>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	3301      	adds	r3, #1
 8000e74:	4aac      	ldr	r2, [pc, #688]	; (8001128 <SysTick_Handler+0x314>)
 8000e76:	6013      	str	r3, [r2, #0]


	  	if(MBUS_ticks==360) MBUS_ticks=0;
 8000e78:	4bac      	ldr	r3, [pc, #688]	; (800112c <SysTick_Handler+0x318>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8000e80:	d102      	bne.n	8000e88 <SysTick_Handler+0x74>
 8000e82:	4baa      	ldr	r3, [pc, #680]	; (800112c <SysTick_Handler+0x318>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]

	  	if (asc==0)  MBUS_ticks++;
 8000e88:	4ba9      	ldr	r3, [pc, #676]	; (8001130 <SysTick_Handler+0x31c>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d104      	bne.n	8000e9a <SysTick_Handler+0x86>
 8000e90:	4ba6      	ldr	r3, [pc, #664]	; (800112c <SysTick_Handler+0x318>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	3301      	adds	r3, #1
 8000e96:	4aa5      	ldr	r2, [pc, #660]	; (800112c <SysTick_Handler+0x318>)
 8000e98:	6013      	str	r3, [r2, #0]
	  	if (MBUS_ticks==100) asc=1;
 8000e9a:	4ba4      	ldr	r3, [pc, #656]	; (800112c <SysTick_Handler+0x318>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2b64      	cmp	r3, #100	; 0x64
 8000ea0:	d102      	bne.n	8000ea8 <SysTick_Handler+0x94>
 8000ea2:	4ba3      	ldr	r3, [pc, #652]	; (8001130 <SysTick_Handler+0x31c>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	701a      	strb	r2, [r3, #0]
	  	if (asc==1) MBUS_ticks--;
 8000ea8:	4ba1      	ldr	r3, [pc, #644]	; (8001130 <SysTick_Handler+0x31c>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d104      	bne.n	8000eba <SysTick_Handler+0xa6>
 8000eb0:	4b9e      	ldr	r3, [pc, #632]	; (800112c <SysTick_Handler+0x318>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	4a9d      	ldr	r2, [pc, #628]	; (800112c <SysTick_Handler+0x318>)
 8000eb8:	6013      	str	r3, [r2, #0]
	  	if (MBUS_ticks==0) asc=0;
 8000eba:	4b9c      	ldr	r3, [pc, #624]	; (800112c <SysTick_Handler+0x318>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d102      	bne.n	8000ec8 <SysTick_Handler+0xb4>
 8000ec2:	4b9b      	ldr	r3, [pc, #620]	; (8001130 <SysTick_Handler+0x31c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	701a      	strb	r2, [r3, #0]


	  //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	  if(spi_no_debug)
 8000ec8:	4b9a      	ldr	r3, [pc, #616]	; (8001134 <SysTick_Handler+0x320>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	f000 8329 	beq.w	8001524 <SysTick_Handler+0x710>
	  	  {
	  if(SPI_READ_EN)
 8000ed2:	4b99      	ldr	r3, [pc, #612]	; (8001138 <SysTick_Handler+0x324>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	f000 8328 	beq.w	800152c <SysTick_Handler+0x718>
	  {
	     ETH.S_status=eth_rd_SOCKET_STAT(&ETH,S0_REG);  //este era el bardo
 8000edc:	2101      	movs	r1, #1
 8000ede:	4890      	ldr	r0, [pc, #576]	; (8001120 <SysTick_Handler+0x30c>)
 8000ee0:	f003 f980 	bl	80041e4 <eth_rd_SOCKET_STAT>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	4b8d      	ldr	r3, [pc, #564]	; (8001120 <SysTick_Handler+0x30c>)
 8000eea:	759a      	strb	r2, [r3, #22]

		  switch(ETH.S_status)	//Check Socket status
 8000eec:	4b8c      	ldr	r3, [pc, #560]	; (8001120 <SysTick_Handler+0x30c>)
 8000eee:	7d9b      	ldrb	r3, [r3, #22]
 8000ef0:	2b5f      	cmp	r3, #95	; 0x5f
 8000ef2:	f200 831e 	bhi.w	8001532 <SysTick_Handler+0x71e>
 8000ef6:	a201      	add	r2, pc, #4	; (adr r2, 8000efc <SysTick_Handler+0xe8>)
 8000ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000efc:	0800107d 	.word	0x0800107d
 8000f00:	08001533 	.word	0x08001533
 8000f04:	08001533 	.word	0x08001533
 8000f08:	08001533 	.word	0x08001533
 8000f0c:	08001533 	.word	0x08001533
 8000f10:	08001533 	.word	0x08001533
 8000f14:	08001533 	.word	0x08001533
 8000f18:	08001533 	.word	0x08001533
 8000f1c:	08001533 	.word	0x08001533
 8000f20:	08001533 	.word	0x08001533
 8000f24:	08001533 	.word	0x08001533
 8000f28:	08001533 	.word	0x08001533
 8000f2c:	08001533 	.word	0x08001533
 8000f30:	08001533 	.word	0x08001533
 8000f34:	08001533 	.word	0x08001533
 8000f38:	08001533 	.word	0x08001533
 8000f3c:	08001533 	.word	0x08001533
 8000f40:	08001533 	.word	0x08001533
 8000f44:	08001533 	.word	0x08001533
 8000f48:	0800109f 	.word	0x0800109f
 8000f4c:	08001101 	.word	0x08001101
 8000f50:	08001151 	.word	0x08001151
 8000f54:	08001169 	.word	0x08001169
 8000f58:	08001181 	.word	0x08001181
 8000f5c:	080013b5 	.word	0x080013b5
 8000f60:	08001533 	.word	0x08001533
 8000f64:	080013cd 	.word	0x080013cd
 8000f68:	08001431 	.word	0x08001431
 8000f6c:	0800146f 	.word	0x0800146f
 8000f70:	080014ad 	.word	0x080014ad
 8000f74:	08001533 	.word	0x08001533
 8000f78:	08001533 	.word	0x08001533
 8000f7c:	08001533 	.word	0x08001533
 8000f80:	08001533 	.word	0x08001533
 8000f84:	080014c5 	.word	0x080014c5
 8000f88:	08001533 	.word	0x08001533
 8000f8c:	08001533 	.word	0x08001533
 8000f90:	08001533 	.word	0x08001533
 8000f94:	08001533 	.word	0x08001533
 8000f98:	08001533 	.word	0x08001533
 8000f9c:	08001533 	.word	0x08001533
 8000fa0:	08001533 	.word	0x08001533
 8000fa4:	08001533 	.word	0x08001533
 8000fa8:	08001533 	.word	0x08001533
 8000fac:	08001533 	.word	0x08001533
 8000fb0:	08001533 	.word	0x08001533
 8000fb4:	08001533 	.word	0x08001533
 8000fb8:	08001533 	.word	0x08001533
 8000fbc:	08001533 	.word	0x08001533
 8000fc0:	08001533 	.word	0x08001533
 8000fc4:	080014dd 	.word	0x080014dd
 8000fc8:	08001533 	.word	0x08001533
 8000fcc:	08001533 	.word	0x08001533
 8000fd0:	08001533 	.word	0x08001533
 8000fd4:	08001533 	.word	0x08001533
 8000fd8:	08001533 	.word	0x08001533
 8000fdc:	08001533 	.word	0x08001533
 8000fe0:	08001533 	.word	0x08001533
 8000fe4:	08001533 	.word	0x08001533
 8000fe8:	08001533 	.word	0x08001533
 8000fec:	08001533 	.word	0x08001533
 8000ff0:	08001533 	.word	0x08001533
 8000ff4:	08001533 	.word	0x08001533
 8000ff8:	08001533 	.word	0x08001533
 8000ffc:	08001533 	.word	0x08001533
 8001000:	08001533 	.word	0x08001533
 8001004:	080014f5 	.word	0x080014f5
 8001008:	08001533 	.word	0x08001533
 800100c:	08001533 	.word	0x08001533
 8001010:	08001533 	.word	0x08001533
 8001014:	08001533 	.word	0x08001533
 8001018:	08001533 	.word	0x08001533
 800101c:	08001533 	.word	0x08001533
 8001020:	08001533 	.word	0x08001533
 8001024:	08001533 	.word	0x08001533
 8001028:	08001533 	.word	0x08001533
 800102c:	08001533 	.word	0x08001533
 8001030:	08001533 	.word	0x08001533
 8001034:	08001533 	.word	0x08001533
 8001038:	08001533 	.word	0x08001533
 800103c:	08001533 	.word	0x08001533
 8001040:	08001533 	.word	0x08001533
 8001044:	08001533 	.word	0x08001533
 8001048:	08001533 	.word	0x08001533
 800104c:	08001533 	.word	0x08001533
 8001050:	08001533 	.word	0x08001533
 8001054:	08001533 	.word	0x08001533
 8001058:	08001533 	.word	0x08001533
 800105c:	08001533 	.word	0x08001533
 8001060:	08001533 	.word	0x08001533
 8001064:	08001533 	.word	0x08001533
 8001068:	08001533 	.word	0x08001533
 800106c:	08001533 	.word	0x08001533
 8001070:	08001533 	.word	0x08001533
 8001074:	08001533 	.word	0x08001533
 8001078:	0800150d 	.word	0x0800150d
	     {
			 case SOCK_CLOSED :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSED \r\n",strlen("\r\nS0_SOCK_CLOSED \r\n"));
 800107c:	4b2f      	ldr	r3, [pc, #188]	; (800113c <SysTick_Handler+0x328>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d003      	beq.n	800108c <SysTick_Handler+0x278>
 8001084:	2113      	movs	r1, #19
 8001086:	482e      	ldr	r0, [pc, #184]	; (8001140 <SysTick_Handler+0x32c>)
 8001088:	f7ff fea8 	bl	8000ddc <ITM0_Write>
					 eth_wr_SOCKET_CMD(&ETH, S0_REG ,OPEN );
 800108c:	2201      	movs	r2, #1
 800108e:	2101      	movs	r1, #1
 8001090:	4823      	ldr	r0, [pc, #140]	; (8001120 <SysTick_Handler+0x30c>)
 8001092:	f002 fe49 	bl	8003d28 <eth_wr_SOCKET_CMD>
					 ETH.ETH_WDG=1;
 8001096:	4b22      	ldr	r3, [pc, #136]	; (8001120 <SysTick_Handler+0x30c>)
 8001098:	2201      	movs	r2, #1
 800109a:	829a      	strh	r2, [r3, #20]


				 }
			 break;
 800109c:	e249      	b.n	8001532 <SysTick_Handler+0x71e>
			 case  SOCK_INIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_INIT \r\n",strlen("\r\nS0_SOCK_INIT \r\n"));
 800109e:	4b27      	ldr	r3, [pc, #156]	; (800113c <SysTick_Handler+0x328>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <SysTick_Handler+0x29a>
 80010a6:	2111      	movs	r1, #17
 80010a8:	4826      	ldr	r0, [pc, #152]	; (8001144 <SysTick_Handler+0x330>)
 80010aa:	f7ff fe97 	bl	8000ddc <ITM0_Write>
					 if(ETH.S_ENserver == 1)
 80010ae:	4b1c      	ldr	r3, [pc, #112]	; (8001120 <SysTick_Handler+0x30c>)
 80010b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010b4:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d110      	bne.n	80010de <SysTick_Handler+0x2ca>
					 {
						 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_INIT \r\n",strlen("\r\nS0_SOCK_INIT \r\n"));
 80010bc:	4b1f      	ldr	r3, [pc, #124]	; (800113c <SysTick_Handler+0x328>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <SysTick_Handler+0x2b8>
 80010c4:	2111      	movs	r1, #17
 80010c6:	481f      	ldr	r0, [pc, #124]	; (8001144 <SysTick_Handler+0x330>)
 80010c8:	f7ff fe88 	bl	8000ddc <ITM0_Write>
							eth_wr_SOCKET_CMD(&ETH, S0_REG, LISTEN );
 80010cc:	2202      	movs	r2, #2
 80010ce:	2101      	movs	r1, #1
 80010d0:	4813      	ldr	r0, [pc, #76]	; (8001120 <SysTick_Handler+0x30c>)
 80010d2:	f002 fe29 	bl	8003d28 <eth_wr_SOCKET_CMD>
							ETH.ETH_WDG=0;
 80010d6:	4b12      	ldr	r3, [pc, #72]	; (8001120 <SysTick_Handler+0x30c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	829a      	strh	r2, [r3, #20]
						 	if (ETH_DBG_EN)ITM0_Write("\r\nETH-W5500-CONNECT\r\n",strlen("\r\nETH-W5500-CONNECT\r\n"));
						 	ETH.ETH_WDG=0;
					 }

				 }
			 break;
 80010dc:	e229      	b.n	8001532 <SysTick_Handler+0x71e>
						    eth_wr_SOCKET_CMD(&ETH,S0_REG, CONNECT);																				//only for server
 80010de:	2204      	movs	r2, #4
 80010e0:	2101      	movs	r1, #1
 80010e2:	480f      	ldr	r0, [pc, #60]	; (8001120 <SysTick_Handler+0x30c>)
 80010e4:	f002 fe20 	bl	8003d28 <eth_wr_SOCKET_CMD>
						 	if (ETH_DBG_EN)ITM0_Write("\r\nETH-W5500-CONNECT\r\n",strlen("\r\nETH-W5500-CONNECT\r\n"));
 80010e8:	4b14      	ldr	r3, [pc, #80]	; (800113c <SysTick_Handler+0x328>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d003      	beq.n	80010f8 <SysTick_Handler+0x2e4>
 80010f0:	2115      	movs	r1, #21
 80010f2:	4815      	ldr	r0, [pc, #84]	; (8001148 <SysTick_Handler+0x334>)
 80010f4:	f7ff fe72 	bl	8000ddc <ITM0_Write>
						 	ETH.ETH_WDG=0;
 80010f8:	4b09      	ldr	r3, [pc, #36]	; (8001120 <SysTick_Handler+0x30c>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	829a      	strh	r2, [r3, #20]
			 break;
 80010fe:	e218      	b.n	8001532 <SysTick_Handler+0x71e>
			 case SOCK_LISTEN :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_LISTEN \r\n",strlen("\r\nS0_SOCK_LISTEN \r\n"));
 8001100:	4b0e      	ldr	r3, [pc, #56]	; (800113c <SysTick_Handler+0x328>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d003      	beq.n	8001110 <SysTick_Handler+0x2fc>
 8001108:	2113      	movs	r1, #19
 800110a:	4810      	ldr	r0, [pc, #64]	; (800114c <SysTick_Handler+0x338>)
 800110c:	f7ff fe66 	bl	8000ddc <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001110:	4b03      	ldr	r3, [pc, #12]	; (8001120 <SysTick_Handler+0x30c>)
 8001112:	2200      	movs	r2, #0
 8001114:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001116:	e20c      	b.n	8001532 <SysTick_Handler+0x71e>
 8001118:	20000114 	.word	0x20000114
 800111c:	2000223c 	.word	0x2000223c
 8001120:	2000011c 	.word	0x2000011c
 8001124:	20002248 	.word	0x20002248
 8001128:	20000118 	.word	0x20000118
 800112c:	20002240 	.word	0x20002240
 8001130:	20002236 	.word	0x20002236
 8001134:	20002234 	.word	0x20002234
 8001138:	20002238 	.word	0x20002238
 800113c:	20000000 	.word	0x20000000
 8001140:	080051d8 	.word	0x080051d8
 8001144:	080051ec 	.word	0x080051ec
 8001148:	08005200 	.word	0x08005200
 800114c:	08005218 	.word	0x08005218
			 case SOCK_SYNSENT :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_SYNSENT \r\n",strlen("\r\nS0_SOCK_SYNSENT \r\n"));
 8001150:	4ba4      	ldr	r3, [pc, #656]	; (80013e4 <SysTick_Handler+0x5d0>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d003      	beq.n	8001160 <SysTick_Handler+0x34c>
 8001158:	2114      	movs	r1, #20
 800115a:	48a3      	ldr	r0, [pc, #652]	; (80013e8 <SysTick_Handler+0x5d4>)
 800115c:	f7ff fe3e 	bl	8000ddc <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001160:	4ba2      	ldr	r3, [pc, #648]	; (80013ec <SysTick_Handler+0x5d8>)
 8001162:	2200      	movs	r2, #0
 8001164:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001166:	e1e4      	b.n	8001532 <SysTick_Handler+0x71e>
			 case SOCK_SYNRECV :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_SYNRECV \r\n",strlen("\r\nS0_SOCK_SYNRECV \r\n"));
 8001168:	4b9e      	ldr	r3, [pc, #632]	; (80013e4 <SysTick_Handler+0x5d0>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d003      	beq.n	8001178 <SysTick_Handler+0x364>
 8001170:	2114      	movs	r1, #20
 8001172:	489f      	ldr	r0, [pc, #636]	; (80013f0 <SysTick_Handler+0x5dc>)
 8001174:	f7ff fe32 	bl	8000ddc <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001178:	4b9c      	ldr	r3, [pc, #624]	; (80013ec <SysTick_Handler+0x5d8>)
 800117a:	2200      	movs	r2, #0
 800117c:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 800117e:	e1d8      	b.n	8001532 <SysTick_Handler+0x71e>
			 case SOCK_ESTABLISHED :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_ESTABLISHED \r\n",strlen("\r\nS0_SOCK_ESTABLISHED \r\n"));
 8001180:	4b98      	ldr	r3, [pc, #608]	; (80013e4 <SysTick_Handler+0x5d0>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d003      	beq.n	8001190 <SysTick_Handler+0x37c>
 8001188:	2118      	movs	r1, #24
 800118a:	489a      	ldr	r0, [pc, #616]	; (80013f4 <SysTick_Handler+0x5e0>)
 800118c:	f7ff fe26 	bl	8000ddc <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001190:	4b96      	ldr	r3, [pc, #600]	; (80013ec <SysTick_Handler+0x5d8>)
 8001192:	2200      	movs	r2, #0
 8001194:	829a      	strh	r2, [r3, #20]

					if (ETH.S_ENserver == 1)  // Si el puerto Ethernet actúa como server (Recibe datos conexión mas pedido mbus
 8001196:	4b95      	ldr	r3, [pc, #596]	; (80013ec <SysTick_Handler+0x5d8>)
 8001198:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800119c:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d150      	bne.n	8001246 <SysTick_Handler+0x432>
					{

						S0_get_size = SPI_ETH_REG(&ETH, S_RX_RSR ,S0_REG, SPI_READ, spi_Data,2);//S0_get_size = SPI_ETH_REG(&ETH, S_RX_SZ_ADDR_BASEHH,S_RX_SZ_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 80011a4:	2302      	movs	r3, #2
 80011a6:	9301      	str	r3, [sp, #4]
 80011a8:	4b93      	ldr	r3, [pc, #588]	; (80013f8 <SysTick_Handler+0x5e4>)
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	2300      	movs	r3, #0
 80011ae:	2201      	movs	r2, #1
 80011b0:	2126      	movs	r1, #38	; 0x26
 80011b2:	488e      	ldr	r0, [pc, #568]	; (80013ec <SysTick_Handler+0x5d8>)
 80011b4:	f002 fc69 	bl	8003a8a <SPI_ETH_REG>
 80011b8:	4603      	mov	r3, r0
 80011ba:	461a      	mov	r2, r3
 80011bc:	4b8f      	ldr	r3, [pc, #572]	; (80013fc <SysTick_Handler+0x5e8>)
 80011be:	801a      	strh	r2, [r3, #0]
							if(S0_get_size != 0x00)
 80011c0:	4b8e      	ldr	r3, [pc, #568]	; (80013fc <SysTick_Handler+0x5e8>)
 80011c2:	881b      	ldrh	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	f000 81b3 	beq.w	8001530 <SysTick_Handler+0x71c>
							{
								eth_rd_SOCKET_DATA(&ETH,0,&rx_mem_pointer,S0_get_size); // read socket data
 80011ca:	4b8c      	ldr	r3, [pc, #560]	; (80013fc <SysTick_Handler+0x5e8>)
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	4a8c      	ldr	r2, [pc, #560]	; (8001400 <SysTick_Handler+0x5ec>)
 80011d0:	2100      	movs	r1, #0
 80011d2:	4886      	ldr	r0, [pc, #536]	; (80013ec <SysTick_Handler+0x5d8>)
 80011d4:	f003 f83c 	bl	8004250 <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S_RX_RD0,rx_mem_pointer,0 );		// write rx memory pointer
 80011d8:	4b89      	ldr	r3, [pc, #548]	; (8001400 <SysTick_Handler+0x5ec>)
 80011da:	881a      	ldrh	r2, [r3, #0]
 80011dc:	2300      	movs	r3, #0
 80011de:	2128      	movs	r1, #40	; 0x28
 80011e0:	4882      	ldr	r0, [pc, #520]	; (80013ec <SysTick_Handler+0x5d8>)
 80011e2:	f002 fcd8 	bl	8003b96 <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,RECV);							// write command to execute
 80011e6:	2240      	movs	r2, #64	; 0x40
 80011e8:	2100      	movs	r1, #0
 80011ea:	4880      	ldr	r0, [pc, #512]	; (80013ec <SysTick_Handler+0x5d8>)
 80011ec:	f002 fd9c 	bl	8003d28 <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 80011f0:	bf00      	nop
 80011f2:	2100      	movs	r1, #0
 80011f4:	487d      	ldr	r0, [pc, #500]	; (80013ec <SysTick_Handler+0x5d8>)
 80011f6:	f003 f810 	bl	800421a <eth_rd_SOCKET_CMD>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d1f8      	bne.n	80011f2 <SysTick_Handler+0x3de>
								{}

								//CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
								//mb_eth._n_MBUS_RCVD=S0_get_size;

								if(S0_get_size > 0)	{ ETH.S_data_available=1;}					//Flag data received
 8001200:	4b7e      	ldr	r3, [pc, #504]	; (80013fc <SysTick_Handler+0x5e8>)
 8001202:	881b      	ldrh	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d002      	beq.n	800120e <SysTick_Handler+0x3fa>
 8001208:	4b78      	ldr	r3, [pc, #480]	; (80013ec <SysTick_Handler+0x5d8>)
 800120a:	2201      	movs	r2, #1
 800120c:	769a      	strb	r2, [r3, #26]
									if (ETH_DBG_EN) ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n\r\n NO MBUS \r\n\r\n"));
								}*/

								//send_size=mb_eth._n_MBUS_2SND;  //ModBUS data qty

								eth_wr_SOCKET_DATA(&ETH,0, &tx_mem_pointer, send_size);	// write socket data
 800120e:	4b7d      	ldr	r3, [pc, #500]	; (8001404 <SysTick_Handler+0x5f0>)
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	4a7d      	ldr	r2, [pc, #500]	; (8001408 <SysTick_Handler+0x5f4>)
 8001214:	2100      	movs	r1, #0
 8001216:	4875      	ldr	r0, [pc, #468]	; (80013ec <SysTick_Handler+0x5d8>)
 8001218:	f003 f8ab 	bl	8004372 <eth_wr_SOCKET_DATA>

								SPI_ETH_WR_REG_16(&ETH,S_TX_WR,tx_mem_pointer,0);			// write tx memory pointer//SPI_ETH_WR_REG_16(&ETH,0x424,tx_mem_pointer,0);			// write tx memory pointer
 800121c:	4b7a      	ldr	r3, [pc, #488]	; (8001408 <SysTick_Handler+0x5f4>)
 800121e:	881a      	ldrh	r2, [r3, #0]
 8001220:	2300      	movs	r3, #0
 8001222:	2124      	movs	r1, #36	; 0x24
 8001224:	4871      	ldr	r0, [pc, #452]	; (80013ec <SysTick_Handler+0x5d8>)
 8001226:	f002 fcb6 	bl	8003b96 <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,SEND);							// write command to execute
 800122a:	2220      	movs	r2, #32
 800122c:	2100      	movs	r1, #0
 800122e:	486f      	ldr	r0, [pc, #444]	; (80013ec <SysTick_Handler+0x5d8>)
 8001230:	f002 fd7a 	bl	8003d28 <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001234:	bf00      	nop
 8001236:	2100      	movs	r1, #0
 8001238:	486c      	ldr	r0, [pc, #432]	; (80013ec <SysTick_Handler+0x5d8>)
 800123a:	f002 ffee 	bl	800421a <eth_rd_SOCKET_CMD>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d1f8      	bne.n	8001236 <SysTick_Handler+0x422>

							}
						}
					}
				 }
			 break;
 8001244:	e174      	b.n	8001530 <SysTick_Handler+0x71c>
						if (_w_answer==0)
 8001246:	4b71      	ldr	r3, [pc, #452]	; (800140c <SysTick_Handler+0x5f8>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d16f      	bne.n	800132e <SysTick_Handler+0x51a>
							ETH.data[0]=0x00;
 800124e:	4b67      	ldr	r3, [pc, #412]	; (80013ec <SysTick_Handler+0x5d8>)
 8001250:	2200      	movs	r2, #0
 8001252:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
							ETH.data[1]=0x00;
 8001256:	4b65      	ldr	r3, [pc, #404]	; (80013ec <SysTick_Handler+0x5d8>)
 8001258:	2200      	movs	r2, #0
 800125a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
							ETH.data[2]=0x00;
 800125e:	4b63      	ldr	r3, [pc, #396]	; (80013ec <SysTick_Handler+0x5d8>)
 8001260:	2200      	movs	r2, #0
 8001262:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
							ETH.data[3]=0x00;
 8001266:	4b61      	ldr	r3, [pc, #388]	; (80013ec <SysTick_Handler+0x5d8>)
 8001268:	2200      	movs	r2, #0
 800126a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
							ETH.data[4]=0x00;
 800126e:	4b5f      	ldr	r3, [pc, #380]	; (80013ec <SysTick_Handler+0x5d8>)
 8001270:	2200      	movs	r2, #0
 8001272:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
							ETH.data[5]=0x06;
 8001276:	4b5d      	ldr	r3, [pc, #372]	; (80013ec <SysTick_Handler+0x5d8>)
 8001278:	2206      	movs	r2, #6
 800127a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
							ETH.data[6]=0x01;
 800127e:	4b5b      	ldr	r3, [pc, #364]	; (80013ec <SysTick_Handler+0x5d8>)
 8001280:	2201      	movs	r2, #1
 8001282:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
							ETH.data[7]=0x03;
 8001286:	4b59      	ldr	r3, [pc, #356]	; (80013ec <SysTick_Handler+0x5d8>)
 8001288:	2203      	movs	r2, #3
 800128a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
							ETH.data[8]=0x00;
 800128e:	4b57      	ldr	r3, [pc, #348]	; (80013ec <SysTick_Handler+0x5d8>)
 8001290:	2200      	movs	r2, #0
 8001292:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
							ETH.data[9]=0x00;
 8001296:	4b55      	ldr	r3, [pc, #340]	; (80013ec <SysTick_Handler+0x5d8>)
 8001298:	2200      	movs	r2, #0
 800129a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
							ETH.data[10]=0x00;
 800129e:	4b53      	ldr	r3, [pc, #332]	; (80013ec <SysTick_Handler+0x5d8>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
							ETH.data[11]=0x0A;
 80012a6:	4b51      	ldr	r3, [pc, #324]	; (80013ec <SysTick_Handler+0x5d8>)
 80012a8:	220a      	movs	r2, #10
 80012aa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
							send_size=12;
 80012ae:	4b55      	ldr	r3, [pc, #340]	; (8001404 <SysTick_Handler+0x5f0>)
 80012b0:	220c      	movs	r2, #12
 80012b2:	801a      	strh	r2, [r3, #0]
							eth_wr_SOCKET_DATA(&ETH,S0_TX_BUFF, &tx_mem_pointer, send_size);	// write socket data
 80012b4:	4b53      	ldr	r3, [pc, #332]	; (8001404 <SysTick_Handler+0x5f0>)
 80012b6:	881b      	ldrh	r3, [r3, #0]
 80012b8:	4a53      	ldr	r2, [pc, #332]	; (8001408 <SysTick_Handler+0x5f4>)
 80012ba:	2102      	movs	r1, #2
 80012bc:	484b      	ldr	r0, [pc, #300]	; (80013ec <SysTick_Handler+0x5d8>)
 80012be:	f003 f858 	bl	8004372 <eth_wr_SOCKET_DATA>
						   	 SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 80012c2:	494a      	ldr	r1, [pc, #296]	; (80013ec <SysTick_Handler+0x5d8>)
 80012c4:	4852      	ldr	r0, [pc, #328]	; (8001410 <SysTick_Handler+0x5fc>)
 80012c6:	f003 f8f8 	bl	80044ba <SPI_ETH_SNIFF>
							SPI_ETH_WR_REG_16(&ETH,S_TX_WR,tx_mem_pointer,S0_REG);			// write tx memory pointer
 80012ca:	4b4f      	ldr	r3, [pc, #316]	; (8001408 <SysTick_Handler+0x5f4>)
 80012cc:	881a      	ldrh	r2, [r3, #0]
 80012ce:	2301      	movs	r3, #1
 80012d0:	2124      	movs	r1, #36	; 0x24
 80012d2:	4846      	ldr	r0, [pc, #280]	; (80013ec <SysTick_Handler+0x5d8>)
 80012d4:	f002 fc5f 	bl	8003b96 <SPI_ETH_WR_REG_16>
						   	 SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 80012d8:	4944      	ldr	r1, [pc, #272]	; (80013ec <SysTick_Handler+0x5d8>)
 80012da:	484d      	ldr	r0, [pc, #308]	; (8001410 <SysTick_Handler+0x5fc>)
 80012dc:	f003 f8ed 	bl	80044ba <SPI_ETH_SNIFF>
							eth_wr_SOCKET_CMD(&ETH,S0_REG,SEND);							// write command to execute
 80012e0:	2220      	movs	r2, #32
 80012e2:	2101      	movs	r1, #1
 80012e4:	4841      	ldr	r0, [pc, #260]	; (80013ec <SysTick_Handler+0x5d8>)
 80012e6:	f002 fd1f 	bl	8003d28 <eth_wr_SOCKET_CMD>
						   	 SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 80012ea:	4940      	ldr	r1, [pc, #256]	; (80013ec <SysTick_Handler+0x5d8>)
 80012ec:	4848      	ldr	r0, [pc, #288]	; (8001410 <SysTick_Handler+0x5fc>)
 80012ee:	f003 f8e4 	bl	80044ba <SPI_ETH_SNIFF>
							uint16_t read=0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	80fb      	strh	r3, [r7, #6]
								read=SPI_ETH_REG(&ETH, S_IR,S0_REG,SPI_READ, ETH.GAR,1);
 80012f6:	2301      	movs	r3, #1
 80012f8:	9301      	str	r3, [sp, #4]
 80012fa:	4b46      	ldr	r3, [pc, #280]	; (8001414 <SysTick_Handler+0x600>)
 80012fc:	9300      	str	r3, [sp, #0]
 80012fe:	2300      	movs	r3, #0
 8001300:	2201      	movs	r2, #1
 8001302:	2102      	movs	r1, #2
 8001304:	4839      	ldr	r0, [pc, #228]	; (80013ec <SysTick_Handler+0x5d8>)
 8001306:	f002 fbc0 	bl	8003a8a <SPI_ETH_REG>
 800130a:	4603      	mov	r3, r0
 800130c:	80fb      	strh	r3, [r7, #6]
							_w_answer=1;	// Waiting answer flag
 800130e:	4b3f      	ldr	r3, [pc, #252]	; (800140c <SysTick_Handler+0x5f8>)
 8001310:	2201      	movs	r2, #1
 8001312:	701a      	strb	r2, [r3, #0]
							MB_TOUT_ticks=0;	// restart counting
 8001314:	4b40      	ldr	r3, [pc, #256]	; (8001418 <SysTick_Handler+0x604>)
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
							if (ETH_DBG_EN) ITM0_Write("\r\n SENT MBUS REQ \r\n",strlen("\r\n\r\n SENT MBUS REQ \r\n\r\n"));
 800131a:	4b32      	ldr	r3, [pc, #200]	; (80013e4 <SysTick_Handler+0x5d0>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	f000 8106 	beq.w	8001530 <SysTick_Handler+0x71c>
 8001324:	2117      	movs	r1, #23
 8001326:	483d      	ldr	r0, [pc, #244]	; (800141c <SysTick_Handler+0x608>)
 8001328:	f7ff fd58 	bl	8000ddc <ITM0_Write>
			 break;
 800132c:	e100      	b.n	8001530 <SysTick_Handler+0x71c>
						S0_get_size = SPI_ETH_REG(&ETH, S_RX_RSR ,S0_REG ,SPI_READ, spi_Data,2);
 800132e:	2302      	movs	r3, #2
 8001330:	9301      	str	r3, [sp, #4]
 8001332:	4b31      	ldr	r3, [pc, #196]	; (80013f8 <SysTick_Handler+0x5e4>)
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	2300      	movs	r3, #0
 8001338:	2201      	movs	r2, #1
 800133a:	2126      	movs	r1, #38	; 0x26
 800133c:	482b      	ldr	r0, [pc, #172]	; (80013ec <SysTick_Handler+0x5d8>)
 800133e:	f002 fba4 	bl	8003a8a <SPI_ETH_REG>
 8001342:	4603      	mov	r3, r0
 8001344:	461a      	mov	r2, r3
 8001346:	4b2d      	ldr	r3, [pc, #180]	; (80013fc <SysTick_Handler+0x5e8>)
 8001348:	801a      	strh	r2, [r3, #0]
						_w_answer=0;	// Waiting answer flag
 800134a:	4b30      	ldr	r3, [pc, #192]	; (800140c <SysTick_Handler+0x5f8>)
 800134c:	2200      	movs	r2, #0
 800134e:	701a      	strb	r2, [r3, #0]
						if(S0_get_size != 0x00)
 8001350:	4b2a      	ldr	r3, [pc, #168]	; (80013fc <SysTick_Handler+0x5e8>)
 8001352:	881b      	ldrh	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	f000 80eb 	beq.w	8001530 <SysTick_Handler+0x71c>
								eth_rd_SOCKET_DATA(&ETH,S0_RX_BUFF,&rx_mem_pointer,S0_get_size); // read socket data
 800135a:	4b28      	ldr	r3, [pc, #160]	; (80013fc <SysTick_Handler+0x5e8>)
 800135c:	881b      	ldrh	r3, [r3, #0]
 800135e:	4a28      	ldr	r2, [pc, #160]	; (8001400 <SysTick_Handler+0x5ec>)
 8001360:	2103      	movs	r1, #3
 8001362:	4822      	ldr	r0, [pc, #136]	; (80013ec <SysTick_Handler+0x5d8>)
 8001364:	f002 ff74 	bl	8004250 <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S_RX_RD0,rx_mem_pointer,S0_REG);		// write rx memory pointer
 8001368:	4b25      	ldr	r3, [pc, #148]	; (8001400 <SysTick_Handler+0x5ec>)
 800136a:	881a      	ldrh	r2, [r3, #0]
 800136c:	2301      	movs	r3, #1
 800136e:	2128      	movs	r1, #40	; 0x28
 8001370:	481e      	ldr	r0, [pc, #120]	; (80013ec <SysTick_Handler+0x5d8>)
 8001372:	f002 fc10 	bl	8003b96 <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,S0_REG,RECV);							// write command to execute
 8001376:	2240      	movs	r2, #64	; 0x40
 8001378:	2101      	movs	r1, #1
 800137a:	481c      	ldr	r0, [pc, #112]	; (80013ec <SysTick_Handler+0x5d8>)
 800137c:	f002 fcd4 	bl	8003d28 <eth_wr_SOCKET_CMD>
								if (ETH_DBG_EN) ITM0_Write("\r\n RCVD DATA \r\n",strlen("\r\n RCVD DATA \r\n"));
 8001380:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <SysTick_Handler+0x5d0>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d003      	beq.n	8001390 <SysTick_Handler+0x57c>
 8001388:	210f      	movs	r1, #15
 800138a:	4825      	ldr	r0, [pc, #148]	; (8001420 <SysTick_Handler+0x60c>)
 800138c:	f7ff fd26 	bl	8000ddc <ITM0_Write>
								if(S0_get_size > 0)	{ ETH.S_data_available=1;}
 8001390:	4b1a      	ldr	r3, [pc, #104]	; (80013fc <SysTick_Handler+0x5e8>)
 8001392:	881b      	ldrh	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d003      	beq.n	80013a0 <SysTick_Handler+0x58c>
 8001398:	4b14      	ldr	r3, [pc, #80]	; (80013ec <SysTick_Handler+0x5d8>)
 800139a:	2201      	movs	r2, #1
 800139c:	769a      	strb	r2, [r3, #26]
			 break;
 800139e:	e0c7      	b.n	8001530 <SysTick_Handler+0x71c>
										if (ETH_DBG_EN) ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n\r\n NO MBUS \r\n\r\n"));
 80013a0:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <SysTick_Handler+0x5d0>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	f000 80c3 	beq.w	8001530 <SysTick_Handler+0x71c>
 80013aa:	2111      	movs	r1, #17
 80013ac:	481d      	ldr	r0, [pc, #116]	; (8001424 <SysTick_Handler+0x610>)
 80013ae:	f7ff fd15 	bl	8000ddc <ITM0_Write>
			 break;
 80013b2:	e0bd      	b.n	8001530 <SysTick_Handler+0x71c>
			 case SOCK_FIN_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_FIN_WAIT \r\n",strlen("\r\nS0_SOCK_FIN_WAIT \r\n"));
 80013b4:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <SysTick_Handler+0x5d0>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d003      	beq.n	80013c4 <SysTick_Handler+0x5b0>
 80013bc:	2115      	movs	r1, #21
 80013be:	481a      	ldr	r0, [pc, #104]	; (8001428 <SysTick_Handler+0x614>)
 80013c0:	f7ff fd0c 	bl	8000ddc <ITM0_Write>
					 ETH.ETH_WDG=0;
 80013c4:	4b09      	ldr	r3, [pc, #36]	; (80013ec <SysTick_Handler+0x5d8>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 80013ca:	e0b2      	b.n	8001532 <SysTick_Handler+0x71e>
			 case SOCK_CLOSING :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSING \r\n",strlen("\r\nS0_SOCK_CLOSING \r\n"));
 80013cc:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <SysTick_Handler+0x5d0>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d003      	beq.n	80013dc <SysTick_Handler+0x5c8>
 80013d4:	2114      	movs	r1, #20
 80013d6:	4815      	ldr	r0, [pc, #84]	; (800142c <SysTick_Handler+0x618>)
 80013d8:	f7ff fd00 	bl	8000ddc <ITM0_Write>
					 ETH.ETH_WDG=0;
 80013dc:	4b03      	ldr	r3, [pc, #12]	; (80013ec <SysTick_Handler+0x5d8>)
 80013de:	2200      	movs	r2, #0
 80013e0:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 80013e2:	e0a6      	b.n	8001532 <SysTick_Handler+0x71e>
 80013e4:	20000000 	.word	0x20000000
 80013e8:	0800522c 	.word	0x0800522c
 80013ec:	2000011c 	.word	0x2000011c
 80013f0:	08005244 	.word	0x08005244
 80013f4:	0800525c 	.word	0x0800525c
 80013f8:	200021f4 	.word	0x200021f4
 80013fc:	200021ea 	.word	0x200021ea
 8001400:	200021ee 	.word	0x200021ee
 8001404:	200021f0 	.word	0x200021f0
 8001408:	200021ec 	.word	0x200021ec
 800140c:	20002235 	.word	0x20002235
 8001410:	20001190 	.word	0x20001190
 8001414:	20001140 	.word	0x20001140
 8001418:	20002244 	.word	0x20002244
 800141c:	08005278 	.word	0x08005278
 8001420:	0800528c 	.word	0x0800528c
 8001424:	0800529c 	.word	0x0800529c
 8001428:	080052ac 	.word	0x080052ac
 800142c:	080052c4 	.word	0x080052c4
			 case  SOCK_TIME_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_TIME_WAIT \r\n",strlen("\r\nS0_SOCK_TIME_WAIT \r\n"));
 8001430:	4b46      	ldr	r3, [pc, #280]	; (800154c <SysTick_Handler+0x738>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d003      	beq.n	8001440 <SysTick_Handler+0x62c>
 8001438:	2116      	movs	r1, #22
 800143a:	4845      	ldr	r0, [pc, #276]	; (8001550 <SysTick_Handler+0x73c>)
 800143c:	f7ff fcce 	bl	8000ddc <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH,S0_REG, DISCON );
 8001440:	2208      	movs	r2, #8
 8001442:	2101      	movs	r1, #1
 8001444:	4843      	ldr	r0, [pc, #268]	; (8001554 <SysTick_Handler+0x740>)
 8001446:	f002 fc6f 	bl	8003d28 <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH,S_CR ,S0_REG,SPI_READ, spi_Data,1))//while( SPI_ETH_REG(&ETH, S_CR_ADDR_BASEH,S_CR_ADDR_BASEL ,SPI_READ, spi_Data,1))
 800144a:	bf00      	nop
 800144c:	2301      	movs	r3, #1
 800144e:	9301      	str	r3, [sp, #4]
 8001450:	4b41      	ldr	r3, [pc, #260]	; (8001558 <SysTick_Handler+0x744>)
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	2300      	movs	r3, #0
 8001456:	2201      	movs	r2, #1
 8001458:	2101      	movs	r1, #1
 800145a:	483e      	ldr	r0, [pc, #248]	; (8001554 <SysTick_Handler+0x740>)
 800145c:	f002 fb15 	bl	8003a8a <SPI_ETH_REG>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1f2      	bne.n	800144c <SysTick_Handler+0x638>
					{}
					ETH.ETH_WDG=0;
 8001466:	4b3b      	ldr	r3, [pc, #236]	; (8001554 <SysTick_Handler+0x740>)
 8001468:	2200      	movs	r2, #0
 800146a:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 800146c:	e061      	b.n	8001532 <SysTick_Handler+0x71e>
			 case SOCK_CLOSE_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSE_WAIT \r\n",strlen("\r\nS0_SOCK_CLOSE_WAIT \r\n"));
 800146e:	4b37      	ldr	r3, [pc, #220]	; (800154c <SysTick_Handler+0x738>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d003      	beq.n	800147e <SysTick_Handler+0x66a>
 8001476:	2117      	movs	r1, #23
 8001478:	4838      	ldr	r0, [pc, #224]	; (800155c <SysTick_Handler+0x748>)
 800147a:	f7ff fcaf 	bl	8000ddc <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH,S0_REG,DISCON );
 800147e:	2208      	movs	r2, #8
 8001480:	2101      	movs	r1, #1
 8001482:	4834      	ldr	r0, [pc, #208]	; (8001554 <SysTick_Handler+0x740>)
 8001484:	f002 fc50 	bl	8003d28 <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH,S_CR,S0_REG,SPI_READ, spi_Data,1))
 8001488:	bf00      	nop
 800148a:	2301      	movs	r3, #1
 800148c:	9301      	str	r3, [sp, #4]
 800148e:	4b32      	ldr	r3, [pc, #200]	; (8001558 <SysTick_Handler+0x744>)
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	2300      	movs	r3, #0
 8001494:	2201      	movs	r2, #1
 8001496:	2101      	movs	r1, #1
 8001498:	482e      	ldr	r0, [pc, #184]	; (8001554 <SysTick_Handler+0x740>)
 800149a:	f002 faf6 	bl	8003a8a <SPI_ETH_REG>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1f2      	bne.n	800148a <SysTick_Handler+0x676>
					{}
					ETH.ETH_WDG=0;
 80014a4:	4b2b      	ldr	r3, [pc, #172]	; (8001554 <SysTick_Handler+0x740>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 80014aa:	e042      	b.n	8001532 <SysTick_Handler+0x71e>
			 case SOCK_LAST_ACK :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_LAST_ACK \r\n",strlen("\r\nS0_SOCK_LAST_ACK \r\n"));
 80014ac:	4b27      	ldr	r3, [pc, #156]	; (800154c <SysTick_Handler+0x738>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d003      	beq.n	80014bc <SysTick_Handler+0x6a8>
 80014b4:	2115      	movs	r1, #21
 80014b6:	482a      	ldr	r0, [pc, #168]	; (8001560 <SysTick_Handler+0x74c>)
 80014b8:	f7ff fc90 	bl	8000ddc <ITM0_Write>
					 ETH.ETH_WDG=0;
 80014bc:	4b25      	ldr	r3, [pc, #148]	; (8001554 <SysTick_Handler+0x740>)
 80014be:	2200      	movs	r2, #0
 80014c0:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 80014c2:	e036      	b.n	8001532 <SysTick_Handler+0x71e>
			 case SOCK_UDP :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_UDP \r\n",strlen("\r\nS0_SOCK_UDP \r\n"));
 80014c4:	4b21      	ldr	r3, [pc, #132]	; (800154c <SysTick_Handler+0x738>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d003      	beq.n	80014d4 <SysTick_Handler+0x6c0>
 80014cc:	2110      	movs	r1, #16
 80014ce:	4825      	ldr	r0, [pc, #148]	; (8001564 <SysTick_Handler+0x750>)
 80014d0:	f7ff fc84 	bl	8000ddc <ITM0_Write>
					 ETH.ETH_WDG=0;
 80014d4:	4b1f      	ldr	r3, [pc, #124]	; (8001554 <SysTick_Handler+0x740>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 80014da:	e02a      	b.n	8001532 <SysTick_Handler+0x71e>
			 case  SOCK_IPRAW :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_IPRAW \r\n",strlen("\r\nS0_SOCK_IPRAW \r\n"));
 80014dc:	4b1b      	ldr	r3, [pc, #108]	; (800154c <SysTick_Handler+0x738>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d003      	beq.n	80014ec <SysTick_Handler+0x6d8>
 80014e4:	2112      	movs	r1, #18
 80014e6:	4820      	ldr	r0, [pc, #128]	; (8001568 <SysTick_Handler+0x754>)
 80014e8:	f7ff fc78 	bl	8000ddc <ITM0_Write>
					 ETH.ETH_WDG=0;
 80014ec:	4b19      	ldr	r3, [pc, #100]	; (8001554 <SysTick_Handler+0x740>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 80014f2:	e01e      	b.n	8001532 <SysTick_Handler+0x71e>
			 case  SOCK_MACRAW :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_MACRAW \r\n",strlen("\r\nS0_SOCK_MACRAW \r\n"));
 80014f4:	4b15      	ldr	r3, [pc, #84]	; (800154c <SysTick_Handler+0x738>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d003      	beq.n	8001504 <SysTick_Handler+0x6f0>
 80014fc:	2113      	movs	r1, #19
 80014fe:	481b      	ldr	r0, [pc, #108]	; (800156c <SysTick_Handler+0x758>)
 8001500:	f7ff fc6c 	bl	8000ddc <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001504:	4b13      	ldr	r3, [pc, #76]	; (8001554 <SysTick_Handler+0x740>)
 8001506:	2200      	movs	r2, #0
 8001508:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 800150a:	e012      	b.n	8001532 <SysTick_Handler+0x71e>
			 case SOCK_PPOE :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_PPOE \r\n",strlen("\r\nS0_SOCK_PPOE \r\n"));
 800150c:	4b0f      	ldr	r3, [pc, #60]	; (800154c <SysTick_Handler+0x738>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d003      	beq.n	800151c <SysTick_Handler+0x708>
 8001514:	2111      	movs	r1, #17
 8001516:	4816      	ldr	r0, [pc, #88]	; (8001570 <SysTick_Handler+0x75c>)
 8001518:	f7ff fc60 	bl	8000ddc <ITM0_Write>
					 ETH.ETH_WDG=0;
 800151c:	4b0d      	ldr	r3, [pc, #52]	; (8001554 <SysTick_Handler+0x740>)
 800151e:	2200      	movs	r2, #0
 8001520:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001522:	e006      	b.n	8001532 <SysTick_Handler+0x71e>
	  }
	  }else
	  	  {
		  //ETH.operacion=SPI_READ;
		  //ETH.TX[3]=0x00;
		  SPI_ETH(&ETH);
 8001524:	480b      	ldr	r0, [pc, #44]	; (8001554 <SysTick_Handler+0x740>)
 8001526:	f002 fa88 	bl	8003a3a <SPI_ETH>
 800152a:	e002      	b.n	8001532 <SysTick_Handler+0x71e>
			 default:
 800152c:	bf00      	nop
 800152e:	e000      	b.n	8001532 <SysTick_Handler+0x71e>
			 break;
 8001530:	bf00      	nop
	  	  }
	  if(min_ticks==2)//if(min_ticks==10)
 8001532:	4b10      	ldr	r3, [pc, #64]	; (8001574 <SysTick_Handler+0x760>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2b02      	cmp	r3, #2
 8001538:	d102      	bne.n	8001540 <SysTick_Handler+0x72c>
		  {
		  	  min_ticks=0;  /* SETEO CADA 2 min*/
 800153a:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <SysTick_Handler+0x760>)
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
  }



  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001540:	f000 f99a 	bl	8001878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20000000 	.word	0x20000000
 8001550:	080052dc 	.word	0x080052dc
 8001554:	2000011c 	.word	0x2000011c
 8001558:	200021f4 	.word	0x200021f4
 800155c:	080052f4 	.word	0x080052f4
 8001560:	0800530c 	.word	0x0800530c
 8001564:	08005324 	.word	0x08005324
 8001568:	08005338 	.word	0x08005338
 800156c:	0800534c 	.word	0x0800534c
 8001570:	08005360 	.word	0x08005360
 8001574:	20000118 	.word	0x20000118

08001578 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800157c:	b672      	cpsid	i
}
 800157e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001580:	e7fe      	b.n	8001580 <Error_Handler+0x8>
	...

08001584 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	607b      	str	r3, [r7, #4]
 800158e:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <HAL_MspInit+0x4c>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	4a0f      	ldr	r2, [pc, #60]	; (80015d0 <HAL_MspInit+0x4c>)
 8001594:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001598:	6453      	str	r3, [r2, #68]	; 0x44
 800159a:	4b0d      	ldr	r3, [pc, #52]	; (80015d0 <HAL_MspInit+0x4c>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	603b      	str	r3, [r7, #0]
 80015aa:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <HAL_MspInit+0x4c>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	4a08      	ldr	r2, [pc, #32]	; (80015d0 <HAL_MspInit+0x4c>)
 80015b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b4:	6413      	str	r3, [r2, #64]	; 0x40
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <HAL_MspInit+0x4c>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015be:	603b      	str	r3, [r7, #0]
 80015c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	40023800 	.word	0x40023800

080015d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08a      	sub	sp, #40	; 0x28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a19      	ldr	r2, [pc, #100]	; (8001658 <HAL_SPI_MspInit+0x84>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d12b      	bne.n	800164e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
 80015fa:	4b18      	ldr	r3, [pc, #96]	; (800165c <HAL_SPI_MspInit+0x88>)
 80015fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fe:	4a17      	ldr	r2, [pc, #92]	; (800165c <HAL_SPI_MspInit+0x88>)
 8001600:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001604:	6453      	str	r3, [r2, #68]	; 0x44
 8001606:	4b15      	ldr	r3, [pc, #84]	; (800165c <HAL_SPI_MspInit+0x88>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	4b11      	ldr	r3, [pc, #68]	; (800165c <HAL_SPI_MspInit+0x88>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a10      	ldr	r2, [pc, #64]	; (800165c <HAL_SPI_MspInit+0x88>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b0e      	ldr	r3, [pc, #56]	; (800165c <HAL_SPI_MspInit+0x88>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800162e:	23e0      	movs	r3, #224	; 0xe0
 8001630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001632:	2302      	movs	r3, #2
 8001634:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163a:	2303      	movs	r3, #3
 800163c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800163e:	2305      	movs	r3, #5
 8001640:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001642:	f107 0314 	add.w	r3, r7, #20
 8001646:	4619      	mov	r1, r3
 8001648:	4805      	ldr	r0, [pc, #20]	; (8001660 <HAL_SPI_MspInit+0x8c>)
 800164a:	f000 fa6b 	bl	8001b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800164e:	bf00      	nop
 8001650:	3728      	adds	r7, #40	; 0x28
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40013000 	.word	0x40013000
 800165c:	40023800 	.word	0x40023800
 8001660:	40020000 	.word	0x40020000

08001664 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001674:	d116      	bne.n	80016a4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	4b1a      	ldr	r3, [pc, #104]	; (80016e4 <HAL_TIM_Base_MspInit+0x80>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	4a19      	ldr	r2, [pc, #100]	; (80016e4 <HAL_TIM_Base_MspInit+0x80>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	6413      	str	r3, [r2, #64]	; 0x40
 8001686:	4b17      	ldr	r3, [pc, #92]	; (80016e4 <HAL_TIM_Base_MspInit+0x80>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001692:	2200      	movs	r2, #0
 8001694:	2100      	movs	r1, #0
 8001696:	201c      	movs	r0, #28
 8001698:	f000 fa0d 	bl	8001ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800169c:	201c      	movs	r0, #28
 800169e:	f000 fa26 	bl	8001aee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80016a2:	e01a      	b.n	80016da <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a0f      	ldr	r2, [pc, #60]	; (80016e8 <HAL_TIM_Base_MspInit+0x84>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d115      	bne.n	80016da <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	60bb      	str	r3, [r7, #8]
 80016b2:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <HAL_TIM_Base_MspInit+0x80>)
 80016b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b6:	4a0b      	ldr	r2, [pc, #44]	; (80016e4 <HAL_TIM_Base_MspInit+0x80>)
 80016b8:	f043 0302 	orr.w	r3, r3, #2
 80016bc:	6413      	str	r3, [r2, #64]	; 0x40
 80016be:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <HAL_TIM_Base_MspInit+0x80>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	60bb      	str	r3, [r7, #8]
 80016c8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80016ca:	2200      	movs	r2, #0
 80016cc:	2100      	movs	r1, #0
 80016ce:	201d      	movs	r0, #29
 80016d0:	f000 f9f1 	bl	8001ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80016d4:	201d      	movs	r0, #29
 80016d6:	f000 fa0a 	bl	8001aee <HAL_NVIC_EnableIRQ>
}
 80016da:	bf00      	nop
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40000400 	.word	0x40000400

080016ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016f0:	e7fe      	b.n	80016f0 <NMI_Handler+0x4>

080016f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016f2:	b480      	push	{r7}
 80016f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016f6:	e7fe      	b.n	80016f6 <HardFault_Handler+0x4>

080016f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016fc:	e7fe      	b.n	80016fc <MemManage_Handler+0x4>

080016fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001702:	e7fe      	b.n	8001702 <BusFault_Handler+0x4>

08001704 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001708:	e7fe      	b.n	8001708 <UsageFault_Handler+0x4>

0800170a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001738:	4802      	ldr	r0, [pc, #8]	; (8001744 <TIM2_IRQHandler+0x10>)
 800173a:	f001 fbad 	bl	8002e98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000084 	.word	0x20000084

08001748 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800174c:	4802      	ldr	r0, [pc, #8]	; (8001758 <TIM3_IRQHandler+0x10>)
 800174e:	f001 fba3 	bl	8002e98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	200000cc 	.word	0x200000cc

0800175c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <SystemInit+0x20>)
 8001762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001766:	4a05      	ldr	r2, [pc, #20]	; (800177c <SystemInit+0x20>)
 8001768:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800176c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001780:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001784:	480d      	ldr	r0, [pc, #52]	; (80017bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001786:	490e      	ldr	r1, [pc, #56]	; (80017c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001788:	4a0e      	ldr	r2, [pc, #56]	; (80017c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800178a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800178c:	e002      	b.n	8001794 <LoopCopyDataInit>

0800178e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800178e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001790:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001792:	3304      	adds	r3, #4

08001794 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001794:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001796:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001798:	d3f9      	bcc.n	800178e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800179a:	4a0b      	ldr	r2, [pc, #44]	; (80017c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800179c:	4c0b      	ldr	r4, [pc, #44]	; (80017cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800179e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a0:	e001      	b.n	80017a6 <LoopFillZerobss>

080017a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017a4:	3204      	adds	r2, #4

080017a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017a8:	d3fb      	bcc.n	80017a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017aa:	f7ff ffd7 	bl	800175c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ae:	f003 fc9f 	bl	80050f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017b2:	f7fe ff07 	bl	80005c4 <main>
  bx  lr    
 80017b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80017b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017c0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80017c4:	0800542c 	.word	0x0800542c
  ldr r2, =_sbss
 80017c8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80017cc:	20002250 	.word	0x20002250

080017d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017d0:	e7fe      	b.n	80017d0 <ADC_IRQHandler>
	...

080017d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017d8:	4b0e      	ldr	r3, [pc, #56]	; (8001814 <HAL_Init+0x40>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a0d      	ldr	r2, [pc, #52]	; (8001814 <HAL_Init+0x40>)
 80017de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017e4:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <HAL_Init+0x40>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a0a      	ldr	r2, [pc, #40]	; (8001814 <HAL_Init+0x40>)
 80017ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017f0:	4b08      	ldr	r3, [pc, #32]	; (8001814 <HAL_Init+0x40>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a07      	ldr	r2, [pc, #28]	; (8001814 <HAL_Init+0x40>)
 80017f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017fc:	2003      	movs	r0, #3
 80017fe:	f000 f94f 	bl	8001aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001802:	200f      	movs	r0, #15
 8001804:	f000 f808 	bl	8001818 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001808:	f7ff febc 	bl	8001584 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40023c00 	.word	0x40023c00

08001818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001820:	4b12      	ldr	r3, [pc, #72]	; (800186c <HAL_InitTick+0x54>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4b12      	ldr	r3, [pc, #72]	; (8001870 <HAL_InitTick+0x58>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	4619      	mov	r1, r3
 800182a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800182e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001832:	fbb2 f3f3 	udiv	r3, r2, r3
 8001836:	4618      	mov	r0, r3
 8001838:	f000 f967 	bl	8001b0a <HAL_SYSTICK_Config>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e00e      	b.n	8001864 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b0f      	cmp	r3, #15
 800184a:	d80a      	bhi.n	8001862 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800184c:	2200      	movs	r2, #0
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	f04f 30ff 	mov.w	r0, #4294967295
 8001854:	f000 f92f 	bl	8001ab6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001858:	4a06      	ldr	r2, [pc, #24]	; (8001874 <HAL_InitTick+0x5c>)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800185e:	2300      	movs	r3, #0
 8001860:	e000      	b.n	8001864 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
}
 8001864:	4618      	mov	r0, r3
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000004 	.word	0x20000004
 8001870:	2000000c 	.word	0x2000000c
 8001874:	20000008 	.word	0x20000008

08001878 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <HAL_IncTick+0x20>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <HAL_IncTick+0x24>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4413      	add	r3, r2
 8001888:	4a04      	ldr	r2, [pc, #16]	; (800189c <HAL_IncTick+0x24>)
 800188a:	6013      	str	r3, [r2, #0]
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	2000000c 	.word	0x2000000c
 800189c:	2000224c 	.word	0x2000224c

080018a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return uwTick;
 80018a4:	4b03      	ldr	r3, [pc, #12]	; (80018b4 <HAL_GetTick+0x14>)
 80018a6:	681b      	ldr	r3, [r3, #0]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	2000224c 	.word	0x2000224c

080018b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018c0:	f7ff ffee 	bl	80018a0 <HAL_GetTick>
 80018c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018d0:	d005      	beq.n	80018de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018d2:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <HAL_Delay+0x44>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	461a      	mov	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4413      	add	r3, r2
 80018dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018de:	bf00      	nop
 80018e0:	f7ff ffde 	bl	80018a0 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d8f7      	bhi.n	80018e0 <HAL_Delay+0x28>
  {
  }
}
 80018f0:	bf00      	nop
 80018f2:	bf00      	nop
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	2000000c 	.word	0x2000000c

08001900 <__NVIC_SetPriorityGrouping>:
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001910:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <__NVIC_SetPriorityGrouping+0x44>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001916:	68ba      	ldr	r2, [r7, #8]
 8001918:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800191c:	4013      	ands	r3, r2
 800191e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001928:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800192c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001932:	4a04      	ldr	r2, [pc, #16]	; (8001944 <__NVIC_SetPriorityGrouping+0x44>)
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	60d3      	str	r3, [r2, #12]
}
 8001938:	bf00      	nop
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <__NVIC_GetPriorityGrouping>:
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800194c:	4b04      	ldr	r3, [pc, #16]	; (8001960 <__NVIC_GetPriorityGrouping+0x18>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	0a1b      	lsrs	r3, r3, #8
 8001952:	f003 0307 	and.w	r3, r3, #7
}
 8001956:	4618      	mov	r0, r3
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <__NVIC_EnableIRQ>:
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800196e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001972:	2b00      	cmp	r3, #0
 8001974:	db0b      	blt.n	800198e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	f003 021f 	and.w	r2, r3, #31
 800197c:	4907      	ldr	r1, [pc, #28]	; (800199c <__NVIC_EnableIRQ+0x38>)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	095b      	lsrs	r3, r3, #5
 8001984:	2001      	movs	r0, #1
 8001986:	fa00 f202 	lsl.w	r2, r0, r2
 800198a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	e000e100 	.word	0xe000e100

080019a0 <__NVIC_SetPriority>:
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	6039      	str	r1, [r7, #0]
 80019aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	db0a      	blt.n	80019ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	490c      	ldr	r1, [pc, #48]	; (80019ec <__NVIC_SetPriority+0x4c>)
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	0112      	lsls	r2, r2, #4
 80019c0:	b2d2      	uxtb	r2, r2
 80019c2:	440b      	add	r3, r1
 80019c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80019c8:	e00a      	b.n	80019e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	4908      	ldr	r1, [pc, #32]	; (80019f0 <__NVIC_SetPriority+0x50>)
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	3b04      	subs	r3, #4
 80019d8:	0112      	lsls	r2, r2, #4
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	440b      	add	r3, r1
 80019de:	761a      	strb	r2, [r3, #24]
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	e000e100 	.word	0xe000e100
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <NVIC_EncodePriority>:
{
 80019f4:	b480      	push	{r7}
 80019f6:	b089      	sub	sp, #36	; 0x24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	f1c3 0307 	rsb	r3, r3, #7
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	bf28      	it	cs
 8001a12:	2304      	movcs	r3, #4
 8001a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	3304      	adds	r3, #4
 8001a1a:	2b06      	cmp	r3, #6
 8001a1c:	d902      	bls.n	8001a24 <NVIC_EncodePriority+0x30>
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	3b03      	subs	r3, #3
 8001a22:	e000      	b.n	8001a26 <NVIC_EncodePriority+0x32>
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a28:	f04f 32ff 	mov.w	r2, #4294967295
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43da      	mvns	r2, r3
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	401a      	ands	r2, r3
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	fa01 f303 	lsl.w	r3, r1, r3
 8001a46:	43d9      	mvns	r1, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a4c:	4313      	orrs	r3, r2
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3724      	adds	r7, #36	; 0x24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
	...

08001a5c <SysTick_Config>:
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a6c:	d301      	bcc.n	8001a72 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e00f      	b.n	8001a92 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a72:	4a0a      	ldr	r2, [pc, #40]	; (8001a9c <SysTick_Config+0x40>)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a7a:	210f      	movs	r1, #15
 8001a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a80:	f7ff ff8e 	bl	80019a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a84:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <SysTick_Config+0x40>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a8a:	4b04      	ldr	r3, [pc, #16]	; (8001a9c <SysTick_Config+0x40>)
 8001a8c:	2207      	movs	r2, #7
 8001a8e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	e000e010 	.word	0xe000e010

08001aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff ff29 	bl	8001900 <__NVIC_SetPriorityGrouping>
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b086      	sub	sp, #24
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	4603      	mov	r3, r0
 8001abe:	60b9      	str	r1, [r7, #8]
 8001ac0:	607a      	str	r2, [r7, #4]
 8001ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac8:	f7ff ff3e 	bl	8001948 <__NVIC_GetPriorityGrouping>
 8001acc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	68b9      	ldr	r1, [r7, #8]
 8001ad2:	6978      	ldr	r0, [r7, #20]
 8001ad4:	f7ff ff8e 	bl	80019f4 <NVIC_EncodePriority>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ade:	4611      	mov	r1, r2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff ff5d 	bl	80019a0 <__NVIC_SetPriority>
}
 8001ae6:	bf00      	nop
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	4603      	mov	r3, r0
 8001af6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff31 	bl	8001964 <__NVIC_EnableIRQ>
}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff ffa2 	bl	8001a5c <SysTick_Config>
 8001b18:	4603      	mov	r3, r0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b089      	sub	sp, #36	; 0x24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b32:	2300      	movs	r3, #0
 8001b34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61fb      	str	r3, [r7, #28]
 8001b3e:	e159      	b.n	8001df4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b40:	2201      	movs	r2, #1
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	697a      	ldr	r2, [r7, #20]
 8001b50:	4013      	ands	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	f040 8148 	bne.w	8001dee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f003 0303 	and.w	r3, r3, #3
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d005      	beq.n	8001b76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d130      	bne.n	8001bd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	2203      	movs	r2, #3
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43db      	mvns	r3, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	68da      	ldr	r2, [r3, #12]
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bac:	2201      	movs	r2, #1
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	091b      	lsrs	r3, r3, #4
 8001bc2:	f003 0201 	and.w	r2, r3, #1
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f003 0303 	and.w	r3, r3, #3
 8001be0:	2b03      	cmp	r3, #3
 8001be2:	d017      	beq.n	8001c14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	2203      	movs	r2, #3
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	689a      	ldr	r2, [r3, #8]
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 0303 	and.w	r3, r3, #3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d123      	bne.n	8001c68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	08da      	lsrs	r2, r3, #3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3208      	adds	r2, #8
 8001c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	220f      	movs	r2, #15
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4013      	ands	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	691a      	ldr	r2, [r3, #16]
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	08da      	lsrs	r2, r3, #3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	3208      	adds	r2, #8
 8001c62:	69b9      	ldr	r1, [r7, #24]
 8001c64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	2203      	movs	r2, #3
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f003 0203 	and.w	r2, r3, #3
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f000 80a2 	beq.w	8001dee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	4b57      	ldr	r3, [pc, #348]	; (8001e0c <HAL_GPIO_Init+0x2e8>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb2:	4a56      	ldr	r2, [pc, #344]	; (8001e0c <HAL_GPIO_Init+0x2e8>)
 8001cb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cba:	4b54      	ldr	r3, [pc, #336]	; (8001e0c <HAL_GPIO_Init+0x2e8>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cc6:	4a52      	ldr	r2, [pc, #328]	; (8001e10 <HAL_GPIO_Init+0x2ec>)
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	089b      	lsrs	r3, r3, #2
 8001ccc:	3302      	adds	r3, #2
 8001cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	f003 0303 	and.w	r3, r3, #3
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	220f      	movs	r2, #15
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a49      	ldr	r2, [pc, #292]	; (8001e14 <HAL_GPIO_Init+0x2f0>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d019      	beq.n	8001d26 <HAL_GPIO_Init+0x202>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a48      	ldr	r2, [pc, #288]	; (8001e18 <HAL_GPIO_Init+0x2f4>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d013      	beq.n	8001d22 <HAL_GPIO_Init+0x1fe>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a47      	ldr	r2, [pc, #284]	; (8001e1c <HAL_GPIO_Init+0x2f8>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d00d      	beq.n	8001d1e <HAL_GPIO_Init+0x1fa>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a46      	ldr	r2, [pc, #280]	; (8001e20 <HAL_GPIO_Init+0x2fc>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d007      	beq.n	8001d1a <HAL_GPIO_Init+0x1f6>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a45      	ldr	r2, [pc, #276]	; (8001e24 <HAL_GPIO_Init+0x300>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d101      	bne.n	8001d16 <HAL_GPIO_Init+0x1f2>
 8001d12:	2304      	movs	r3, #4
 8001d14:	e008      	b.n	8001d28 <HAL_GPIO_Init+0x204>
 8001d16:	2307      	movs	r3, #7
 8001d18:	e006      	b.n	8001d28 <HAL_GPIO_Init+0x204>
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e004      	b.n	8001d28 <HAL_GPIO_Init+0x204>
 8001d1e:	2302      	movs	r3, #2
 8001d20:	e002      	b.n	8001d28 <HAL_GPIO_Init+0x204>
 8001d22:	2301      	movs	r3, #1
 8001d24:	e000      	b.n	8001d28 <HAL_GPIO_Init+0x204>
 8001d26:	2300      	movs	r3, #0
 8001d28:	69fa      	ldr	r2, [r7, #28]
 8001d2a:	f002 0203 	and.w	r2, r2, #3
 8001d2e:	0092      	lsls	r2, r2, #2
 8001d30:	4093      	lsls	r3, r2
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d38:	4935      	ldr	r1, [pc, #212]	; (8001e10 <HAL_GPIO_Init+0x2ec>)
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	089b      	lsrs	r3, r3, #2
 8001d3e:	3302      	adds	r3, #2
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d46:	4b38      	ldr	r3, [pc, #224]	; (8001e28 <HAL_GPIO_Init+0x304>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4013      	ands	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d6a:	4a2f      	ldr	r2, [pc, #188]	; (8001e28 <HAL_GPIO_Init+0x304>)
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d70:	4b2d      	ldr	r3, [pc, #180]	; (8001e28 <HAL_GPIO_Init+0x304>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d003      	beq.n	8001d94 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d94:	4a24      	ldr	r2, [pc, #144]	; (8001e28 <HAL_GPIO_Init+0x304>)
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d9a:	4b23      	ldr	r3, [pc, #140]	; (8001e28 <HAL_GPIO_Init+0x304>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	43db      	mvns	r3, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4013      	ands	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dbe:	4a1a      	ldr	r2, [pc, #104]	; (8001e28 <HAL_GPIO_Init+0x304>)
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dc4:	4b18      	ldr	r3, [pc, #96]	; (8001e28 <HAL_GPIO_Init+0x304>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d003      	beq.n	8001de8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001de8:	4a0f      	ldr	r2, [pc, #60]	; (8001e28 <HAL_GPIO_Init+0x304>)
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	3301      	adds	r3, #1
 8001df2:	61fb      	str	r3, [r7, #28]
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	2b0f      	cmp	r3, #15
 8001df8:	f67f aea2 	bls.w	8001b40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dfc:	bf00      	nop
 8001dfe:	bf00      	nop
 8001e00:	3724      	adds	r7, #36	; 0x24
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	40013800 	.word	0x40013800
 8001e14:	40020000 	.word	0x40020000
 8001e18:	40020400 	.word	0x40020400
 8001e1c:	40020800 	.word	0x40020800
 8001e20:	40020c00 	.word	0x40020c00
 8001e24:	40021000 	.word	0x40021000
 8001e28:	40013c00 	.word	0x40013c00

08001e2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	460b      	mov	r3, r1
 8001e36:	807b      	strh	r3, [r7, #2]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e3c:	787b      	ldrb	r3, [r7, #1]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e42:	887a      	ldrh	r2, [r7, #2]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e48:	e003      	b.n	8001e52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e4a:	887b      	ldrh	r3, [r7, #2]
 8001e4c:	041a      	lsls	r2, r3, #16
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	619a      	str	r2, [r3, #24]
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
	...

08001e60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e267      	b.n	8002342 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d075      	beq.n	8001f6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e7e:	4b88      	ldr	r3, [pc, #544]	; (80020a0 <HAL_RCC_OscConfig+0x240>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 030c 	and.w	r3, r3, #12
 8001e86:	2b04      	cmp	r3, #4
 8001e88:	d00c      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e8a:	4b85      	ldr	r3, [pc, #532]	; (80020a0 <HAL_RCC_OscConfig+0x240>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e92:	2b08      	cmp	r3, #8
 8001e94:	d112      	bne.n	8001ebc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e96:	4b82      	ldr	r3, [pc, #520]	; (80020a0 <HAL_RCC_OscConfig+0x240>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ea2:	d10b      	bne.n	8001ebc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea4:	4b7e      	ldr	r3, [pc, #504]	; (80020a0 <HAL_RCC_OscConfig+0x240>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d05b      	beq.n	8001f68 <HAL_RCC_OscConfig+0x108>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d157      	bne.n	8001f68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e242      	b.n	8002342 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ec4:	d106      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x74>
 8001ec6:	4b76      	ldr	r3, [pc, #472]	; (80020a0 <HAL_RCC_OscConfig+0x240>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a75      	ldr	r2, [pc, #468]	; (80020a0 <HAL_RCC_OscConfig+0x240>)
 8001ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ed0:	6013      	str	r3, [r2, #0]
 8001ed2:	e01d      	b.n	8001f10 <HAL_RCC_OscConfig+0xb0>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001edc:	d10c      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x98>
 8001ede:	4b70      	ldr	r3, [pc, #448]	; (80020a0 <HAL_RCC_OscConfig+0x240>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a6f      	ldr	r2, [pc, #444]	; (80020a0 <HAL_RCC_OscConfig+0x240>)
 8001ee4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ee8:	6013      	str	r3, [r2, #0]
 8001eea:	4b6d      	ldr	r3, [pc, #436]	; (80020a0 <HAL_RCC_OscConfig+0x240>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a6c      	ldr	r2, [pc, #432]	; (80020a0 <HAL_RCC_OscConfig+0x240>)
 8001ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef4:	6013      	str	r3, [r2, #0]
 8001ef6:	e00b      	b.n	8001f10 <HAL_RCC_OscConfig+0xb0>
 8001ef8:	4b69      	ldr	r3, [pc, #420]	; (80020a0 <HAL_RCC_OscConfig+0x240>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a68      	ldr	r2, [pc, #416]	; (80020a0 <HAL_RCC_OscConfig+0x240>)
 8001efe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f02:	6013      	str	r3, [r2, #0]
 8001f04:	4b66      	ldr	r3, [pc, #408]	; (80020a0 <HAL_RCC_OscConfig+0x240>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a65      	ldr	r2, [pc, #404]	; (80020a0 <HAL_RCC_OscConfig+0x240>)
 8001f0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d013      	beq.n	8001f40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f18:	f7ff fcc2 	bl	80018a0 <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f20:	f7ff fcbe 	bl	80018a0 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b64      	cmp	r3, #100	; 0x64
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e207      	b.n	8002342 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f32:	4b5b      	ldr	r3, [pc, #364]	; (80020a0 <HAL_RCC_OscConfig+0x240>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d0f0      	beq.n	8001f20 <HAL_RCC_OscConfig+0xc0>
 8001f3e:	e014      	b.n	8001f6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f40:	f7ff fcae 	bl	80018a0 <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f48:	f7ff fcaa 	bl	80018a0 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b64      	cmp	r3, #100	; 0x64
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e1f3      	b.n	8002342 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f5a:	4b51      	ldr	r3, [pc, #324]	; (80020a0 <HAL_RCC_OscConfig+0x240>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1f0      	bne.n	8001f48 <HAL_RCC_OscConfig+0xe8>
 8001f66:	e000      	b.n	8001f6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d063      	beq.n	800203e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f76:	4b4a      	ldr	r3, [pc, #296]	; (80020a0 <HAL_RCC_OscConfig+0x240>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f003 030c 	and.w	r3, r3, #12
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00b      	beq.n	8001f9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f82:	4b47      	ldr	r3, [pc, #284]	; (80020a0 <HAL_RCC_OscConfig+0x240>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f8a:	2b08      	cmp	r3, #8
 8001f8c:	d11c      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f8e:	4b44      	ldr	r3, [pc, #272]	; (80020a0 <HAL_RCC_OscConfig+0x240>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d116      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f9a:	4b41      	ldr	r3, [pc, #260]	; (80020a0 <HAL_RCC_OscConfig+0x240>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d005      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x152>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d001      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e1c7      	b.n	8002342 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb2:	4b3b      	ldr	r3, [pc, #236]	; (80020a0 <HAL_RCC_OscConfig+0x240>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	4937      	ldr	r1, [pc, #220]	; (80020a0 <HAL_RCC_OscConfig+0x240>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fc6:	e03a      	b.n	800203e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d020      	beq.n	8002012 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fd0:	4b34      	ldr	r3, [pc, #208]	; (80020a4 <HAL_RCC_OscConfig+0x244>)
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd6:	f7ff fc63 	bl	80018a0 <HAL_GetTick>
 8001fda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fdc:	e008      	b.n	8001ff0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fde:	f7ff fc5f 	bl	80018a0 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e1a8      	b.n	8002342 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff0:	4b2b      	ldr	r3, [pc, #172]	; (80020a0 <HAL_RCC_OscConfig+0x240>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d0f0      	beq.n	8001fde <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ffc:	4b28      	ldr	r3, [pc, #160]	; (80020a0 <HAL_RCC_OscConfig+0x240>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	4925      	ldr	r1, [pc, #148]	; (80020a0 <HAL_RCC_OscConfig+0x240>)
 800200c:	4313      	orrs	r3, r2
 800200e:	600b      	str	r3, [r1, #0]
 8002010:	e015      	b.n	800203e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002012:	4b24      	ldr	r3, [pc, #144]	; (80020a4 <HAL_RCC_OscConfig+0x244>)
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002018:	f7ff fc42 	bl	80018a0 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002020:	f7ff fc3e 	bl	80018a0 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e187      	b.n	8002342 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002032:	4b1b      	ldr	r3, [pc, #108]	; (80020a0 <HAL_RCC_OscConfig+0x240>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1f0      	bne.n	8002020 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0308 	and.w	r3, r3, #8
 8002046:	2b00      	cmp	r3, #0
 8002048:	d036      	beq.n	80020b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d016      	beq.n	8002080 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002052:	4b15      	ldr	r3, [pc, #84]	; (80020a8 <HAL_RCC_OscConfig+0x248>)
 8002054:	2201      	movs	r2, #1
 8002056:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002058:	f7ff fc22 	bl	80018a0 <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002060:	f7ff fc1e 	bl	80018a0 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e167      	b.n	8002342 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002072:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <HAL_RCC_OscConfig+0x240>)
 8002074:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d0f0      	beq.n	8002060 <HAL_RCC_OscConfig+0x200>
 800207e:	e01b      	b.n	80020b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002080:	4b09      	ldr	r3, [pc, #36]	; (80020a8 <HAL_RCC_OscConfig+0x248>)
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002086:	f7ff fc0b 	bl	80018a0 <HAL_GetTick>
 800208a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800208c:	e00e      	b.n	80020ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800208e:	f7ff fc07 	bl	80018a0 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d907      	bls.n	80020ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e150      	b.n	8002342 <HAL_RCC_OscConfig+0x4e2>
 80020a0:	40023800 	.word	0x40023800
 80020a4:	42470000 	.word	0x42470000
 80020a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ac:	4b88      	ldr	r3, [pc, #544]	; (80022d0 <HAL_RCC_OscConfig+0x470>)
 80020ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1ea      	bne.n	800208e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f000 8097 	beq.w	80021f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020c6:	2300      	movs	r3, #0
 80020c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ca:	4b81      	ldr	r3, [pc, #516]	; (80022d0 <HAL_RCC_OscConfig+0x470>)
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d10f      	bne.n	80020f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	60bb      	str	r3, [r7, #8]
 80020da:	4b7d      	ldr	r3, [pc, #500]	; (80022d0 <HAL_RCC_OscConfig+0x470>)
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	4a7c      	ldr	r2, [pc, #496]	; (80022d0 <HAL_RCC_OscConfig+0x470>)
 80020e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020e4:	6413      	str	r3, [r2, #64]	; 0x40
 80020e6:	4b7a      	ldr	r3, [pc, #488]	; (80022d0 <HAL_RCC_OscConfig+0x470>)
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ee:	60bb      	str	r3, [r7, #8]
 80020f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020f2:	2301      	movs	r3, #1
 80020f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f6:	4b77      	ldr	r3, [pc, #476]	; (80022d4 <HAL_RCC_OscConfig+0x474>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d118      	bne.n	8002134 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002102:	4b74      	ldr	r3, [pc, #464]	; (80022d4 <HAL_RCC_OscConfig+0x474>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a73      	ldr	r2, [pc, #460]	; (80022d4 <HAL_RCC_OscConfig+0x474>)
 8002108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800210c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800210e:	f7ff fbc7 	bl	80018a0 <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002114:	e008      	b.n	8002128 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002116:	f7ff fbc3 	bl	80018a0 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e10c      	b.n	8002342 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002128:	4b6a      	ldr	r3, [pc, #424]	; (80022d4 <HAL_RCC_OscConfig+0x474>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0f0      	beq.n	8002116 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d106      	bne.n	800214a <HAL_RCC_OscConfig+0x2ea>
 800213c:	4b64      	ldr	r3, [pc, #400]	; (80022d0 <HAL_RCC_OscConfig+0x470>)
 800213e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002140:	4a63      	ldr	r2, [pc, #396]	; (80022d0 <HAL_RCC_OscConfig+0x470>)
 8002142:	f043 0301 	orr.w	r3, r3, #1
 8002146:	6713      	str	r3, [r2, #112]	; 0x70
 8002148:	e01c      	b.n	8002184 <HAL_RCC_OscConfig+0x324>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	2b05      	cmp	r3, #5
 8002150:	d10c      	bne.n	800216c <HAL_RCC_OscConfig+0x30c>
 8002152:	4b5f      	ldr	r3, [pc, #380]	; (80022d0 <HAL_RCC_OscConfig+0x470>)
 8002154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002156:	4a5e      	ldr	r2, [pc, #376]	; (80022d0 <HAL_RCC_OscConfig+0x470>)
 8002158:	f043 0304 	orr.w	r3, r3, #4
 800215c:	6713      	str	r3, [r2, #112]	; 0x70
 800215e:	4b5c      	ldr	r3, [pc, #368]	; (80022d0 <HAL_RCC_OscConfig+0x470>)
 8002160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002162:	4a5b      	ldr	r2, [pc, #364]	; (80022d0 <HAL_RCC_OscConfig+0x470>)
 8002164:	f043 0301 	orr.w	r3, r3, #1
 8002168:	6713      	str	r3, [r2, #112]	; 0x70
 800216a:	e00b      	b.n	8002184 <HAL_RCC_OscConfig+0x324>
 800216c:	4b58      	ldr	r3, [pc, #352]	; (80022d0 <HAL_RCC_OscConfig+0x470>)
 800216e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002170:	4a57      	ldr	r2, [pc, #348]	; (80022d0 <HAL_RCC_OscConfig+0x470>)
 8002172:	f023 0301 	bic.w	r3, r3, #1
 8002176:	6713      	str	r3, [r2, #112]	; 0x70
 8002178:	4b55      	ldr	r3, [pc, #340]	; (80022d0 <HAL_RCC_OscConfig+0x470>)
 800217a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800217c:	4a54      	ldr	r2, [pc, #336]	; (80022d0 <HAL_RCC_OscConfig+0x470>)
 800217e:	f023 0304 	bic.w	r3, r3, #4
 8002182:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d015      	beq.n	80021b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800218c:	f7ff fb88 	bl	80018a0 <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002192:	e00a      	b.n	80021aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002194:	f7ff fb84 	bl	80018a0 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e0cb      	b.n	8002342 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021aa:	4b49      	ldr	r3, [pc, #292]	; (80022d0 <HAL_RCC_OscConfig+0x470>)
 80021ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d0ee      	beq.n	8002194 <HAL_RCC_OscConfig+0x334>
 80021b6:	e014      	b.n	80021e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b8:	f7ff fb72 	bl	80018a0 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021be:	e00a      	b.n	80021d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021c0:	f7ff fb6e 	bl	80018a0 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e0b5      	b.n	8002342 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021d6:	4b3e      	ldr	r3, [pc, #248]	; (80022d0 <HAL_RCC_OscConfig+0x470>)
 80021d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1ee      	bne.n	80021c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021e2:	7dfb      	ldrb	r3, [r7, #23]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d105      	bne.n	80021f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021e8:	4b39      	ldr	r3, [pc, #228]	; (80022d0 <HAL_RCC_OscConfig+0x470>)
 80021ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ec:	4a38      	ldr	r2, [pc, #224]	; (80022d0 <HAL_RCC_OscConfig+0x470>)
 80021ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f000 80a1 	beq.w	8002340 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021fe:	4b34      	ldr	r3, [pc, #208]	; (80022d0 <HAL_RCC_OscConfig+0x470>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f003 030c 	and.w	r3, r3, #12
 8002206:	2b08      	cmp	r3, #8
 8002208:	d05c      	beq.n	80022c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	2b02      	cmp	r3, #2
 8002210:	d141      	bne.n	8002296 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002212:	4b31      	ldr	r3, [pc, #196]	; (80022d8 <HAL_RCC_OscConfig+0x478>)
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002218:	f7ff fb42 	bl	80018a0 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002220:	f7ff fb3e 	bl	80018a0 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e087      	b.n	8002342 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002232:	4b27      	ldr	r3, [pc, #156]	; (80022d0 <HAL_RCC_OscConfig+0x470>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f0      	bne.n	8002220 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	69da      	ldr	r2, [r3, #28]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a1b      	ldr	r3, [r3, #32]
 8002246:	431a      	orrs	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224c:	019b      	lsls	r3, r3, #6
 800224e:	431a      	orrs	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	3b01      	subs	r3, #1
 8002258:	041b      	lsls	r3, r3, #16
 800225a:	431a      	orrs	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002260:	061b      	lsls	r3, r3, #24
 8002262:	491b      	ldr	r1, [pc, #108]	; (80022d0 <HAL_RCC_OscConfig+0x470>)
 8002264:	4313      	orrs	r3, r2
 8002266:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002268:	4b1b      	ldr	r3, [pc, #108]	; (80022d8 <HAL_RCC_OscConfig+0x478>)
 800226a:	2201      	movs	r2, #1
 800226c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226e:	f7ff fb17 	bl	80018a0 <HAL_GetTick>
 8002272:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002274:	e008      	b.n	8002288 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002276:	f7ff fb13 	bl	80018a0 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	2b02      	cmp	r3, #2
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e05c      	b.n	8002342 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002288:	4b11      	ldr	r3, [pc, #68]	; (80022d0 <HAL_RCC_OscConfig+0x470>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d0f0      	beq.n	8002276 <HAL_RCC_OscConfig+0x416>
 8002294:	e054      	b.n	8002340 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002296:	4b10      	ldr	r3, [pc, #64]	; (80022d8 <HAL_RCC_OscConfig+0x478>)
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229c:	f7ff fb00 	bl	80018a0 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022a4:	f7ff fafc 	bl	80018a0 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e045      	b.n	8002342 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022b6:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <HAL_RCC_OscConfig+0x470>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f0      	bne.n	80022a4 <HAL_RCC_OscConfig+0x444>
 80022c2:	e03d      	b.n	8002340 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d107      	bne.n	80022dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e038      	b.n	8002342 <HAL_RCC_OscConfig+0x4e2>
 80022d0:	40023800 	.word	0x40023800
 80022d4:	40007000 	.word	0x40007000
 80022d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022dc:	4b1b      	ldr	r3, [pc, #108]	; (800234c <HAL_RCC_OscConfig+0x4ec>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d028      	beq.n	800233c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d121      	bne.n	800233c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002302:	429a      	cmp	r2, r3
 8002304:	d11a      	bne.n	800233c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800230c:	4013      	ands	r3, r2
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002312:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002314:	4293      	cmp	r3, r2
 8002316:	d111      	bne.n	800233c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002322:	085b      	lsrs	r3, r3, #1
 8002324:	3b01      	subs	r3, #1
 8002326:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002328:	429a      	cmp	r2, r3
 800232a:	d107      	bne.n	800233c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002336:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002338:	429a      	cmp	r2, r3
 800233a:	d001      	beq.n	8002340 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e000      	b.n	8002342 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3718      	adds	r7, #24
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40023800 	.word	0x40023800

08002350 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d101      	bne.n	8002364 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e0cc      	b.n	80024fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002364:	4b68      	ldr	r3, [pc, #416]	; (8002508 <HAL_RCC_ClockConfig+0x1b8>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0307 	and.w	r3, r3, #7
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	429a      	cmp	r2, r3
 8002370:	d90c      	bls.n	800238c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002372:	4b65      	ldr	r3, [pc, #404]	; (8002508 <HAL_RCC_ClockConfig+0x1b8>)
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	b2d2      	uxtb	r2, r2
 8002378:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800237a:	4b63      	ldr	r3, [pc, #396]	; (8002508 <HAL_RCC_ClockConfig+0x1b8>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	429a      	cmp	r2, r3
 8002386:	d001      	beq.n	800238c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e0b8      	b.n	80024fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d020      	beq.n	80023da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d005      	beq.n	80023b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023a4:	4b59      	ldr	r3, [pc, #356]	; (800250c <HAL_RCC_ClockConfig+0x1bc>)
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	4a58      	ldr	r2, [pc, #352]	; (800250c <HAL_RCC_ClockConfig+0x1bc>)
 80023aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0308 	and.w	r3, r3, #8
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d005      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023bc:	4b53      	ldr	r3, [pc, #332]	; (800250c <HAL_RCC_ClockConfig+0x1bc>)
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	4a52      	ldr	r2, [pc, #328]	; (800250c <HAL_RCC_ClockConfig+0x1bc>)
 80023c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023c8:	4b50      	ldr	r3, [pc, #320]	; (800250c <HAL_RCC_ClockConfig+0x1bc>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	494d      	ldr	r1, [pc, #308]	; (800250c <HAL_RCC_ClockConfig+0x1bc>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d044      	beq.n	8002470 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d107      	bne.n	80023fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ee:	4b47      	ldr	r3, [pc, #284]	; (800250c <HAL_RCC_ClockConfig+0x1bc>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d119      	bne.n	800242e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e07f      	b.n	80024fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2b02      	cmp	r3, #2
 8002404:	d003      	beq.n	800240e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800240a:	2b03      	cmp	r3, #3
 800240c:	d107      	bne.n	800241e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800240e:	4b3f      	ldr	r3, [pc, #252]	; (800250c <HAL_RCC_ClockConfig+0x1bc>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d109      	bne.n	800242e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e06f      	b.n	80024fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800241e:	4b3b      	ldr	r3, [pc, #236]	; (800250c <HAL_RCC_ClockConfig+0x1bc>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e067      	b.n	80024fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800242e:	4b37      	ldr	r3, [pc, #220]	; (800250c <HAL_RCC_ClockConfig+0x1bc>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f023 0203 	bic.w	r2, r3, #3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	4934      	ldr	r1, [pc, #208]	; (800250c <HAL_RCC_ClockConfig+0x1bc>)
 800243c:	4313      	orrs	r3, r2
 800243e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002440:	f7ff fa2e 	bl	80018a0 <HAL_GetTick>
 8002444:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002446:	e00a      	b.n	800245e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002448:	f7ff fa2a 	bl	80018a0 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	f241 3288 	movw	r2, #5000	; 0x1388
 8002456:	4293      	cmp	r3, r2
 8002458:	d901      	bls.n	800245e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e04f      	b.n	80024fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800245e:	4b2b      	ldr	r3, [pc, #172]	; (800250c <HAL_RCC_ClockConfig+0x1bc>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 020c 	and.w	r2, r3, #12
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	429a      	cmp	r2, r3
 800246e:	d1eb      	bne.n	8002448 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002470:	4b25      	ldr	r3, [pc, #148]	; (8002508 <HAL_RCC_ClockConfig+0x1b8>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	429a      	cmp	r2, r3
 800247c:	d20c      	bcs.n	8002498 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800247e:	4b22      	ldr	r3, [pc, #136]	; (8002508 <HAL_RCC_ClockConfig+0x1b8>)
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	b2d2      	uxtb	r2, r2
 8002484:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002486:	4b20      	ldr	r3, [pc, #128]	; (8002508 <HAL_RCC_ClockConfig+0x1b8>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0307 	and.w	r3, r3, #7
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	429a      	cmp	r2, r3
 8002492:	d001      	beq.n	8002498 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e032      	b.n	80024fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0304 	and.w	r3, r3, #4
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d008      	beq.n	80024b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024a4:	4b19      	ldr	r3, [pc, #100]	; (800250c <HAL_RCC_ClockConfig+0x1bc>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	4916      	ldr	r1, [pc, #88]	; (800250c <HAL_RCC_ClockConfig+0x1bc>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0308 	and.w	r3, r3, #8
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d009      	beq.n	80024d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024c2:	4b12      	ldr	r3, [pc, #72]	; (800250c <HAL_RCC_ClockConfig+0x1bc>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	490e      	ldr	r1, [pc, #56]	; (800250c <HAL_RCC_ClockConfig+0x1bc>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024d6:	f000 f821 	bl	800251c <HAL_RCC_GetSysClockFreq>
 80024da:	4602      	mov	r2, r0
 80024dc:	4b0b      	ldr	r3, [pc, #44]	; (800250c <HAL_RCC_ClockConfig+0x1bc>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	091b      	lsrs	r3, r3, #4
 80024e2:	f003 030f 	and.w	r3, r3, #15
 80024e6:	490a      	ldr	r1, [pc, #40]	; (8002510 <HAL_RCC_ClockConfig+0x1c0>)
 80024e8:	5ccb      	ldrb	r3, [r1, r3]
 80024ea:	fa22 f303 	lsr.w	r3, r2, r3
 80024ee:	4a09      	ldr	r2, [pc, #36]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80024f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024f2:	4b09      	ldr	r3, [pc, #36]	; (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff f98e 	bl	8001818 <HAL_InitTick>

  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	40023c00 	.word	0x40023c00
 800250c:	40023800 	.word	0x40023800
 8002510:	0800540c 	.word	0x0800540c
 8002514:	20000004 	.word	0x20000004
 8002518:	20000008 	.word	0x20000008

0800251c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800251c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002520:	b090      	sub	sp, #64	; 0x40
 8002522:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002524:	2300      	movs	r3, #0
 8002526:	637b      	str	r3, [r7, #52]	; 0x34
 8002528:	2300      	movs	r3, #0
 800252a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800252c:	2300      	movs	r3, #0
 800252e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002530:	2300      	movs	r3, #0
 8002532:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002534:	4b59      	ldr	r3, [pc, #356]	; (800269c <HAL_RCC_GetSysClockFreq+0x180>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f003 030c 	and.w	r3, r3, #12
 800253c:	2b08      	cmp	r3, #8
 800253e:	d00d      	beq.n	800255c <HAL_RCC_GetSysClockFreq+0x40>
 8002540:	2b08      	cmp	r3, #8
 8002542:	f200 80a1 	bhi.w	8002688 <HAL_RCC_GetSysClockFreq+0x16c>
 8002546:	2b00      	cmp	r3, #0
 8002548:	d002      	beq.n	8002550 <HAL_RCC_GetSysClockFreq+0x34>
 800254a:	2b04      	cmp	r3, #4
 800254c:	d003      	beq.n	8002556 <HAL_RCC_GetSysClockFreq+0x3a>
 800254e:	e09b      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002550:	4b53      	ldr	r3, [pc, #332]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002552:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002554:	e09b      	b.n	800268e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002556:	4b53      	ldr	r3, [pc, #332]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002558:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800255a:	e098      	b.n	800268e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800255c:	4b4f      	ldr	r3, [pc, #316]	; (800269c <HAL_RCC_GetSysClockFreq+0x180>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002564:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002566:	4b4d      	ldr	r3, [pc, #308]	; (800269c <HAL_RCC_GetSysClockFreq+0x180>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d028      	beq.n	80025c4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002572:	4b4a      	ldr	r3, [pc, #296]	; (800269c <HAL_RCC_GetSysClockFreq+0x180>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	099b      	lsrs	r3, r3, #6
 8002578:	2200      	movs	r2, #0
 800257a:	623b      	str	r3, [r7, #32]
 800257c:	627a      	str	r2, [r7, #36]	; 0x24
 800257e:	6a3b      	ldr	r3, [r7, #32]
 8002580:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002584:	2100      	movs	r1, #0
 8002586:	4b47      	ldr	r3, [pc, #284]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002588:	fb03 f201 	mul.w	r2, r3, r1
 800258c:	2300      	movs	r3, #0
 800258e:	fb00 f303 	mul.w	r3, r0, r3
 8002592:	4413      	add	r3, r2
 8002594:	4a43      	ldr	r2, [pc, #268]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002596:	fba0 1202 	umull	r1, r2, r0, r2
 800259a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800259c:	460a      	mov	r2, r1
 800259e:	62ba      	str	r2, [r7, #40]	; 0x28
 80025a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025a2:	4413      	add	r3, r2
 80025a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025a8:	2200      	movs	r2, #0
 80025aa:	61bb      	str	r3, [r7, #24]
 80025ac:	61fa      	str	r2, [r7, #28]
 80025ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80025b6:	f7fd fe0f 	bl	80001d8 <__aeabi_uldivmod>
 80025ba:	4602      	mov	r2, r0
 80025bc:	460b      	mov	r3, r1
 80025be:	4613      	mov	r3, r2
 80025c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025c2:	e053      	b.n	800266c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025c4:	4b35      	ldr	r3, [pc, #212]	; (800269c <HAL_RCC_GetSysClockFreq+0x180>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	099b      	lsrs	r3, r3, #6
 80025ca:	2200      	movs	r2, #0
 80025cc:	613b      	str	r3, [r7, #16]
 80025ce:	617a      	str	r2, [r7, #20]
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80025d6:	f04f 0b00 	mov.w	fp, #0
 80025da:	4652      	mov	r2, sl
 80025dc:	465b      	mov	r3, fp
 80025de:	f04f 0000 	mov.w	r0, #0
 80025e2:	f04f 0100 	mov.w	r1, #0
 80025e6:	0159      	lsls	r1, r3, #5
 80025e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025ec:	0150      	lsls	r0, r2, #5
 80025ee:	4602      	mov	r2, r0
 80025f0:	460b      	mov	r3, r1
 80025f2:	ebb2 080a 	subs.w	r8, r2, sl
 80025f6:	eb63 090b 	sbc.w	r9, r3, fp
 80025fa:	f04f 0200 	mov.w	r2, #0
 80025fe:	f04f 0300 	mov.w	r3, #0
 8002602:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002606:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800260a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800260e:	ebb2 0408 	subs.w	r4, r2, r8
 8002612:	eb63 0509 	sbc.w	r5, r3, r9
 8002616:	f04f 0200 	mov.w	r2, #0
 800261a:	f04f 0300 	mov.w	r3, #0
 800261e:	00eb      	lsls	r3, r5, #3
 8002620:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002624:	00e2      	lsls	r2, r4, #3
 8002626:	4614      	mov	r4, r2
 8002628:	461d      	mov	r5, r3
 800262a:	eb14 030a 	adds.w	r3, r4, sl
 800262e:	603b      	str	r3, [r7, #0]
 8002630:	eb45 030b 	adc.w	r3, r5, fp
 8002634:	607b      	str	r3, [r7, #4]
 8002636:	f04f 0200 	mov.w	r2, #0
 800263a:	f04f 0300 	mov.w	r3, #0
 800263e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002642:	4629      	mov	r1, r5
 8002644:	028b      	lsls	r3, r1, #10
 8002646:	4621      	mov	r1, r4
 8002648:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800264c:	4621      	mov	r1, r4
 800264e:	028a      	lsls	r2, r1, #10
 8002650:	4610      	mov	r0, r2
 8002652:	4619      	mov	r1, r3
 8002654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002656:	2200      	movs	r2, #0
 8002658:	60bb      	str	r3, [r7, #8]
 800265a:	60fa      	str	r2, [r7, #12]
 800265c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002660:	f7fd fdba 	bl	80001d8 <__aeabi_uldivmod>
 8002664:	4602      	mov	r2, r0
 8002666:	460b      	mov	r3, r1
 8002668:	4613      	mov	r3, r2
 800266a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800266c:	4b0b      	ldr	r3, [pc, #44]	; (800269c <HAL_RCC_GetSysClockFreq+0x180>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	0c1b      	lsrs	r3, r3, #16
 8002672:	f003 0303 	and.w	r3, r3, #3
 8002676:	3301      	adds	r3, #1
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800267c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800267e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002680:	fbb2 f3f3 	udiv	r3, r2, r3
 8002684:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002686:	e002      	b.n	800268e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002688:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x184>)
 800268a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800268c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800268e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002690:	4618      	mov	r0, r3
 8002692:	3740      	adds	r7, #64	; 0x40
 8002694:	46bd      	mov	sp, r7
 8002696:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800269a:	bf00      	nop
 800269c:	40023800 	.word	0x40023800
 80026a0:	00f42400 	.word	0x00f42400
 80026a4:	017d7840 	.word	0x017d7840

080026a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e07b      	b.n	80027b2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d108      	bne.n	80026d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026ca:	d009      	beq.n	80026e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	61da      	str	r2, [r3, #28]
 80026d2:	e005      	b.n	80026e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d106      	bne.n	8002700 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7fe ff6a 	bl	80015d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2202      	movs	r2, #2
 8002704:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002716:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002728:	431a      	orrs	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002732:	431a      	orrs	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	431a      	orrs	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	431a      	orrs	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002750:	431a      	orrs	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800275a:	431a      	orrs	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002764:	ea42 0103 	orr.w	r1, r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	430a      	orrs	r2, r1
 8002776:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	0c1b      	lsrs	r3, r3, #16
 800277e:	f003 0104 	and.w	r1, r3, #4
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002786:	f003 0210 	and.w	r2, r3, #16
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	430a      	orrs	r2, r1
 8002790:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	69da      	ldr	r2, [r3, #28]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b08c      	sub	sp, #48	; 0x30
 80027be:	af00      	add	r7, sp, #0
 80027c0:	60f8      	str	r0, [r7, #12]
 80027c2:	60b9      	str	r1, [r7, #8]
 80027c4:	607a      	str	r2, [r7, #4]
 80027c6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80027c8:	2301      	movs	r3, #1
 80027ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80027cc:	2300      	movs	r3, #0
 80027ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d101      	bne.n	80027e0 <HAL_SPI_TransmitReceive+0x26>
 80027dc:	2302      	movs	r3, #2
 80027de:	e18a      	b.n	8002af6 <HAL_SPI_TransmitReceive+0x33c>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027e8:	f7ff f85a 	bl	80018a0 <HAL_GetTick>
 80027ec:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80027fe:	887b      	ldrh	r3, [r7, #2]
 8002800:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002802:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002806:	2b01      	cmp	r3, #1
 8002808:	d00f      	beq.n	800282a <HAL_SPI_TransmitReceive+0x70>
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002810:	d107      	bne.n	8002822 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d103      	bne.n	8002822 <HAL_SPI_TransmitReceive+0x68>
 800281a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800281e:	2b04      	cmp	r3, #4
 8002820:	d003      	beq.n	800282a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002822:	2302      	movs	r3, #2
 8002824:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002828:	e15b      	b.n	8002ae2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d005      	beq.n	800283c <HAL_SPI_TransmitReceive+0x82>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d002      	beq.n	800283c <HAL_SPI_TransmitReceive+0x82>
 8002836:	887b      	ldrh	r3, [r7, #2]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d103      	bne.n	8002844 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002842:	e14e      	b.n	8002ae2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b04      	cmp	r3, #4
 800284e:	d003      	beq.n	8002858 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2205      	movs	r2, #5
 8002854:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	887a      	ldrh	r2, [r7, #2]
 8002868:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	887a      	ldrh	r2, [r7, #2]
 800286e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	68ba      	ldr	r2, [r7, #8]
 8002874:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	887a      	ldrh	r2, [r7, #2]
 800287a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	887a      	ldrh	r2, [r7, #2]
 8002880:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002898:	2b40      	cmp	r3, #64	; 0x40
 800289a:	d007      	beq.n	80028ac <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028b4:	d178      	bne.n	80029a8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d002      	beq.n	80028c4 <HAL_SPI_TransmitReceive+0x10a>
 80028be:	8b7b      	ldrh	r3, [r7, #26]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d166      	bne.n	8002992 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c8:	881a      	ldrh	r2, [r3, #0]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d4:	1c9a      	adds	r2, r3, #2
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028de:	b29b      	uxth	r3, r3
 80028e0:	3b01      	subs	r3, #1
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028e8:	e053      	b.n	8002992 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d11b      	bne.n	8002930 <HAL_SPI_TransmitReceive+0x176>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d016      	beq.n	8002930 <HAL_SPI_TransmitReceive+0x176>
 8002902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002904:	2b01      	cmp	r3, #1
 8002906:	d113      	bne.n	8002930 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290c:	881a      	ldrh	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002918:	1c9a      	adds	r2, r3, #2
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002922:	b29b      	uxth	r3, r3
 8002924:	3b01      	subs	r3, #1
 8002926:	b29a      	uxth	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800292c:	2300      	movs	r3, #0
 800292e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b01      	cmp	r3, #1
 800293c:	d119      	bne.n	8002972 <HAL_SPI_TransmitReceive+0x1b8>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002942:	b29b      	uxth	r3, r3
 8002944:	2b00      	cmp	r3, #0
 8002946:	d014      	beq.n	8002972 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68da      	ldr	r2, [r3, #12]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002952:	b292      	uxth	r2, r2
 8002954:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295a:	1c9a      	adds	r2, r3, #2
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002964:	b29b      	uxth	r3, r3
 8002966:	3b01      	subs	r3, #1
 8002968:	b29a      	uxth	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800296e:	2301      	movs	r3, #1
 8002970:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002972:	f7fe ff95 	bl	80018a0 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800297e:	429a      	cmp	r2, r3
 8002980:	d807      	bhi.n	8002992 <HAL_SPI_TransmitReceive+0x1d8>
 8002982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002988:	d003      	beq.n	8002992 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002990:	e0a7      	b.n	8002ae2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002996:	b29b      	uxth	r3, r3
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1a6      	bne.n	80028ea <HAL_SPI_TransmitReceive+0x130>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1a1      	bne.n	80028ea <HAL_SPI_TransmitReceive+0x130>
 80029a6:	e07c      	b.n	8002aa2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d002      	beq.n	80029b6 <HAL_SPI_TransmitReceive+0x1fc>
 80029b0:	8b7b      	ldrh	r3, [r7, #26]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d16b      	bne.n	8002a8e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	330c      	adds	r3, #12
 80029c0:	7812      	ldrb	r2, [r2, #0]
 80029c2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c8:	1c5a      	adds	r2, r3, #1
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	3b01      	subs	r3, #1
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029dc:	e057      	b.n	8002a8e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d11c      	bne.n	8002a26 <HAL_SPI_TransmitReceive+0x26c>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d017      	beq.n	8002a26 <HAL_SPI_TransmitReceive+0x26c>
 80029f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d114      	bne.n	8002a26 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	330c      	adds	r3, #12
 8002a06:	7812      	ldrb	r2, [r2, #0]
 8002a08:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0e:	1c5a      	adds	r2, r3, #1
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a22:	2300      	movs	r3, #0
 8002a24:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d119      	bne.n	8002a68 <HAL_SPI_TransmitReceive+0x2ae>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d014      	beq.n	8002a68 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68da      	ldr	r2, [r3, #12]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a48:	b2d2      	uxtb	r2, r2
 8002a4a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a50:	1c5a      	adds	r2, r3, #1
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a64:	2301      	movs	r3, #1
 8002a66:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002a68:	f7fe ff1a 	bl	80018a0 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d803      	bhi.n	8002a80 <HAL_SPI_TransmitReceive+0x2c6>
 8002a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a7e:	d102      	bne.n	8002a86 <HAL_SPI_TransmitReceive+0x2cc>
 8002a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d103      	bne.n	8002a8e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002a8c:	e029      	b.n	8002ae2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1a2      	bne.n	80029de <HAL_SPI_TransmitReceive+0x224>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d19d      	bne.n	80029de <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002aa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aa4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f000 f8b2 	bl	8002c10 <SPI_EndRxTxTransaction>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d006      	beq.n	8002ac0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2220      	movs	r2, #32
 8002abc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002abe:	e010      	b.n	8002ae2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10b      	bne.n	8002ae0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ac8:	2300      	movs	r3, #0
 8002aca:	617b      	str	r3, [r7, #20]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	617b      	str	r3, [r7, #20]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	617b      	str	r3, [r7, #20]
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	e000      	b.n	8002ae2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002ae0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002af2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3730      	adds	r7, #48	; 0x30
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
	...

08002b00 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b088      	sub	sp, #32
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	603b      	str	r3, [r7, #0]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002b10:	f7fe fec6 	bl	80018a0 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b18:	1a9b      	subs	r3, r3, r2
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b20:	f7fe febe 	bl	80018a0 <HAL_GetTick>
 8002b24:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b26:	4b39      	ldr	r3, [pc, #228]	; (8002c0c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	015b      	lsls	r3, r3, #5
 8002b2c:	0d1b      	lsrs	r3, r3, #20
 8002b2e:	69fa      	ldr	r2, [r7, #28]
 8002b30:	fb02 f303 	mul.w	r3, r2, r3
 8002b34:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b36:	e054      	b.n	8002be2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b3e:	d050      	beq.n	8002be2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b40:	f7fe feae 	bl	80018a0 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	69fa      	ldr	r2, [r7, #28]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d902      	bls.n	8002b56 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d13d      	bne.n	8002bd2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b64:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b6e:	d111      	bne.n	8002b94 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b78:	d004      	beq.n	8002b84 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b82:	d107      	bne.n	8002b94 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b92:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b9c:	d10f      	bne.n	8002bbe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bbc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e017      	b.n	8002c02 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d101      	bne.n	8002bdc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	3b01      	subs	r3, #1
 8002be0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	4013      	ands	r3, r2
 8002bec:	68ba      	ldr	r2, [r7, #8]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	bf0c      	ite	eq
 8002bf2:	2301      	moveq	r3, #1
 8002bf4:	2300      	movne	r3, #0
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	79fb      	ldrb	r3, [r7, #7]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d19b      	bne.n	8002b38 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3720      	adds	r7, #32
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	20000004 	.word	0x20000004

08002c10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b088      	sub	sp, #32
 8002c14:	af02      	add	r7, sp, #8
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002c1c:	4b1b      	ldr	r3, [pc, #108]	; (8002c8c <SPI_EndRxTxTransaction+0x7c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a1b      	ldr	r2, [pc, #108]	; (8002c90 <SPI_EndRxTxTransaction+0x80>)
 8002c22:	fba2 2303 	umull	r2, r3, r2, r3
 8002c26:	0d5b      	lsrs	r3, r3, #21
 8002c28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c2c:	fb02 f303 	mul.w	r3, r2, r3
 8002c30:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c3a:	d112      	bne.n	8002c62 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	9300      	str	r3, [sp, #0]
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	2200      	movs	r2, #0
 8002c44:	2180      	movs	r1, #128	; 0x80
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f7ff ff5a 	bl	8002b00 <SPI_WaitFlagStateUntilTimeout>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d016      	beq.n	8002c80 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c56:	f043 0220 	orr.w	r2, r3, #32
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e00f      	b.n	8002c82 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00a      	beq.n	8002c7e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c78:	2b80      	cmp	r3, #128	; 0x80
 8002c7a:	d0f2      	beq.n	8002c62 <SPI_EndRxTxTransaction+0x52>
 8002c7c:	e000      	b.n	8002c80 <SPI_EndRxTxTransaction+0x70>
        break;
 8002c7e:	bf00      	nop
  }

  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3718      	adds	r7, #24
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	20000004 	.word	0x20000004
 8002c90:	165e9f81 	.word	0x165e9f81

08002c94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e041      	b.n	8002d2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d106      	bne.n	8002cc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7fe fcd2 	bl	8001664 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	3304      	adds	r3, #4
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4610      	mov	r0, r2
 8002cd4:	f000 fb3e 	bl	8003354 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b082      	sub	sp, #8
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e041      	b.n	8002dc8 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d106      	bne.n	8002d5e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 f839 	bl	8002dd0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2202      	movs	r2, #2
 8002d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	4619      	mov	r1, r3
 8002d70:	4610      	mov	r0, r2
 8002d72:	f000 faef 	bl	8003354 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3708      	adds	r7, #8
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d101      	bne.n	8002df8 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e041      	b.n	8002e7c <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d106      	bne.n	8002e12 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 f839 	bl	8002e84 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2202      	movs	r2, #2
 8002e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	3304      	adds	r3, #4
 8002e22:	4619      	mov	r1, r3
 8002e24:	4610      	mov	r0, r2
 8002e26:	f000 fa95 	bl	8003354 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 0208 	bic.w	r2, r2, #8
 8002e38:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6819      	ldr	r1, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2201      	movs	r2, #1
 8002e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d122      	bne.n	8002ef4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d11b      	bne.n	8002ef4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f06f 0202 	mvn.w	r2, #2
 8002ec4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	f003 0303 	and.w	r3, r3, #3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 fa1b 	bl	8003316 <HAL_TIM_IC_CaptureCallback>
 8002ee0:	e005      	b.n	8002eee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 fa0d 	bl	8003302 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 fa1e 	bl	800332a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	f003 0304 	and.w	r3, r3, #4
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	d122      	bne.n	8002f48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	f003 0304 	and.w	r3, r3, #4
 8002f0c:	2b04      	cmp	r3, #4
 8002f0e:	d11b      	bne.n	8002f48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f06f 0204 	mvn.w	r2, #4
 8002f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2202      	movs	r2, #2
 8002f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 f9f1 	bl	8003316 <HAL_TIM_IC_CaptureCallback>
 8002f34:	e005      	b.n	8002f42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 f9e3 	bl	8003302 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 f9f4 	bl	800332a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	f003 0308 	and.w	r3, r3, #8
 8002f52:	2b08      	cmp	r3, #8
 8002f54:	d122      	bne.n	8002f9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f003 0308 	and.w	r3, r3, #8
 8002f60:	2b08      	cmp	r3, #8
 8002f62:	d11b      	bne.n	8002f9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f06f 0208 	mvn.w	r2, #8
 8002f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2204      	movs	r2, #4
 8002f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	f003 0303 	and.w	r3, r3, #3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d003      	beq.n	8002f8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 f9c7 	bl	8003316 <HAL_TIM_IC_CaptureCallback>
 8002f88:	e005      	b.n	8002f96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 f9b9 	bl	8003302 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 f9ca 	bl	800332a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	f003 0310 	and.w	r3, r3, #16
 8002fa6:	2b10      	cmp	r3, #16
 8002fa8:	d122      	bne.n	8002ff0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	f003 0310 	and.w	r3, r3, #16
 8002fb4:	2b10      	cmp	r3, #16
 8002fb6:	d11b      	bne.n	8002ff0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f06f 0210 	mvn.w	r2, #16
 8002fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2208      	movs	r2, #8
 8002fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f99d 	bl	8003316 <HAL_TIM_IC_CaptureCallback>
 8002fdc:	e005      	b.n	8002fea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f98f 	bl	8003302 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 f9a0 	bl	800332a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d10e      	bne.n	800301c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	2b01      	cmp	r3, #1
 800300a:	d107      	bne.n	800301c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f06f 0201 	mvn.w	r2, #1
 8003014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 f969 	bl	80032ee <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003026:	2b80      	cmp	r3, #128	; 0x80
 8003028:	d10e      	bne.n	8003048 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003034:	2b80      	cmp	r3, #128	; 0x80
 8003036:	d107      	bne.n	8003048 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 fca4 	bl	8003990 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003052:	2b40      	cmp	r3, #64	; 0x40
 8003054:	d10e      	bne.n	8003074 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003060:	2b40      	cmp	r3, #64	; 0x40
 8003062:	d107      	bne.n	8003074 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800306c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 f965 	bl	800333e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	f003 0320 	and.w	r3, r3, #32
 800307e:	2b20      	cmp	r3, #32
 8003080:	d10e      	bne.n	80030a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	f003 0320 	and.w	r3, r3, #32
 800308c:	2b20      	cmp	r3, #32
 800308e:	d107      	bne.n	80030a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f06f 0220 	mvn.w	r2, #32
 8003098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 fc6e 	bl	800397c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030a0:	bf00      	nop
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030b4:	2300      	movs	r3, #0
 80030b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d101      	bne.n	80030c6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80030c2:	2302      	movs	r3, #2
 80030c4:	e048      	b.n	8003158 <HAL_TIM_OC_ConfigChannel+0xb0>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2b0c      	cmp	r3, #12
 80030d2:	d839      	bhi.n	8003148 <HAL_TIM_OC_ConfigChannel+0xa0>
 80030d4:	a201      	add	r2, pc, #4	; (adr r2, 80030dc <HAL_TIM_OC_ConfigChannel+0x34>)
 80030d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030da:	bf00      	nop
 80030dc:	08003111 	.word	0x08003111
 80030e0:	08003149 	.word	0x08003149
 80030e4:	08003149 	.word	0x08003149
 80030e8:	08003149 	.word	0x08003149
 80030ec:	0800311f 	.word	0x0800311f
 80030f0:	08003149 	.word	0x08003149
 80030f4:	08003149 	.word	0x08003149
 80030f8:	08003149 	.word	0x08003149
 80030fc:	0800312d 	.word	0x0800312d
 8003100:	08003149 	.word	0x08003149
 8003104:	08003149 	.word	0x08003149
 8003108:	08003149 	.word	0x08003149
 800310c:	0800313b 	.word	0x0800313b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68b9      	ldr	r1, [r7, #8]
 8003116:	4618      	mov	r0, r3
 8003118:	f000 f99c 	bl	8003454 <TIM_OC1_SetConfig>
      break;
 800311c:	e017      	b.n	800314e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68b9      	ldr	r1, [r7, #8]
 8003124:	4618      	mov	r0, r3
 8003126:	f000 f9fb 	bl	8003520 <TIM_OC2_SetConfig>
      break;
 800312a:	e010      	b.n	800314e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68b9      	ldr	r1, [r7, #8]
 8003132:	4618      	mov	r0, r3
 8003134:	f000 fa60 	bl	80035f8 <TIM_OC3_SetConfig>
      break;
 8003138:	e009      	b.n	800314e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68b9      	ldr	r1, [r7, #8]
 8003140:	4618      	mov	r0, r3
 8003142:	f000 fac3 	bl	80036cc <TIM_OC4_SetConfig>
      break;
 8003146:	e002      	b.n	800314e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	75fb      	strb	r3, [r7, #23]
      break;
 800314c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003156:	7dfb      	ldrb	r3, [r7, #23]
}
 8003158:	4618      	mov	r0, r3
 800315a:	3718      	adds	r7, #24
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800316a:	2300      	movs	r3, #0
 800316c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003174:	2b01      	cmp	r3, #1
 8003176:	d101      	bne.n	800317c <HAL_TIM_ConfigClockSource+0x1c>
 8003178:	2302      	movs	r3, #2
 800317a:	e0b4      	b.n	80032e6 <HAL_TIM_ConfigClockSource+0x186>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2202      	movs	r2, #2
 8003188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800319a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68ba      	ldr	r2, [r7, #8]
 80031aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031b4:	d03e      	beq.n	8003234 <HAL_TIM_ConfigClockSource+0xd4>
 80031b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031ba:	f200 8087 	bhi.w	80032cc <HAL_TIM_ConfigClockSource+0x16c>
 80031be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031c2:	f000 8086 	beq.w	80032d2 <HAL_TIM_ConfigClockSource+0x172>
 80031c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031ca:	d87f      	bhi.n	80032cc <HAL_TIM_ConfigClockSource+0x16c>
 80031cc:	2b70      	cmp	r3, #112	; 0x70
 80031ce:	d01a      	beq.n	8003206 <HAL_TIM_ConfigClockSource+0xa6>
 80031d0:	2b70      	cmp	r3, #112	; 0x70
 80031d2:	d87b      	bhi.n	80032cc <HAL_TIM_ConfigClockSource+0x16c>
 80031d4:	2b60      	cmp	r3, #96	; 0x60
 80031d6:	d050      	beq.n	800327a <HAL_TIM_ConfigClockSource+0x11a>
 80031d8:	2b60      	cmp	r3, #96	; 0x60
 80031da:	d877      	bhi.n	80032cc <HAL_TIM_ConfigClockSource+0x16c>
 80031dc:	2b50      	cmp	r3, #80	; 0x50
 80031de:	d03c      	beq.n	800325a <HAL_TIM_ConfigClockSource+0xfa>
 80031e0:	2b50      	cmp	r3, #80	; 0x50
 80031e2:	d873      	bhi.n	80032cc <HAL_TIM_ConfigClockSource+0x16c>
 80031e4:	2b40      	cmp	r3, #64	; 0x40
 80031e6:	d058      	beq.n	800329a <HAL_TIM_ConfigClockSource+0x13a>
 80031e8:	2b40      	cmp	r3, #64	; 0x40
 80031ea:	d86f      	bhi.n	80032cc <HAL_TIM_ConfigClockSource+0x16c>
 80031ec:	2b30      	cmp	r3, #48	; 0x30
 80031ee:	d064      	beq.n	80032ba <HAL_TIM_ConfigClockSource+0x15a>
 80031f0:	2b30      	cmp	r3, #48	; 0x30
 80031f2:	d86b      	bhi.n	80032cc <HAL_TIM_ConfigClockSource+0x16c>
 80031f4:	2b20      	cmp	r3, #32
 80031f6:	d060      	beq.n	80032ba <HAL_TIM_ConfigClockSource+0x15a>
 80031f8:	2b20      	cmp	r3, #32
 80031fa:	d867      	bhi.n	80032cc <HAL_TIM_ConfigClockSource+0x16c>
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d05c      	beq.n	80032ba <HAL_TIM_ConfigClockSource+0x15a>
 8003200:	2b10      	cmp	r3, #16
 8003202:	d05a      	beq.n	80032ba <HAL_TIM_ConfigClockSource+0x15a>
 8003204:	e062      	b.n	80032cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6818      	ldr	r0, [r3, #0]
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	6899      	ldr	r1, [r3, #8]
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	f000 fb23 	bl	8003860 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003228:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	609a      	str	r2, [r3, #8]
      break;
 8003232:	e04f      	b.n	80032d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6818      	ldr	r0, [r3, #0]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	6899      	ldr	r1, [r3, #8]
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	f000 fb0c 	bl	8003860 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	689a      	ldr	r2, [r3, #8]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003256:	609a      	str	r2, [r3, #8]
      break;
 8003258:	e03c      	b.n	80032d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6818      	ldr	r0, [r3, #0]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	6859      	ldr	r1, [r3, #4]
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	461a      	mov	r2, r3
 8003268:	f000 fa80 	bl	800376c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2150      	movs	r1, #80	; 0x50
 8003272:	4618      	mov	r0, r3
 8003274:	f000 fad9 	bl	800382a <TIM_ITRx_SetConfig>
      break;
 8003278:	e02c      	b.n	80032d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6818      	ldr	r0, [r3, #0]
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	6859      	ldr	r1, [r3, #4]
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	461a      	mov	r2, r3
 8003288:	f000 fa9f 	bl	80037ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2160      	movs	r1, #96	; 0x60
 8003292:	4618      	mov	r0, r3
 8003294:	f000 fac9 	bl	800382a <TIM_ITRx_SetConfig>
      break;
 8003298:	e01c      	b.n	80032d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6818      	ldr	r0, [r3, #0]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	6859      	ldr	r1, [r3, #4]
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	461a      	mov	r2, r3
 80032a8:	f000 fa60 	bl	800376c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2140      	movs	r1, #64	; 0x40
 80032b2:	4618      	mov	r0, r3
 80032b4:	f000 fab9 	bl	800382a <TIM_ITRx_SetConfig>
      break;
 80032b8:	e00c      	b.n	80032d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4619      	mov	r1, r3
 80032c4:	4610      	mov	r0, r2
 80032c6:	f000 fab0 	bl	800382a <TIM_ITRx_SetConfig>
      break;
 80032ca:	e003      	b.n	80032d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	73fb      	strb	r3, [r7, #15]
      break;
 80032d0:	e000      	b.n	80032d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80032d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032ee:	b480      	push	{r7}
 80032f0:	b083      	sub	sp, #12
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80032f6:	bf00      	nop
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr

08003302 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003302:	b480      	push	{r7}
 8003304:	b083      	sub	sp, #12
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800330a:	bf00      	nop
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr

08003316 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003316:	b480      	push	{r7}
 8003318:	b083      	sub	sp, #12
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003332:	bf00      	nop
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr

0800333e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800333e:	b480      	push	{r7}
 8003340:	b083      	sub	sp, #12
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003346:	bf00      	nop
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
	...

08003354 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a34      	ldr	r2, [pc, #208]	; (8003438 <TIM_Base_SetConfig+0xe4>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d00f      	beq.n	800338c <TIM_Base_SetConfig+0x38>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003372:	d00b      	beq.n	800338c <TIM_Base_SetConfig+0x38>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a31      	ldr	r2, [pc, #196]	; (800343c <TIM_Base_SetConfig+0xe8>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d007      	beq.n	800338c <TIM_Base_SetConfig+0x38>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a30      	ldr	r2, [pc, #192]	; (8003440 <TIM_Base_SetConfig+0xec>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d003      	beq.n	800338c <TIM_Base_SetConfig+0x38>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a2f      	ldr	r2, [pc, #188]	; (8003444 <TIM_Base_SetConfig+0xf0>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d108      	bne.n	800339e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003392:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	4313      	orrs	r3, r2
 800339c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a25      	ldr	r2, [pc, #148]	; (8003438 <TIM_Base_SetConfig+0xe4>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d01b      	beq.n	80033de <TIM_Base_SetConfig+0x8a>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ac:	d017      	beq.n	80033de <TIM_Base_SetConfig+0x8a>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a22      	ldr	r2, [pc, #136]	; (800343c <TIM_Base_SetConfig+0xe8>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d013      	beq.n	80033de <TIM_Base_SetConfig+0x8a>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a21      	ldr	r2, [pc, #132]	; (8003440 <TIM_Base_SetConfig+0xec>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d00f      	beq.n	80033de <TIM_Base_SetConfig+0x8a>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a20      	ldr	r2, [pc, #128]	; (8003444 <TIM_Base_SetConfig+0xf0>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d00b      	beq.n	80033de <TIM_Base_SetConfig+0x8a>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a1f      	ldr	r2, [pc, #124]	; (8003448 <TIM_Base_SetConfig+0xf4>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d007      	beq.n	80033de <TIM_Base_SetConfig+0x8a>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a1e      	ldr	r2, [pc, #120]	; (800344c <TIM_Base_SetConfig+0xf8>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d003      	beq.n	80033de <TIM_Base_SetConfig+0x8a>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a1d      	ldr	r2, [pc, #116]	; (8003450 <TIM_Base_SetConfig+0xfc>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d108      	bne.n	80033f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	689a      	ldr	r2, [r3, #8]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a08      	ldr	r2, [pc, #32]	; (8003438 <TIM_Base_SetConfig+0xe4>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d103      	bne.n	8003424 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	691a      	ldr	r2, [r3, #16]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	615a      	str	r2, [r3, #20]
}
 800342a:	bf00      	nop
 800342c:	3714      	adds	r7, #20
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	40010000 	.word	0x40010000
 800343c:	40000400 	.word	0x40000400
 8003440:	40000800 	.word	0x40000800
 8003444:	40000c00 	.word	0x40000c00
 8003448:	40014000 	.word	0x40014000
 800344c:	40014400 	.word	0x40014400
 8003450:	40014800 	.word	0x40014800

08003454 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003454:	b480      	push	{r7}
 8003456:	b087      	sub	sp, #28
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	f023 0201 	bic.w	r2, r3, #1
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f023 0303 	bic.w	r3, r3, #3
 800348a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	4313      	orrs	r3, r2
 8003494:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	f023 0302 	bic.w	r3, r3, #2
 800349c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a1c      	ldr	r2, [pc, #112]	; (800351c <TIM_OC1_SetConfig+0xc8>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d10c      	bne.n	80034ca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	f023 0308 	bic.w	r3, r3, #8
 80034b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	4313      	orrs	r3, r2
 80034c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f023 0304 	bic.w	r3, r3, #4
 80034c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a13      	ldr	r2, [pc, #76]	; (800351c <TIM_OC1_SetConfig+0xc8>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d111      	bne.n	80034f6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	697a      	ldr	r2, [r7, #20]
 800350e:	621a      	str	r2, [r3, #32]
}
 8003510:	bf00      	nop
 8003512:	371c      	adds	r7, #28
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr
 800351c:	40010000 	.word	0x40010000

08003520 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003520:	b480      	push	{r7}
 8003522:	b087      	sub	sp, #28
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	f023 0210 	bic.w	r2, r3, #16
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800354e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003556:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	021b      	lsls	r3, r3, #8
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	4313      	orrs	r3, r2
 8003562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	f023 0320 	bic.w	r3, r3, #32
 800356a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	011b      	lsls	r3, r3, #4
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	4313      	orrs	r3, r2
 8003576:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a1e      	ldr	r2, [pc, #120]	; (80035f4 <TIM_OC2_SetConfig+0xd4>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d10d      	bne.n	800359c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003586:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	011b      	lsls	r3, r3, #4
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	4313      	orrs	r3, r2
 8003592:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800359a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a15      	ldr	r2, [pc, #84]	; (80035f4 <TIM_OC2_SetConfig+0xd4>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d113      	bne.n	80035cc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	4313      	orrs	r3, r2
 80035be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	621a      	str	r2, [r3, #32]
}
 80035e6:	bf00      	nop
 80035e8:	371c      	adds	r7, #28
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	40010000 	.word	0x40010000

080035f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b087      	sub	sp, #28
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	69db      	ldr	r3, [r3, #28]
 800361e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f023 0303 	bic.w	r3, r3, #3
 800362e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	4313      	orrs	r3, r2
 8003638:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003640:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	021b      	lsls	r3, r3, #8
 8003648:	697a      	ldr	r2, [r7, #20]
 800364a:	4313      	orrs	r3, r2
 800364c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a1d      	ldr	r2, [pc, #116]	; (80036c8 <TIM_OC3_SetConfig+0xd0>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d10d      	bne.n	8003672 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800365c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	021b      	lsls	r3, r3, #8
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	4313      	orrs	r3, r2
 8003668:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003670:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a14      	ldr	r2, [pc, #80]	; (80036c8 <TIM_OC3_SetConfig+0xd0>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d113      	bne.n	80036a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003680:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003688:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	011b      	lsls	r3, r3, #4
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	4313      	orrs	r3, r2
 8003694:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	011b      	lsls	r3, r3, #4
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	4313      	orrs	r3, r2
 80036a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	621a      	str	r2, [r3, #32]
}
 80036bc:	bf00      	nop
 80036be:	371c      	adds	r7, #28
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr
 80036c8:	40010000 	.word	0x40010000

080036cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b087      	sub	sp, #28
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a1b      	ldr	r3, [r3, #32]
 80036da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003702:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	021b      	lsls	r3, r3, #8
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	4313      	orrs	r3, r2
 800370e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003716:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	031b      	lsls	r3, r3, #12
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	4313      	orrs	r3, r2
 8003722:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a10      	ldr	r2, [pc, #64]	; (8003768 <TIM_OC4_SetConfig+0x9c>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d109      	bne.n	8003740 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003732:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	695b      	ldr	r3, [r3, #20]
 8003738:	019b      	lsls	r3, r3, #6
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	4313      	orrs	r3, r2
 800373e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	621a      	str	r2, [r3, #32]
}
 800375a:	bf00      	nop
 800375c:	371c      	adds	r7, #28
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	40010000 	.word	0x40010000

0800376c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800376c:	b480      	push	{r7}
 800376e:	b087      	sub	sp, #28
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	f023 0201 	bic.w	r2, r3, #1
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003796:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	011b      	lsls	r3, r3, #4
 800379c:	693a      	ldr	r2, [r7, #16]
 800379e:	4313      	orrs	r3, r2
 80037a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	f023 030a 	bic.w	r3, r3, #10
 80037a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	621a      	str	r2, [r3, #32]
}
 80037be:	bf00      	nop
 80037c0:	371c      	adds	r7, #28
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr

080037ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037ca:	b480      	push	{r7}
 80037cc:	b087      	sub	sp, #28
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	60f8      	str	r0, [r7, #12]
 80037d2:	60b9      	str	r1, [r7, #8]
 80037d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	f023 0210 	bic.w	r2, r3, #16
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6a1b      	ldr	r3, [r3, #32]
 80037ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	031b      	lsls	r3, r3, #12
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003806:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	011b      	lsls	r3, r3, #4
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	4313      	orrs	r3, r2
 8003810:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	621a      	str	r2, [r3, #32]
}
 800381e:	bf00      	nop
 8003820:	371c      	adds	r7, #28
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800382a:	b480      	push	{r7}
 800382c:	b085      	sub	sp, #20
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
 8003832:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003840:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	4313      	orrs	r3, r2
 8003848:	f043 0307 	orr.w	r3, r3, #7
 800384c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	609a      	str	r2, [r3, #8]
}
 8003854:	bf00      	nop
 8003856:	3714      	adds	r7, #20
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003860:	b480      	push	{r7}
 8003862:	b087      	sub	sp, #28
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
 800386c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800387a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	021a      	lsls	r2, r3, #8
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	431a      	orrs	r2, r3
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	4313      	orrs	r3, r2
 8003888:	697a      	ldr	r2, [r7, #20]
 800388a:	4313      	orrs	r3, r2
 800388c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	697a      	ldr	r2, [r7, #20]
 8003892:	609a      	str	r2, [r3, #8]
}
 8003894:	bf00      	nop
 8003896:	371c      	adds	r7, #28
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d101      	bne.n	80038b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038b4:	2302      	movs	r3, #2
 80038b6:	e050      	b.n	800395a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2202      	movs	r2, #2
 80038c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a1c      	ldr	r2, [pc, #112]	; (8003968 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d018      	beq.n	800392e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003904:	d013      	beq.n	800392e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a18      	ldr	r2, [pc, #96]	; (800396c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d00e      	beq.n	800392e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a16      	ldr	r2, [pc, #88]	; (8003970 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d009      	beq.n	800392e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a15      	ldr	r2, [pc, #84]	; (8003974 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d004      	beq.n	800392e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a13      	ldr	r2, [pc, #76]	; (8003978 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d10c      	bne.n	8003948 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003934:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	68ba      	ldr	r2, [r7, #8]
 800393c:	4313      	orrs	r3, r2
 800393e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68ba      	ldr	r2, [r7, #8]
 8003946:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3714      	adds	r7, #20
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	40010000 	.word	0x40010000
 800396c:	40000400 	.word	0x40000400
 8003970:	40000800 	.word	0x40000800
 8003974:	40000c00 	.word	0x40000c00
 8003978:	40014000 	.word	0x40014000

0800397c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <SPI_ETH_RESET>:
 */

#include "ETH_W5500.h"

SPI_ETH_RESET(struct W5500_SPI * x)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(x->RST_PORT, x->RST_PIN , GPIO_PIN_RESET);		//RST LOW
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68d8      	ldr	r0, [r3, #12]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	8a1b      	ldrh	r3, [r3, #16]
 80039b4:	2200      	movs	r2, #0
 80039b6:	4619      	mov	r1, r3
 80039b8:	f7fe fa38 	bl	8001e2c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80039bc:	2001      	movs	r0, #1
 80039be:	f7fd ff7b 	bl	80018b8 <HAL_Delay>
	HAL_GPIO_WritePin(x->RST_PORT, x->RST_PIN , GPIO_PIN_SET);			//RST HIGH
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68d8      	ldr	r0, [r3, #12]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	8a1b      	ldrh	r3, [r3, #16]
 80039ca:	2201      	movs	r2, #1
 80039cc:	4619      	mov	r1, r3
 80039ce:	f7fe fa2d 	bl	8001e2c <HAL_GPIO_WritePin>
}
 80039d2:	bf00      	nop
 80039d4:	4618      	mov	r0, r3
 80039d6:	3708      	adds	r7, #8
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <SPI_ETH_PHY_RESET>:

SPI_ETH_PHY_RESET(struct W5500_SPI * x)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
uint8_t a;

	x->TX[0]=0x00;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	771a      	strb	r2, [r3, #28]
	x->TX[1]=0x2E;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	222e      	movs	r2, #46	; 0x2e
 80039ee:	775a      	strb	r2, [r3, #29]
	x->TX[2]=0x00;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	779a      	strb	r2, [r3, #30]
	x->TX[3]=0x00;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	77da      	strb	r2, [r3, #31]
	SPI_ETH(x);			//Realizo la letura de PHYCFGR
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f81c 	bl	8003a3a <SPI_ETH>
	a=x->RX[3];
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003a08:	73fb      	strb	r3, [r7, #15]
	a=a&0xFE;
 8003a0a:	7bfb      	ldrb	r3, [r7, #15]
 8003a0c:	f023 0301 	bic.w	r3, r3, #1
 8003a10:	73fb      	strb	r3, [r7, #15]
	x->TX[0]=0x00;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	771a      	strb	r2, [r3, #28]
	x->TX[1]=0x2E;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	222e      	movs	r2, #46	; 0x2e
 8003a1c:	775a      	strb	r2, [r3, #29]
	x->TX[2]=0x04;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2204      	movs	r2, #4
 8003a22:	779a      	strb	r2, [r3, #30]
	x->TX[3]=a;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	7bfa      	ldrb	r2, [r7, #15]
 8003a28:	77da      	strb	r2, [r3, #31]
	SPI_ETH(x);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f805 	bl	8003a3a <SPI_ETH>
}
 8003a30:	bf00      	nop
 8003a32:	4618      	mov	r0, r3
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <SPI_ETH>:

uint8_t  SPI_ETH(struct  W5500_SPI * x )
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b084      	sub	sp, #16
 8003a3e:	af02      	add	r7, sp, #8
 8003a40:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_RESET);				// NSS LOW
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6858      	ldr	r0, [r3, #4]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	891b      	ldrh	r3, [r3, #8]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	f7fe f9ed 	bl	8001e2c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(x->SPI, x->TX , x->RX, 4, 100);						//SPI COMM
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6818      	ldr	r0, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f103 011c 	add.w	r1, r3, #28
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f103 0220 	add.w	r2, r3, #32
 8003a62:	2364      	movs	r3, #100	; 0x64
 8003a64:	9300      	str	r3, [sp, #0]
 8003a66:	2304      	movs	r3, #4
 8003a68:	f7fe fea7 	bl	80027ba <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_SET);			//NSS HIGH
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6858      	ldr	r0, [r3, #4]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	891b      	ldrh	r3, [r3, #8]
 8003a74:	2201      	movs	r2, #1
 8003a76:	4619      	mov	r1, r3
 8003a78:	f7fe f9d8 	bl	8001e2c <HAL_GPIO_WritePin>
	return (x->RX[3]);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3708      	adds	r7, #8
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <SPI_ETH_REG>:

uint16_t SPI_ETH_REG(struct W5500_SPI * x,  uint16_t ph_addr, uint8_t addr,uint8_t op, uint8_t * data, uint8_t lnght)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b086      	sub	sp, #24
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
 8003a92:	4608      	mov	r0, r1
 8003a94:	4611      	mov	r1, r2
 8003a96:	461a      	mov	r2, r3
 8003a98:	4603      	mov	r3, r0
 8003a9a:	807b      	strh	r3, [r7, #2]
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	707b      	strb	r3, [r7, #1]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	703b      	strb	r3, [r7, #0]
 uint16_t res=0;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	82fb      	strh	r3, [r7, #22]
 uint8_t  a=op;
 8003aa8:	783b      	ldrb	r3, [r7, #0]
 8003aaa:	72fb      	strb	r3, [r7, #11]

 x->TX[0]= (ph_addr & 0xFF00)>>8; 				//High Address Phase
 8003aac:	887b      	ldrh	r3, [r7, #2]
 8003aae:	0a1b      	lsrs	r3, r3, #8
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	771a      	strb	r2, [r3, #28]
 x->TX[1]= ph_addr & 0x00FF;					//Low Address Phase
 8003ab8:	887b      	ldrh	r3, [r7, #2]
 8003aba:	b2da      	uxtb	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	775a      	strb	r2, [r3, #29]
 x->TX[2]= ((addr)<<3)|((op)<<2);
 8003ac0:	787b      	ldrb	r3, [r7, #1]
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	b25a      	sxtb	r2, r3
 8003ac6:	783b      	ldrb	r3, [r7, #0]
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	b25b      	sxtb	r3, r3
 8003acc:	4313      	orrs	r3, r2
 8003ace:	b25b      	sxtb	r3, r3
 8003ad0:	b2da      	uxtb	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	779a      	strb	r2, [r3, #30]
 x->TX[3]=0x00;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	77da      	strb	r2, [r3, #31]
 if(op == 1)								//Write operation
 8003adc:	783b      	ldrb	r3, [r7, #0]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d11d      	bne.n	8003b1e <SPI_ETH_REG+0x94>
 {
	 for(int i=0; i<(lnght); i++)			//Esto solo incrementa 256 ubicaciones
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	613b      	str	r3, [r7, #16]
 8003ae6:	e013      	b.n	8003b10 <SPI_ETH_REG+0x86>
	 {
		x->TX[3]=data[i];					//Put data to be sent
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	6a3a      	ldr	r2, [r7, #32]
 8003aec:	4413      	add	r3, r2
 8003aee:	781a      	ldrb	r2, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	77da      	strb	r2, [r3, #31]
		res=SPI_ETH(x);						//Send data to device
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f7ff ffa0 	bl	8003a3a <SPI_ETH>
 8003afa:	4603      	mov	r3, r0
 8003afc:	82fb      	strh	r3, [r7, #22]
		x->TX[1]++;							//Address increased once
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	7f5b      	ldrb	r3, [r3, #29]
 8003b02:	3301      	adds	r3, #1
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	775a      	strb	r2, [r3, #29]
	 for(int i=0; i<(lnght); i++)			//Esto solo incrementa 256 ubicaciones
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	613b      	str	r3, [r7, #16]
 8003b10:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	dbe6      	blt.n	8003ae8 <SPI_ETH_REG+0x5e>
	 }
	 return(res);
 8003b1a:	8afb      	ldrh	r3, [r7, #22]
 8003b1c:	e037      	b.n	8003b8e <SPI_ETH_REG+0x104>
 }
	 if(op == 0)							//Read operation
 8003b1e:	783b      	ldrb	r3, [r7, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d134      	bne.n	8003b8e <SPI_ETH_REG+0x104>
	 {
		 x->TX[3]=0x00;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	77da      	strb	r2, [r3, #31]
		 if (lnght==2)
 8003b2a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d120      	bne.n	8003b74 <SPI_ETH_REG+0xea>
		{
		for(int i=0; i<(lnght); i++)
 8003b32:	2300      	movs	r3, #0
 8003b34:	60fb      	str	r3, [r7, #12]
 8003b36:	e016      	b.n	8003b66 <SPI_ETH_REG+0xdc>
			{
			res|=SPI_ETH(x);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f7ff ff7e 	bl	8003a3a <SPI_ETH>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	8afb      	ldrh	r3, [r7, #22]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	82fb      	strh	r3, [r7, #22]
			x->TX[1]++;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	7f5b      	ldrb	r3, [r3, #29]
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	b2da      	uxtb	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	775a      	strb	r2, [r3, #29]
			if (i==0)res=res<<8;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d102      	bne.n	8003b60 <SPI_ETH_REG+0xd6>
 8003b5a:	8afb      	ldrh	r3, [r7, #22]
 8003b5c:	021b      	lsls	r3, r3, #8
 8003b5e:	82fb      	strh	r3, [r7, #22]
		for(int i=0; i<(lnght); i++)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	3301      	adds	r3, #1
 8003b64:	60fb      	str	r3, [r7, #12]
 8003b66:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	dbe3      	blt.n	8003b38 <SPI_ETH_REG+0xae>
			}
		 return(res);
 8003b70:	8afb      	ldrh	r3, [r7, #22]
 8003b72:	e00c      	b.n	8003b8e <SPI_ETH_REG+0x104>
		}else
		{
			res=SPI_ETH(x);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f7ff ff60 	bl	8003a3a <SPI_ETH>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	82fb      	strh	r3, [r7, #22]
			x->TX[1]++;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	7f5b      	ldrb	r3, [r3, #29]
 8003b82:	3301      	adds	r3, #1
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	775a      	strb	r2, [r3, #29]
			return(res);
 8003b8a:	8afb      	ldrh	r3, [r7, #22]
 8003b8c:	e7ff      	b.n	8003b8e <SPI_ETH_REG+0x104>
		}
 	 }
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3718      	adds	r7, #24
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <SPI_ETH_WR_REG_16>:

uint16_t SPI_ETH_WR_REG_16(struct W5500_SPI * x, uint16_t addr, uint16_t  data, uint8_t socket)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b088      	sub	sp, #32
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	60f8      	str	r0, [r7, #12]
 8003b9e:	4608      	mov	r0, r1
 8003ba0:	4611      	mov	r1, r2
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	817b      	strh	r3, [r7, #10]
 8003ba8:	460b      	mov	r3, r1
 8003baa:	813b      	strh	r3, [r7, #8]
 8003bac:	4613      	mov	r3, r2
 8003bae:	71fb      	strb	r3, [r7, #7]
	uint16_t res=0;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	83fb      	strh	r3, [r7, #30]
	uint8_t num[2];
			x->TX[2]= ((socket)<<3)|0x04;
 8003bb4:	79fb      	ldrb	r3, [r7, #7]
 8003bb6:	00db      	lsls	r3, r3, #3
 8003bb8:	b25b      	sxtb	r3, r3
 8003bba:	f043 0304 	orr.w	r3, r3, #4
 8003bbe:	b25b      	sxtb	r3, r3
 8003bc0:	b2da      	uxtb	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	779a      	strb	r2, [r3, #30]
			num[1] = data & 0x00FF ;
 8003bc6:	893b      	ldrh	r3, [r7, #8]
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	757b      	strb	r3, [r7, #21]
			num[0] = (data & 0xFF00)>>8 ;
 8003bcc:	893b      	ldrh	r3, [r7, #8]
 8003bce:	0a1b      	lsrs	r3, r3, #8
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	753b      	strb	r3, [r7, #20]

			 for(int i=0; i<(2); i++)
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	61bb      	str	r3, [r7, #24]
 8003bda:	e01b      	b.n	8003c14 <SPI_ETH_WR_REG_16+0x7e>
				 {
				 	x->TX[1]= addr & 0x00FF;//x->TX[2]= addr & 0x00FF;
 8003bdc:	897b      	ldrh	r3, [r7, #10]
 8003bde:	b2da      	uxtb	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	775a      	strb	r2, [r3, #29]
				 	x->TX[0]=(addr & 0xFF00)>>8;//x->TX[1]=(addr & 0xFF00)>>8;
 8003be4:	897b      	ldrh	r3, [r7, #10]
 8003be6:	0a1b      	lsrs	r3, r3, #8
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	b2da      	uxtb	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	771a      	strb	r2, [r3, #28]
					addr++;
 8003bf0:	897b      	ldrh	r3, [r7, #10]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	817b      	strh	r3, [r7, #10]
					x->TX[3]=num[i];
 8003bf6:	f107 0214 	add.w	r2, r7, #20
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	781a      	ldrb	r2, [r3, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	77da      	strb	r2, [r3, #31]
					res=SPI_ETH(x);
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	f7ff ff18 	bl	8003a3a <SPI_ETH>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	83fb      	strh	r3, [r7, #30]
			 for(int i=0; i<(2); i++)
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	3301      	adds	r3, #1
 8003c12:	61bb      	str	r3, [r7, #24]
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	dde0      	ble.n	8003bdc <SPI_ETH_WR_REG_16+0x46>
				 }
			 return(res);
 8003c1a:	8bfb      	ldrh	r3, [r7, #30]
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3720      	adds	r7, #32
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <SPI_ETH_RD_RCV_REG_16>:
	return(1);
	}
}

uint16_t SPI_ETH_RD_RCV_REG_16(struct W5500_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght, uint8_t socket )
{
 8003c24:	b590      	push	{r4, r7, lr}
 8003c26:	b087      	sub	sp, #28
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	607a      	str	r2, [r7, #4]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	460b      	mov	r3, r1
 8003c32:	817b      	strh	r3, [r7, #10]
 8003c34:	4613      	mov	r3, r2
 8003c36:	813b      	strh	r3, [r7, #8]
		x->TX[2]= ((socket)<<3)|0x00;
 8003c38:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003c3c:	00db      	lsls	r3, r3, #3
 8003c3e:	b2da      	uxtb	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	779a      	strb	r2, [r3, #30]
	if(lnght < 2048)
 8003c44:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003c46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c4a:	d226      	bcs.n	8003c9a <SPI_ETH_RD_RCV_REG_16+0x76>
	{
			x->TX[3]=0x00;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	77da      	strb	r2, [r3, #31]
			for(int i=0; i<(lnght); i++)
 8003c52:	2300      	movs	r3, #0
 8003c54:	617b      	str	r3, [r7, #20]
 8003c56:	e01a      	b.n	8003c8e <SPI_ETH_RD_RCV_REG_16+0x6a>
				{
				x->TX[1] = addr & 0x00FF;
 8003c58:	897b      	ldrh	r3, [r7, #10]
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	775a      	strb	r2, [r3, #29]
				x->TX[0] = (addr & 0xFF00)>>8;
 8003c60:	897b      	ldrh	r3, [r7, #10]
 8003c62:	0a1b      	lsrs	r3, r3, #8
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	b2da      	uxtb	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	771a      	strb	r2, [r3, #28]
				data[i+offset]=SPI_ETH(x);
 8003c6c:	893a      	ldrh	r2, [r7, #8]
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	4413      	add	r3, r2
 8003c72:	461a      	mov	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	189c      	adds	r4, r3, r2
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f7ff fede 	bl	8003a3a <SPI_ETH>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	7023      	strb	r3, [r4, #0]
				addr++;
 8003c82:	897b      	ldrh	r3, [r7, #10]
 8003c84:	3301      	adds	r3, #1
 8003c86:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	617b      	str	r3, [r7, #20]
 8003c8e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	dbe0      	blt.n	8003c58 <SPI_ETH_RD_RCV_REG_16+0x34>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 8003c96:	2300      	movs	r3, #0
 8003c98:	e000      	b.n	8003c9c <SPI_ETH_RD_RCV_REG_16+0x78>
	}
	else
	{
	return(1);
 8003c9a:	2301      	movs	r3, #1
	}
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	371c      	adds	r7, #28
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd90      	pop	{r4, r7, pc}

08003ca4 <SPI_ETH_WR_TX_REG_16>:

uint16_t SPI_ETH_WR_TX_REG_16(struct W5500_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght, uint8_t socket )
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	607a      	str	r2, [r7, #4]
 8003cae:	461a      	mov	r2, r3
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	817b      	strh	r3, [r7, #10]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	813b      	strh	r3, [r7, #8]
		x->TX[2]= ((socket)<<3)|0x04;
 8003cb8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003cbc:	00db      	lsls	r3, r3, #3
 8003cbe:	b25b      	sxtb	r3, r3
 8003cc0:	f043 0304 	orr.w	r3, r3, #4
 8003cc4:	b25b      	sxtb	r3, r3
 8003cc6:	b2da      	uxtb	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	779a      	strb	r2, [r3, #30]
	if(lnght < 2048)
 8003ccc:	8c3b      	ldrh	r3, [r7, #32]
 8003cce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cd2:	d224      	bcs.n	8003d1e <SPI_ETH_WR_TX_REG_16+0x7a>
	{

			for(int i=0; i<(lnght); i++)
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	617b      	str	r3, [r7, #20]
 8003cd8:	e01b      	b.n	8003d12 <SPI_ETH_WR_TX_REG_16+0x6e>
				{
				x->TX[1] = addr & 0x00FF;
 8003cda:	897b      	ldrh	r3, [r7, #10]
 8003cdc:	b2da      	uxtb	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	775a      	strb	r2, [r3, #29]
				x->TX[0] = (addr & 0xFF00)>>8;
 8003ce2:	897b      	ldrh	r3, [r7, #10]
 8003ce4:	0a1b      	lsrs	r3, r3, #8
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	b2da      	uxtb	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	771a      	strb	r2, [r3, #28]
				x->TX[3]= x->data[i+offset];
 8003cee:	893a      	ldrh	r2, [r7, #8]
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	77da      	strb	r2, [r3, #31]
				SPI_ETH(x);
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f7ff fe9a 	bl	8003a3a <SPI_ETH>
				addr++;
 8003d06:	897b      	ldrh	r3, [r7, #10]
 8003d08:	3301      	adds	r3, #1
 8003d0a:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	3301      	adds	r3, #1
 8003d10:	617b      	str	r3, [r7, #20]
 8003d12:	8c3b      	ldrh	r3, [r7, #32]
 8003d14:	697a      	ldr	r2, [r7, #20]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	dbdf      	blt.n	8003cda <SPI_ETH_WR_TX_REG_16+0x36>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	e000      	b.n	8003d20 <SPI_ETH_WR_TX_REG_16+0x7c>
	}
	else
	{
	return(1);
 8003d1e:	2301      	movs	r3, #1
	}
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3718      	adds	r7, #24
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <eth_wr_SOCKET_CMD>:

eth_wr_SOCKET_CMD(struct  W5500_SPI * y, uint8_t socket, uint8_t z)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	460b      	mov	r3, r1
 8003d32:	70fb      	strb	r3, [r7, #3]
 8003d34:	4613      	mov	r3, r2
 8003d36:	70bb      	strb	r3, [r7, #2]
	y->TX[0]= 0x00; 				//High Address Phase Hardcoded MR Register
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	771a      	strb	r2, [r3, #28]
	y->TX[1]= 0x01;					//Low Address Phase Command
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2201      	movs	r2, #1
 8003d42:	775a      	strb	r2, [r3, #29]
	y->TX[2]= ((socket<<3)|0x04);	//Control Phase address + R/W + OP Mode
 8003d44:	78fb      	ldrb	r3, [r7, #3]
 8003d46:	00db      	lsls	r3, r3, #3
 8003d48:	b25b      	sxtb	r3, r3
 8003d4a:	f043 0304 	orr.w	r3, r3, #4
 8003d4e:	b25b      	sxtb	r3, r3
 8003d50:	b2da      	uxtb	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	779a      	strb	r2, [r3, #30]
	y->TX[3]= z ;		//Load data to save
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	78ba      	ldrb	r2, [r7, #2]
 8003d5a:	77da      	strb	r2, [r3, #31]
	SPI_ETH(y);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f7ff fe6c 	bl	8003a3a <SPI_ETH>
}
 8003d62:	bf00      	nop
 8003d64:	4618      	mov	r0, r3
 8003d66:	3708      	adds	r7, #8
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <eth_wr_SOCKET_MODE>:

eth_wr_SOCKET_MODE(struct  W5500_SPI * y, uint8_t socket, uint8_t z)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	460b      	mov	r3, r1
 8003d76:	70fb      	strb	r3, [r7, #3]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	70bb      	strb	r3, [r7, #2]
		y->TX[0]= 0x00; 				//High Address Phase Hardcoded MR Register
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	771a      	strb	r2, [r3, #28]
		y->TX[1]= 0x00;					//Low Address Phase Mode
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	775a      	strb	r2, [r3, #29]
		y->TX[2]= ((socket)<<3)|0x04;	//Control Phase address + R/W + OP Mode
 8003d88:	78fb      	ldrb	r3, [r7, #3]
 8003d8a:	00db      	lsls	r3, r3, #3
 8003d8c:	b25b      	sxtb	r3, r3
 8003d8e:	f043 0304 	orr.w	r3, r3, #4
 8003d92:	b25b      	sxtb	r3, r3
 8003d94:	b2da      	uxtb	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	779a      	strb	r2, [r3, #30]
		y->TX[3]= z ;		//Load data to save
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	78ba      	ldrb	r2, [r7, #2]
 8003d9e:	77da      	strb	r2, [r3, #31]

	SPI_ETH(y);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f7ff fe4a 	bl	8003a3a <SPI_ETH>
}
 8003da6:	bf00      	nop
 8003da8:	4618      	mov	r0, r3
 8003daa:	3708      	adds	r7, #8
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <eth_init>:


uint8_t eth_init(struct W5500_SPI * ETH)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af02      	add	r7, sp, #8
 8003db6:	6078      	str	r0, [r7, #4]
  	 SPI_ETH_RESET(ETH);	//Reset W5500 por hardware
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f7ff fdf3 	bl	80039a4 <SPI_ETH_RESET>
  	 HAL_Delay(800);
 8003dbe:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003dc2:	f7fd fd79 	bl	80018b8 <HAL_Delay>

  	 SPI_ETH_REG(ETH, GAR,COMM_REG,SPI_WRITE, ETH->GAR,4);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003dcc:	3304      	adds	r3, #4
 8003dce:	2204      	movs	r2, #4
 8003dd0:	9201      	str	r2, [sp, #4]
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	2101      	movs	r1, #1
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7ff fe55 	bl	8003a8a <SPI_ETH_REG>

	 ETH->T8=0x00;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 SPI_ETH_REG(ETH, IMR,COMM_REG	,SPI_WRITE, ETH->T8,1);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003df2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8003df6:	461a      	mov	r2, r3
 8003df8:	2301      	movs	r3, #1
 8003dfa:	9301      	str	r3, [sp, #4]
 8003dfc:	9200      	str	r2, [sp, #0]
 8003dfe:	2301      	movs	r3, #1
 8003e00:	2200      	movs	r2, #0
 8003e02:	2116      	movs	r1, #22
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f7ff fe40 	bl	8003a8a <SPI_ETH_REG>

	 ETH->T8=0x0F;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e10:	220f      	movs	r2, #15
 8003e12:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 SPI_ETH_REG(ETH, RTR,COMM_REG	,SPI_WRITE, ETH->T8,1);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e1c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8003e20:	461a      	mov	r2, r3
 8003e22:	2301      	movs	r3, #1
 8003e24:	9301      	str	r3, [sp, #4]
 8003e26:	9200      	str	r2, [sp, #0]
 8003e28:	2301      	movs	r3, #1
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	2119      	movs	r1, #25
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7ff fe2b 	bl	8003a8a <SPI_ETH_REG>

	 ETH->T8=0xA0;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e3a:	22a0      	movs	r2, #160	; 0xa0
 8003e3c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 SPI_ETH_REG(ETH, RTR+1,COMM_REG,SPI_WRITE, ETH->T8,1);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e46:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	9301      	str	r3, [sp, #4]
 8003e50:	9200      	str	r2, [sp, #0]
 8003e52:	2301      	movs	r3, #1
 8003e54:	2200      	movs	r2, #0
 8003e56:	211a      	movs	r1, #26
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f7ff fe16 	bl	8003a8a <SPI_ETH_REG>

	 ETH->T8=0x07;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e64:	2207      	movs	r2, #7
 8003e66:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 SPI_ETH_REG(ETH, RCR,COMM_REG	,SPI_WRITE, ETH->T8,1);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e70:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8003e74:	461a      	mov	r2, r3
 8003e76:	2301      	movs	r3, #1
 8003e78:	9301      	str	r3, [sp, #4]
 8003e7a:	9200      	str	r2, [sp, #0]
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	2200      	movs	r2, #0
 8003e80:	211b      	movs	r1, #27
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f7ff fe01 	bl	8003a8a <SPI_ETH_REG>

	 ETH->T8=0x00;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 SPI_ETH_REG(ETH, SIMR,COMM_REG	,SPI_WRITE, ETH->T8,1);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e9a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	9301      	str	r3, [sp, #4]
 8003ea4:	9200      	str	r2, [sp, #0]
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	2118      	movs	r1, #24
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f7ff fdec 	bl	8003a8a <SPI_ETH_REG>

	 SPI_ETH_REG(ETH, SHAR,COMM_REG,SPI_WRITE, ETH->SHAR,6);												//same for server and client
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003eb8:	330c      	adds	r3, #12
 8003eba:	2206      	movs	r2, #6
 8003ebc:	9201      	str	r2, [sp, #4]
 8003ebe:	9300      	str	r3, [sp, #0]
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	2109      	movs	r1, #9
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7ff fddf 	bl	8003a8a <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5500-MAC SET\r\n",strlen("\r\nETH-W5500-MAC SET"));
 8003ecc:	2113      	movs	r1, #19
 8003ece:	481d      	ldr	r0, [pc, #116]	; (8003f44 <eth_init+0x194>)
 8003ed0:	f7fc ff84 	bl	8000ddc <ITM0_Write>
	 SPI_ETH_REG(ETH, GAR,COMM_REG,SPI_WRITE, ETH->GAR,4);	//SPI_ETH_REG(ETH, GAR_ADDR_BASEH,GAR_ADDR_BASEL,SPI_WRITE, ETH->GAR,4);													//same for server and client
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003eda:	3304      	adds	r3, #4
 8003edc:	2204      	movs	r2, #4
 8003ede:	9201      	str	r2, [sp, #4]
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	2101      	movs	r1, #1
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f7ff fdce 	bl	8003a8a <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5500-GATEWAY SET\r\n",strlen("\r\nETH-W5500-GATEWAY SET\r\n"));									//same for server and client
 8003eee:	2119      	movs	r1, #25
 8003ef0:	4815      	ldr	r0, [pc, #84]	; (8003f48 <eth_init+0x198>)
 8003ef2:	f7fc ff73 	bl	8000ddc <ITM0_Write>
	 SPI_ETH_REG(ETH, SUBR,COMM_REG,SPI_WRITE, ETH->SUBR,4);												//same for server and client
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003efc:	3308      	adds	r3, #8
 8003efe:	2204      	movs	r2, #4
 8003f00:	9201      	str	r2, [sp, #4]
 8003f02:	9300      	str	r3, [sp, #0]
 8003f04:	2301      	movs	r3, #1
 8003f06:	2200      	movs	r2, #0
 8003f08:	2105      	movs	r1, #5
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f7ff fdbd 	bl	8003a8a <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5500-SUBNET SET\r\n",strlen("\r\nETH-W5500-SUBNET SET"));											//same for server and client
 8003f10:	2116      	movs	r1, #22
 8003f12:	480e      	ldr	r0, [pc, #56]	; (8003f4c <eth_init+0x19c>)
 8003f14:	f7fc ff62 	bl	8000ddc <ITM0_Write>
	 SPI_ETH_REG(ETH, SIPR,COMM_REG,SPI_WRITE, ETH->SIPR,4);												//same for server and client
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003f1e:	3312      	adds	r3, #18
 8003f20:	2204      	movs	r2, #4
 8003f22:	9201      	str	r2, [sp, #4]
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	2301      	movs	r3, #1
 8003f28:	2200      	movs	r2, #0
 8003f2a:	210f      	movs	r1, #15
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f7ff fdac 	bl	8003a8a <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5500-IP SET\r\n",strlen("\r\nETH-W5500-IP SET"));
 8003f32:	2112      	movs	r1, #18
 8003f34:	4806      	ldr	r0, [pc, #24]	; (8003f50 <eth_init+0x1a0>)
 8003f36:	f7fc ff51 	bl	8000ddc <ITM0_Write>

}
 8003f3a:	bf00      	nop
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3708      	adds	r7, #8
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	08005374 	.word	0x08005374
 8003f48:	0800538c 	.word	0x0800538c
 8003f4c:	080053a8 	.word	0x080053a8
 8003f50:	080053c4 	.word	0x080053c4

08003f54 <eth_socket_init>:

uint8_t eth_socket_init(struct W5500_SPI * ETH, uint8_t socket)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af02      	add	r7, sp, #8
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	70fb      	strb	r3, [r7, #3]

	 ETH->T8=0x02;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f66:	2202      	movs	r2, #2
 8003f68:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S0_REG,SPI_WRITE, ETH->T8,1);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f72:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8003f76:	461a      	mov	r2, r3
 8003f78:	2301      	movs	r3, #1
 8003f7a:	9301      	str	r3, [sp, #4]
 8003f7c:	9200      	str	r2, [sp, #0]
 8003f7e:	2301      	movs	r3, #1
 8003f80:	2201      	movs	r2, #1
 8003f82:	211e      	movs	r1, #30
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f7ff fd80 	bl	8003a8a <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S0_REG,SPI_WRITE, ETH->T8,1);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f90:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8003f94:	461a      	mov	r2, r3
 8003f96:	2301      	movs	r3, #1
 8003f98:	9301      	str	r3, [sp, #4]
 8003f9a:	9200      	str	r2, [sp, #0]
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	211f      	movs	r1, #31
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7ff fd71 	bl	8003a8a <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S1_REG,SPI_WRITE, ETH->T8,1);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fae:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	9301      	str	r3, [sp, #4]
 8003fb8:	9200      	str	r2, [sp, #0]
 8003fba:	2301      	movs	r3, #1
 8003fbc:	2205      	movs	r2, #5
 8003fbe:	211e      	movs	r1, #30
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f7ff fd62 	bl	8003a8a <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S1_REG,SPI_WRITE, ETH->T8,1);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fcc:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	9301      	str	r3, [sp, #4]
 8003fd6:	9200      	str	r2, [sp, #0]
 8003fd8:	2301      	movs	r3, #1
 8003fda:	2205      	movs	r2, #5
 8003fdc:	211f      	movs	r1, #31
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f7ff fd53 	bl	8003a8a <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S2_REG,SPI_WRITE, ETH->T8,1);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fea:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8003fee:	461a      	mov	r2, r3
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	9301      	str	r3, [sp, #4]
 8003ff4:	9200      	str	r2, [sp, #0]
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	2209      	movs	r2, #9
 8003ffa:	211e      	movs	r1, #30
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f7ff fd44 	bl	8003a8a <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S2_REG,SPI_WRITE, ETH->T8,1);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004008:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800400c:	461a      	mov	r2, r3
 800400e:	2301      	movs	r3, #1
 8004010:	9301      	str	r3, [sp, #4]
 8004012:	9200      	str	r2, [sp, #0]
 8004014:	2301      	movs	r3, #1
 8004016:	2209      	movs	r2, #9
 8004018:	211f      	movs	r1, #31
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7ff fd35 	bl	8003a8a <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S3_REG,SPI_WRITE, ETH->T8,1);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004026:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800402a:	461a      	mov	r2, r3
 800402c:	2301      	movs	r3, #1
 800402e:	9301      	str	r3, [sp, #4]
 8004030:	9200      	str	r2, [sp, #0]
 8004032:	2301      	movs	r3, #1
 8004034:	220d      	movs	r2, #13
 8004036:	211e      	movs	r1, #30
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f7ff fd26 	bl	8003a8a <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S3_REG,SPI_WRITE, ETH->T8,1);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004044:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8004048:	461a      	mov	r2, r3
 800404a:	2301      	movs	r3, #1
 800404c:	9301      	str	r3, [sp, #4]
 800404e:	9200      	str	r2, [sp, #0]
 8004050:	2301      	movs	r3, #1
 8004052:	220d      	movs	r2, #13
 8004054:	211f      	movs	r1, #31
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7ff fd17 	bl	8003a8a <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S4_REG,SPI_WRITE, ETH->T8,1);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004062:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8004066:	461a      	mov	r2, r3
 8004068:	2301      	movs	r3, #1
 800406a:	9301      	str	r3, [sp, #4]
 800406c:	9200      	str	r2, [sp, #0]
 800406e:	2301      	movs	r3, #1
 8004070:	2211      	movs	r2, #17
 8004072:	211e      	movs	r1, #30
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f7ff fd08 	bl	8003a8a <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S4_REG,SPI_WRITE, ETH->T8,1);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004080:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8004084:	461a      	mov	r2, r3
 8004086:	2301      	movs	r3, #1
 8004088:	9301      	str	r3, [sp, #4]
 800408a:	9200      	str	r2, [sp, #0]
 800408c:	2301      	movs	r3, #1
 800408e:	2211      	movs	r2, #17
 8004090:	211f      	movs	r1, #31
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7ff fcf9 	bl	8003a8a <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S5_REG,SPI_WRITE, ETH->T8,1);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800409e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80040a2:	461a      	mov	r2, r3
 80040a4:	2301      	movs	r3, #1
 80040a6:	9301      	str	r3, [sp, #4]
 80040a8:	9200      	str	r2, [sp, #0]
 80040aa:	2301      	movs	r3, #1
 80040ac:	2215      	movs	r2, #21
 80040ae:	211e      	movs	r1, #30
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f7ff fcea 	bl	8003a8a <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S5_REG,SPI_WRITE, ETH->T8,1);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040bc:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80040c0:	461a      	mov	r2, r3
 80040c2:	2301      	movs	r3, #1
 80040c4:	9301      	str	r3, [sp, #4]
 80040c6:	9200      	str	r2, [sp, #0]
 80040c8:	2301      	movs	r3, #1
 80040ca:	2215      	movs	r2, #21
 80040cc:	211f      	movs	r1, #31
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7ff fcdb 	bl	8003a8a <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S6_REG,SPI_WRITE, ETH->T8,1);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040da:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80040de:	461a      	mov	r2, r3
 80040e0:	2301      	movs	r3, #1
 80040e2:	9301      	str	r3, [sp, #4]
 80040e4:	9200      	str	r2, [sp, #0]
 80040e6:	2301      	movs	r3, #1
 80040e8:	2219      	movs	r2, #25
 80040ea:	211e      	movs	r1, #30
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f7ff fccc 	bl	8003a8a <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S6_REG,SPI_WRITE, ETH->T8,1);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040f8:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80040fc:	461a      	mov	r2, r3
 80040fe:	2301      	movs	r3, #1
 8004100:	9301      	str	r3, [sp, #4]
 8004102:	9200      	str	r2, [sp, #0]
 8004104:	2301      	movs	r3, #1
 8004106:	2219      	movs	r2, #25
 8004108:	211f      	movs	r1, #31
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f7ff fcbd 	bl	8003a8a <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S7_REG,SPI_WRITE, ETH->T8,1);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004116:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800411a:	461a      	mov	r2, r3
 800411c:	2301      	movs	r3, #1
 800411e:	9301      	str	r3, [sp, #4]
 8004120:	9200      	str	r2, [sp, #0]
 8004122:	2301      	movs	r3, #1
 8004124:	221d      	movs	r2, #29
 8004126:	211e      	movs	r1, #30
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f7ff fcae 	bl	8003a8a <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S7_REG,SPI_WRITE, ETH->T8,1);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004134:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8004138:	461a      	mov	r2, r3
 800413a:	2301      	movs	r3, #1
 800413c:	9301      	str	r3, [sp, #4]
 800413e:	9200      	str	r2, [sp, #0]
 8004140:	2301      	movs	r3, #1
 8004142:	221d      	movs	r2, #29
 8004144:	211f      	movs	r1, #31
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f7ff fc9f 	bl	8003a8a <SPI_ETH_REG>
	 ETH->T8=0x00;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004152:	2200      	movs	r2, #0
 8004154:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 SPI_ETH_REG(ETH, S_TX_WR,S0_REG,SPI_WRITE, ETH->T8,1);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800415e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8004162:	461a      	mov	r2, r3
 8004164:	2301      	movs	r3, #1
 8004166:	9301      	str	r3, [sp, #4]
 8004168:	9200      	str	r2, [sp, #0]
 800416a:	2301      	movs	r3, #1
 800416c:	2201      	movs	r2, #1
 800416e:	2124      	movs	r1, #36	; 0x24
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f7ff fc8a 	bl	8003a8a <SPI_ETH_REG>
	 SPI_ETH_REG(ETH, S_TX_WR+1,S0_REG,SPI_WRITE, ETH->T8,1);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800417c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8004180:	461a      	mov	r2, r3
 8004182:	2301      	movs	r3, #1
 8004184:	9301      	str	r3, [sp, #4]
 8004186:	9200      	str	r2, [sp, #0]
 8004188:	2301      	movs	r3, #1
 800418a:	2201      	movs	r2, #1
 800418c:	2125      	movs	r1, #37	; 0x25
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f7ff fc7b 	bl	8003a8a <SPI_ETH_REG>
	 uint16_t b=0;
 8004194:	2300      	movs	r3, #0
 8004196:	81fb      	strh	r3, [r7, #14]
	 uint8_t spi_Data[2];
	 b = SPI_ETH_REG(ETH, S_TX_WR, S0_REG ,SPI_READ, spi_Data,2);
 8004198:	2302      	movs	r3, #2
 800419a:	9301      	str	r3, [sp, #4]
 800419c:	f107 030c 	add.w	r3, r7, #12
 80041a0:	9300      	str	r3, [sp, #0]
 80041a2:	2300      	movs	r3, #0
 80041a4:	2201      	movs	r2, #1
 80041a6:	2124      	movs	r1, #36	; 0x24
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f7ff fc6e 	bl	8003a8a <SPI_ETH_REG>
 80041ae:	4603      	mov	r3, r0
 80041b0:	81fb      	strh	r3, [r7, #14]
	 //ITM0_Write("\r\nETH-W5500-SOCK0 TCP SET\r\n",strlen("\r\nETH-W5500-SOCK0 TCP SET"));									//same for server and client
	 SPI_ETH_REG(ETH, S_PORT, S0_REG,SPI_WRITE, ETH->S_PORT,2);									//same for server and client
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80041b8:	3302      	adds	r3, #2
 80041ba:	2202      	movs	r2, #2
 80041bc:	9201      	str	r2, [sp, #4]
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	2301      	movs	r3, #1
 80041c2:	2201      	movs	r2, #1
 80041c4:	2104      	movs	r1, #4
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f7ff fc5f 	bl	8003a8a <SPI_ETH_REG>
	 //HAL_Delay(100);
	 ITM0_Write("\r\nETH-W5500-SOCK0 TCP REMOTE IP TO CONNECT\r\n",strlen("\r\nETH-W5500-SOCK0 TCP REMOTE IP TO CONNECT\r\n"));									// client
 80041cc:	212c      	movs	r1, #44	; 0x2c
 80041ce:	4804      	ldr	r0, [pc, #16]	; (80041e0 <eth_socket_init+0x28c>)
 80041d0:	f7fc fe04 	bl	8000ddc <ITM0_Write>


}
 80041d4:	bf00      	nop
 80041d6:	4618      	mov	r0, r3
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	080053dc 	.word	0x080053dc

080041e4 <eth_rd_SOCKET_STAT>:

uint8_t eth_rd_SOCKET_STAT(struct  W5500_SPI * y, uint8_t socket)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	460b      	mov	r3, r1
 80041ee:	70fb      	strb	r3, [r7, #3]
			y->TX[0]= 0x00; 				//High Address Phase Hardcoded Stat Register
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	771a      	strb	r2, [r3, #28]
			y->TX[1]= 0x03;					//Low Address Phase Mode
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2203      	movs	r2, #3
 80041fa:	775a      	strb	r2, [r3, #29]
			y->TX[2]= ((socket)<<3)|0x00;	   //Control Phase address + R/W + OP Mode
 80041fc:	78fb      	ldrb	r3, [r7, #3]
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	b2da      	uxtb	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	779a      	strb	r2, [r3, #30]
			SPI_ETH(y);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f7ff fc17 	bl	8003a3a <SPI_ETH>
			return(y->RX[3]);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23

}
 8004212:	4618      	mov	r0, r3
 8004214:	3708      	adds	r7, #8
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <eth_rd_SOCKET_CMD>:

uint8_t eth_rd_SOCKET_CMD(struct  W5500_SPI * y, uint8_t socket)
{
 800421a:	b580      	push	{r7, lr}
 800421c:	b082      	sub	sp, #8
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
 8004222:	460b      	mov	r3, r1
 8004224:	70fb      	strb	r3, [r7, #3]
			y->TX[0]= 0x00; 				//High Address Phase Hardcoded Command Register
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	771a      	strb	r2, [r3, #28]
			y->TX[1]= 0x01;					//Low Address Phase Mode
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	775a      	strb	r2, [r3, #29]
			y->TX[2]= ((socket)<<3)|0x00;	   //Control Phase address + R/W + OP Mode
 8004232:	78fb      	ldrb	r3, [r7, #3]
 8004234:	00db      	lsls	r3, r3, #3
 8004236:	b2da      	uxtb	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	779a      	strb	r2, [r3, #30]
			SPI_ETH(y);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f7ff fbfc 	bl	8003a3a <SPI_ETH>
			return(y->RX[3]);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23

}
 8004248:	4618      	mov	r0, r3
 800424a:	3708      	adds	r7, #8
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <eth_rd_SOCKET_DATA>:

uint16_t  eth_rd_SOCKET_DATA(struct W5500_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t sizedata)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b08c      	sub	sp, #48	; 0x30
 8004254:	af02      	add	r7, sp, #8
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	607a      	str	r2, [r7, #4]
 800425a:	461a      	mov	r2, r3
 800425c:	460b      	mov	r3, r1
 800425e:	72fb      	strb	r3, [r7, #11]
 8004260:	4613      	mov	r3, r2
 8004262:	813b      	strh	r3, [r7, #8]
	uint16_t S_bf_rcv_offset=0,
 8004264:	2300      	movs	r3, #0
 8004266:	84fb      	strh	r3, [r7, #38]	; 0x26
			 left_size=0,
 8004268:	2300      	movs	r3, #0
 800426a:	84bb      	strh	r3, [r7, #36]	; 0x24
			 upper_size=0,
 800426c:	2300      	movs	r3, #0
 800426e:	847b      	strh	r3, [r7, #34]	; 0x22
			 destination_addr=0,
 8004270:	2300      	movs	r3, #0
 8004272:	843b      	strh	r3, [r7, #32]
			 S_RX_RD=0,
 8004274:	2300      	movs	r3, #0
 8004276:	83fb      	strh	r3, [r7, #30]
			 S_get_offset=0,
 8004278:	2300      	movs	r3, #0
 800427a:	83bb      	strh	r3, [r7, #28]
			 S_get_start_address=0,
 800427c:	2300      	movs	r3, #0
 800427e:	837b      	strh	r3, [r7, #26]
			 S_mem_pointer=0,
 8004280:	2300      	movs	r3, #0
 8004282:	833b      	strh	r3, [r7, #24]
			 RX_MASK=0,
 8004284:	2300      	movs	r3, #0
 8004286:	82fb      	strh	r3, [r7, #22]
			 RX_BASE=0;
 8004288:	2300      	movs	r3, #0
 800428a:	82bb      	strh	r3, [r7, #20]
			RX_BASE=ETH->gS3_RX_BASE;
		}
		break;*/
		default :
		{
			RX_MASK=ETH->gS_RX_MASK;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004292:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004296:	82fb      	strh	r3, [r7, #22]
			RX_BASE=ETH->gS_RX_BASE;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800429e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042a2:	82bb      	strh	r3, [r7, #20]
		}
		break;
 80042a4:	bf00      	nop
	}

	S_RX_RD = SPI_ETH_REG(ETH, S_RX_RD0 ,S0_REG ,SPI_READ, spi_Data,2);//S_RX_RD = SPI_ETH_REG(ETH, S_RX_RD_ADDR_BASEHH + socket ,S_RX_RD_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 80042a6:	2302      	movs	r3, #2
 80042a8:	9301      	str	r3, [sp, #4]
 80042aa:	f107 0310 	add.w	r3, r7, #16
 80042ae:	9300      	str	r3, [sp, #0]
 80042b0:	2300      	movs	r3, #0
 80042b2:	2201      	movs	r2, #1
 80042b4:	2128      	movs	r1, #40	; 0x28
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	f7ff fbe7 	bl	8003a8a <SPI_ETH_REG>
 80042bc:	4603      	mov	r3, r0
 80042be:	83fb      	strh	r3, [r7, #30]
	S_get_offset = S_RX_RD & RX_MASK;
 80042c0:	8bfa      	ldrh	r2, [r7, #30]
 80042c2:	8afb      	ldrh	r3, [r7, #22]
 80042c4:	4013      	ands	r3, r2
 80042c6:	83bb      	strh	r3, [r7, #28]
	S_get_start_address  = RX_BASE + S_get_offset;
 80042c8:	8aba      	ldrh	r2, [r7, #20]
 80042ca:	8bbb      	ldrh	r3, [r7, #28]
 80042cc:	4413      	add	r3, r2
 80042ce:	837b      	strh	r3, [r7, #26]
	if((S_get_offset  + sizedata )>(RX_MASK + 1))
 80042d0:	8bba      	ldrh	r2, [r7, #28]
 80042d2:	893b      	ldrh	r3, [r7, #8]
 80042d4:	441a      	add	r2, r3
 80042d6:	8afb      	ldrh	r3, [r7, #22]
 80042d8:	3301      	adds	r3, #1
 80042da:	429a      	cmp	r2, r3
 80042dc:	dd30      	ble.n	8004340 <eth_rd_SOCKET_DATA+0xf0>
		{
			upper_size = (RX_MASK + 1) - S_get_offset ;
 80042de:	8afa      	ldrh	r2, [r7, #22]
 80042e0:	8bbb      	ldrh	r3, [r7, #28]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	3301      	adds	r3, #1
 80042e8:	847b      	strh	r3, [r7, #34]	; 0x22
			SPI_ETH_RD_RCV_REG_16(ETH , S_get_start_address , ETH->data , S_bf_rcv_offset, upper_size, socket);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80042f0:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80042f2:	8b79      	ldrh	r1, [r7, #26]
 80042f4:	7afb      	ldrb	r3, [r7, #11]
 80042f6:	9301      	str	r3, [sp, #4]
 80042f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80042fa:	9300      	str	r3, [sp, #0]
 80042fc:	4603      	mov	r3, r0
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	f7ff fc90 	bl	8003c24 <SPI_ETH_RD_RCV_REG_16>
			destination_addr+=upper_size;
 8004304:	8c3a      	ldrh	r2, [r7, #32]
 8004306:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004308:	4413      	add	r3, r2
 800430a:	843b      	strh	r3, [r7, #32]
			left_size=sizedata-upper_size;
 800430c:	893a      	ldrh	r2, [r7, #8]
 800430e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	84bb      	strh	r3, [r7, #36]	; 0x24
			S_bf_rcv_offset=upper_size;
 8004314:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004316:	84fb      	strh	r3, [r7, #38]	; 0x26
			SPI_ETH_RD_RCV_REG_16(ETH , RX_BASE , ETH->data , S_bf_rcv_offset, left_size, socket);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800431e:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8004320:	8ab9      	ldrh	r1, [r7, #20]
 8004322:	7afb      	ldrb	r3, [r7, #11]
 8004324:	9301      	str	r3, [sp, #4]
 8004326:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004328:	9300      	str	r3, [sp, #0]
 800432a:	4603      	mov	r3, r0
 800432c:	68f8      	ldr	r0, [r7, #12]
 800432e:	f7ff fc79 	bl	8003c24 <SPI_ETH_RD_RCV_REG_16>
			*mem_pointer=S_RX_RD + sizedata;
 8004332:	8bfa      	ldrh	r2, [r7, #30]
 8004334:	893b      	ldrh	r3, [r7, #8]
 8004336:	4413      	add	r3, r2
 8004338:	b29a      	uxth	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	801a      	strh	r2, [r3, #0]
 800433e:	e012      	b.n	8004366 <eth_rd_SOCKET_DATA+0x116>
		}
		else
			{
				SPI_ETH_RD_RCV_REG_16(ETH , S_get_start_address , ETH->data , S_bf_rcv_offset, sizedata, socket);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8004346:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8004348:	8b79      	ldrh	r1, [r7, #26]
 800434a:	7afb      	ldrb	r3, [r7, #11]
 800434c:	9301      	str	r3, [sp, #4]
 800434e:	893b      	ldrh	r3, [r7, #8]
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	4603      	mov	r3, r0
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f7ff fc65 	bl	8003c24 <SPI_ETH_RD_RCV_REG_16>
				*mem_pointer=S_RX_RD + sizedata;
 800435a:	8bfa      	ldrh	r2, [r7, #30]
 800435c:	893b      	ldrh	r3, [r7, #8]
 800435e:	4413      	add	r3, r2
 8004360:	b29a      	uxth	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	801a      	strh	r2, [r3, #0]
			}
	return(mem_pointer);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	b29b      	uxth	r3, r3
}
 800436a:	4618      	mov	r0, r3
 800436c:	3728      	adds	r7, #40	; 0x28
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}

08004372 <eth_wr_SOCKET_DATA>:

uint16_t eth_wr_SOCKET_DATA(struct W5500_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t send_size)
{
 8004372:	b580      	push	{r7, lr}
 8004374:	b08c      	sub	sp, #48	; 0x30
 8004376:	af02      	add	r7, sp, #8
 8004378:	60f8      	str	r0, [r7, #12]
 800437a:	607a      	str	r2, [r7, #4]
 800437c:	461a      	mov	r2, r3
 800437e:	460b      	mov	r3, r1
 8004380:	72fb      	strb	r3, [r7, #11]
 8004382:	4613      	mov	r3, r2
 8004384:	813b      	strh	r3, [r7, #8]
	uint16_t S_bf_rcv_offset=0,
 8004386:	2300      	movs	r3, #0
 8004388:	84bb      	strh	r3, [r7, #36]	; 0x24
			 left_size=0,
 800438a:	2300      	movs	r3, #0
 800438c:	847b      	strh	r3, [r7, #34]	; 0x22
			 upper_size=0,
 800438e:	2300      	movs	r3, #0
 8004390:	843b      	strh	r3, [r7, #32]
			 source_addr=0,
 8004392:	2300      	movs	r3, #0
 8004394:	83fb      	strh	r3, [r7, #30]
			 Sn_TX_WR=0,
 8004396:	2300      	movs	r3, #0
 8004398:	83bb      	strh	r3, [r7, #28]
			 get_offset=0,
 800439a:	2300      	movs	r3, #0
 800439c:	837b      	strh	r3, [r7, #26]
			 get_free_size=0,
 800439e:	2300      	movs	r3, #0
 80043a0:	84fb      	strh	r3, [r7, #38]	; 0x26
			 get_start_address=0,
 80043a2:	2300      	movs	r3, #0
 80043a4:	833b      	strh	r3, [r7, #24]
			 S_mem_pointer=0,
 80043a6:	2300      	movs	r3, #0
 80043a8:	82fb      	strh	r3, [r7, #22]
			 TX_MASK=0,
 80043aa:	2300      	movs	r3, #0
 80043ac:	82bb      	strh	r3, [r7, #20]
			 TX_BASE=0;
 80043ae:	2300      	movs	r3, #0
 80043b0:	827b      	strh	r3, [r7, #18]
			TX_BASE=ETH->gS3_TX_BASE;
		}
		break;*/
		default :
		{
			TX_MASK=ETH->gS_TX_MASK;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80043bc:	82bb      	strh	r3, [r7, #20]
			TX_BASE=ETH->gS_TX_BASE;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043c4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80043c8:	827b      	strh	r3, [r7, #18]
		}
		break;
 80043ca:	bf00      	nop
	}

	while(get_free_size<send_size)
 80043cc:	e00c      	b.n	80043e8 <eth_wr_SOCKET_DATA+0x76>
			{
				get_free_size=SPI_ETH_REG(ETH, S_TX_FSR, S0_REG ,SPI_READ, spi_Data,2);//get_free_size=SPI_ETH_REG(ETH, 0x04 + socket, 0x20 ,SPI_READ, spi_Data,2); //Leo registro S_TX_FSR	=   0x420,
 80043ce:	2302      	movs	r3, #2
 80043d0:	9301      	str	r3, [sp, #4]
 80043d2:	f107 0310 	add.w	r3, r7, #16
 80043d6:	9300      	str	r3, [sp, #0]
 80043d8:	2300      	movs	r3, #0
 80043da:	2201      	movs	r2, #1
 80043dc:	2120      	movs	r1, #32
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f7ff fb53 	bl	8003a8a <SPI_ETH_REG>
 80043e4:	4603      	mov	r3, r0
 80043e6:	84fb      	strh	r3, [r7, #38]	; 0x26
	while(get_free_size<send_size)
 80043e8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80043ea:	893b      	ldrh	r3, [r7, #8]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d3ee      	bcc.n	80043ce <eth_wr_SOCKET_DATA+0x5c>
			}
				Sn_TX_WR = SPI_ETH_REG(ETH, S_TX_WR, S0_REG ,SPI_READ, spi_Data,2); // S_TX_RD =   0x424,Sn_TX_WR = SPI_ETH_REG(ETH, 0x04 + socket,0x24 ,SPI_READ, spi_Data,2); // S_TX_RD =   0x424,
 80043f0:	2302      	movs	r3, #2
 80043f2:	9301      	str	r3, [sp, #4]
 80043f4:	f107 0310 	add.w	r3, r7, #16
 80043f8:	9300      	str	r3, [sp, #0]
 80043fa:	2300      	movs	r3, #0
 80043fc:	2201      	movs	r2, #1
 80043fe:	2124      	movs	r1, #36	; 0x24
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f7ff fb42 	bl	8003a8a <SPI_ETH_REG>
 8004406:	4603      	mov	r3, r0
 8004408:	83bb      	strh	r3, [r7, #28]
				get_offset= Sn_TX_WR & TX_MASK;
 800440a:	8bba      	ldrh	r2, [r7, #28]
 800440c:	8abb      	ldrh	r3, [r7, #20]
 800440e:	4013      	ands	r3, r2
 8004410:	837b      	strh	r3, [r7, #26]
				get_start_address=TX_BASE + get_offset;
 8004412:	8a7a      	ldrh	r2, [r7, #18]
 8004414:	8b7b      	ldrh	r3, [r7, #26]
 8004416:	4413      	add	r3, r2
 8004418:	833b      	strh	r3, [r7, #24]

				if((get_offset + send_size)>(TX_MASK + 1))
 800441a:	8b7a      	ldrh	r2, [r7, #26]
 800441c:	893b      	ldrh	r3, [r7, #8]
 800441e:	441a      	add	r2, r3
 8004420:	8abb      	ldrh	r3, [r7, #20]
 8004422:	3301      	adds	r3, #1
 8004424:	429a      	cmp	r2, r3
 8004426:	dd30      	ble.n	800448a <eth_wr_SOCKET_DATA+0x118>
					{
						upper_size=( TX_MASK + 1) - get_offset;
 8004428:	8aba      	ldrh	r2, [r7, #20]
 800442a:	8b7b      	ldrh	r3, [r7, #26]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	b29b      	uxth	r3, r3
 8004430:	3301      	adds	r3, #1
 8004432:	843b      	strh	r3, [r7, #32]
						SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S_bf_rcv_offset, upper_size,socket);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800443a:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 800443c:	8b39      	ldrh	r1, [r7, #24]
 800443e:	7afb      	ldrb	r3, [r7, #11]
 8004440:	9301      	str	r3, [sp, #4]
 8004442:	8c3b      	ldrh	r3, [r7, #32]
 8004444:	9300      	str	r3, [sp, #0]
 8004446:	4603      	mov	r3, r0
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	f7ff fc2b 	bl	8003ca4 <SPI_ETH_WR_TX_REG_16>
						source_addr+=upper_size;
 800444e:	8bfa      	ldrh	r2, [r7, #30]
 8004450:	8c3b      	ldrh	r3, [r7, #32]
 8004452:	4413      	add	r3, r2
 8004454:	83fb      	strh	r3, [r7, #30]
						left_size=send_size-upper_size;
 8004456:	893a      	ldrh	r2, [r7, #8]
 8004458:	8c3b      	ldrh	r3, [r7, #32]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	847b      	strh	r3, [r7, #34]	; 0x22
						S_bf_rcv_offset=upper_size;
 800445e:	8c3b      	ldrh	r3, [r7, #32]
 8004460:	84bb      	strh	r3, [r7, #36]	; 0x24
						SPI_ETH_WR_TX_REG_16(ETH , TX_BASE , ETH->data , S_bf_rcv_offset, left_size, socket);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8004468:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 800446a:	8a79      	ldrh	r1, [r7, #18]
 800446c:	7afb      	ldrb	r3, [r7, #11]
 800446e:	9301      	str	r3, [sp, #4]
 8004470:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	4603      	mov	r3, r0
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f7ff fc14 	bl	8003ca4 <SPI_ETH_WR_TX_REG_16>
						*mem_pointer=Sn_TX_WR + send_size;
 800447c:	8bba      	ldrh	r2, [r7, #28]
 800447e:	893b      	ldrh	r3, [r7, #8]
 8004480:	4413      	add	r3, r2
 8004482:	b29a      	uxth	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	801a      	strh	r2, [r3, #0]
 8004488:	e012      	b.n	80044b0 <eth_wr_SOCKET_DATA+0x13e>
					}
				else
					{
					SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S_bf_rcv_offset, send_size, socket);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8004490:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8004492:	8b39      	ldrh	r1, [r7, #24]
 8004494:	7afb      	ldrb	r3, [r7, #11]
 8004496:	9301      	str	r3, [sp, #4]
 8004498:	893b      	ldrh	r3, [r7, #8]
 800449a:	9300      	str	r3, [sp, #0]
 800449c:	4603      	mov	r3, r0
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f7ff fc00 	bl	8003ca4 <SPI_ETH_WR_TX_REG_16>
					*mem_pointer=Sn_TX_WR + send_size;
 80044a4:	8bba      	ldrh	r2, [r7, #28]
 80044a6:	893b      	ldrh	r3, [r7, #8]
 80044a8:	4413      	add	r3, r2
 80044aa:	b29a      	uxth	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	801a      	strh	r2, [r3, #0]
					}

}
 80044b0:	bf00      	nop
 80044b2:	4618      	mov	r0, r3
 80044b4:	3728      	adds	r7, #40	; 0x28
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <SPI_ETH_SNIFF>:

uint8_t SPI_ETH_SNIFF(struct W5500_SPY * Y,struct W5500_SPI * X)
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b084      	sub	sp, #16
 80044be:	af02      	add	r7, sp, #8
 80044c0:	6078      	str	r0, [r7, #4]
 80044c2:	6039      	str	r1, [r7, #0]
	Y->MR=SPI_ETH_REG(X, 0 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80044ca:	3318      	adds	r3, #24
 80044cc:	2201      	movs	r2, #1
 80044ce:	9201      	str	r2, [sp, #4]
 80044d0:	9300      	str	r3, [sp, #0]
 80044d2:	2300      	movs	r3, #0
 80044d4:	2200      	movs	r2, #0
 80044d6:	2100      	movs	r1, #0
 80044d8:	6838      	ldr	r0, [r7, #0]
 80044da:	f7ff fad6 	bl	8003a8a <SPI_ETH_REG>
 80044de:	4603      	mov	r3, r0
 80044e0:	b2da      	uxtb	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	701a      	strb	r2, [r3, #0]

	Y->GAR[0]=SPI_ETH_REG(X, 1 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80044ec:	3318      	adds	r3, #24
 80044ee:	2201      	movs	r2, #1
 80044f0:	9201      	str	r2, [sp, #4]
 80044f2:	9300      	str	r3, [sp, #0]
 80044f4:	2300      	movs	r3, #0
 80044f6:	2200      	movs	r2, #0
 80044f8:	2101      	movs	r1, #1
 80044fa:	6838      	ldr	r0, [r7, #0]
 80044fc:	f7ff fac5 	bl	8003a8a <SPI_ETH_REG>
 8004500:	4603      	mov	r3, r0
 8004502:	b2da      	uxtb	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	705a      	strb	r2, [r3, #1]
	Y->GAR[1]=SPI_ETH_REG(X, 2 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800450e:	3318      	adds	r3, #24
 8004510:	2201      	movs	r2, #1
 8004512:	9201      	str	r2, [sp, #4]
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	2300      	movs	r3, #0
 8004518:	2200      	movs	r2, #0
 800451a:	2102      	movs	r1, #2
 800451c:	6838      	ldr	r0, [r7, #0]
 800451e:	f7ff fab4 	bl	8003a8a <SPI_ETH_REG>
 8004522:	4603      	mov	r3, r0
 8004524:	b2da      	uxtb	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	709a      	strb	r2, [r3, #2]
	Y->GAR[2]=SPI_ETH_REG(X, 3 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004530:	3318      	adds	r3, #24
 8004532:	2201      	movs	r2, #1
 8004534:	9201      	str	r2, [sp, #4]
 8004536:	9300      	str	r3, [sp, #0]
 8004538:	2300      	movs	r3, #0
 800453a:	2200      	movs	r2, #0
 800453c:	2103      	movs	r1, #3
 800453e:	6838      	ldr	r0, [r7, #0]
 8004540:	f7ff faa3 	bl	8003a8a <SPI_ETH_REG>
 8004544:	4603      	mov	r3, r0
 8004546:	b2da      	uxtb	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	70da      	strb	r2, [r3, #3]
	Y->GAR[3]=SPI_ETH_REG(X, 4 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004552:	3318      	adds	r3, #24
 8004554:	2201      	movs	r2, #1
 8004556:	9201      	str	r2, [sp, #4]
 8004558:	9300      	str	r3, [sp, #0]
 800455a:	2300      	movs	r3, #0
 800455c:	2200      	movs	r2, #0
 800455e:	2104      	movs	r1, #4
 8004560:	6838      	ldr	r0, [r7, #0]
 8004562:	f7ff fa92 	bl	8003a8a <SPI_ETH_REG>
 8004566:	4603      	mov	r3, r0
 8004568:	b2da      	uxtb	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	711a      	strb	r2, [r3, #4]

	Y->SUBR[0]=SPI_ETH_REG(X, 5 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004574:	3318      	adds	r3, #24
 8004576:	2201      	movs	r2, #1
 8004578:	9201      	str	r2, [sp, #4]
 800457a:	9300      	str	r3, [sp, #0]
 800457c:	2300      	movs	r3, #0
 800457e:	2200      	movs	r2, #0
 8004580:	2105      	movs	r1, #5
 8004582:	6838      	ldr	r0, [r7, #0]
 8004584:	f7ff fa81 	bl	8003a8a <SPI_ETH_REG>
 8004588:	4603      	mov	r3, r0
 800458a:	b2da      	uxtb	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	715a      	strb	r2, [r3, #5]
	Y->SUBR[1]=SPI_ETH_REG(X, 6 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004596:	3318      	adds	r3, #24
 8004598:	2201      	movs	r2, #1
 800459a:	9201      	str	r2, [sp, #4]
 800459c:	9300      	str	r3, [sp, #0]
 800459e:	2300      	movs	r3, #0
 80045a0:	2200      	movs	r2, #0
 80045a2:	2106      	movs	r1, #6
 80045a4:	6838      	ldr	r0, [r7, #0]
 80045a6:	f7ff fa70 	bl	8003a8a <SPI_ETH_REG>
 80045aa:	4603      	mov	r3, r0
 80045ac:	b2da      	uxtb	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	719a      	strb	r2, [r3, #6]
	Y->SUBR[2]=SPI_ETH_REG(X, 7 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80045b8:	3318      	adds	r3, #24
 80045ba:	2201      	movs	r2, #1
 80045bc:	9201      	str	r2, [sp, #4]
 80045be:	9300      	str	r3, [sp, #0]
 80045c0:	2300      	movs	r3, #0
 80045c2:	2200      	movs	r2, #0
 80045c4:	2107      	movs	r1, #7
 80045c6:	6838      	ldr	r0, [r7, #0]
 80045c8:	f7ff fa5f 	bl	8003a8a <SPI_ETH_REG>
 80045cc:	4603      	mov	r3, r0
 80045ce:	b2da      	uxtb	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	71da      	strb	r2, [r3, #7]
	Y->SUBR[3]=SPI_ETH_REG(X, 8 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80045da:	3318      	adds	r3, #24
 80045dc:	2201      	movs	r2, #1
 80045de:	9201      	str	r2, [sp, #4]
 80045e0:	9300      	str	r3, [sp, #0]
 80045e2:	2300      	movs	r3, #0
 80045e4:	2200      	movs	r2, #0
 80045e6:	2108      	movs	r1, #8
 80045e8:	6838      	ldr	r0, [r7, #0]
 80045ea:	f7ff fa4e 	bl	8003a8a <SPI_ETH_REG>
 80045ee:	4603      	mov	r3, r0
 80045f0:	b2da      	uxtb	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	721a      	strb	r2, [r3, #8]

	Y->SHAR[0]=SPI_ETH_REG(X, 9 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80045fc:	3318      	adds	r3, #24
 80045fe:	2201      	movs	r2, #1
 8004600:	9201      	str	r2, [sp, #4]
 8004602:	9300      	str	r3, [sp, #0]
 8004604:	2300      	movs	r3, #0
 8004606:	2200      	movs	r2, #0
 8004608:	2109      	movs	r1, #9
 800460a:	6838      	ldr	r0, [r7, #0]
 800460c:	f7ff fa3d 	bl	8003a8a <SPI_ETH_REG>
 8004610:	4603      	mov	r3, r0
 8004612:	b2da      	uxtb	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	725a      	strb	r2, [r3, #9]
	Y->SHAR[1]=SPI_ETH_REG(X, 10 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800461e:	3318      	adds	r3, #24
 8004620:	2201      	movs	r2, #1
 8004622:	9201      	str	r2, [sp, #4]
 8004624:	9300      	str	r3, [sp, #0]
 8004626:	2300      	movs	r3, #0
 8004628:	2200      	movs	r2, #0
 800462a:	210a      	movs	r1, #10
 800462c:	6838      	ldr	r0, [r7, #0]
 800462e:	f7ff fa2c 	bl	8003a8a <SPI_ETH_REG>
 8004632:	4603      	mov	r3, r0
 8004634:	b2da      	uxtb	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	729a      	strb	r2, [r3, #10]
	Y->SHAR[2]=SPI_ETH_REG(X, 11 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004640:	3318      	adds	r3, #24
 8004642:	2201      	movs	r2, #1
 8004644:	9201      	str	r2, [sp, #4]
 8004646:	9300      	str	r3, [sp, #0]
 8004648:	2300      	movs	r3, #0
 800464a:	2200      	movs	r2, #0
 800464c:	210b      	movs	r1, #11
 800464e:	6838      	ldr	r0, [r7, #0]
 8004650:	f7ff fa1b 	bl	8003a8a <SPI_ETH_REG>
 8004654:	4603      	mov	r3, r0
 8004656:	b2da      	uxtb	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	72da      	strb	r2, [r3, #11]
	Y->SHAR[3]=SPI_ETH_REG(X, 12 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004662:	3318      	adds	r3, #24
 8004664:	2201      	movs	r2, #1
 8004666:	9201      	str	r2, [sp, #4]
 8004668:	9300      	str	r3, [sp, #0]
 800466a:	2300      	movs	r3, #0
 800466c:	2200      	movs	r2, #0
 800466e:	210c      	movs	r1, #12
 8004670:	6838      	ldr	r0, [r7, #0]
 8004672:	f7ff fa0a 	bl	8003a8a <SPI_ETH_REG>
 8004676:	4603      	mov	r3, r0
 8004678:	b2da      	uxtb	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	731a      	strb	r2, [r3, #12]
	Y->SHAR[4]=SPI_ETH_REG(X, 13 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004684:	3318      	adds	r3, #24
 8004686:	2201      	movs	r2, #1
 8004688:	9201      	str	r2, [sp, #4]
 800468a:	9300      	str	r3, [sp, #0]
 800468c:	2300      	movs	r3, #0
 800468e:	2200      	movs	r2, #0
 8004690:	210d      	movs	r1, #13
 8004692:	6838      	ldr	r0, [r7, #0]
 8004694:	f7ff f9f9 	bl	8003a8a <SPI_ETH_REG>
 8004698:	4603      	mov	r3, r0
 800469a:	b2da      	uxtb	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	735a      	strb	r2, [r3, #13]
	Y->SHAR[5]=SPI_ETH_REG(X, 14 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80046a6:	3318      	adds	r3, #24
 80046a8:	2201      	movs	r2, #1
 80046aa:	9201      	str	r2, [sp, #4]
 80046ac:	9300      	str	r3, [sp, #0]
 80046ae:	2300      	movs	r3, #0
 80046b0:	2200      	movs	r2, #0
 80046b2:	210e      	movs	r1, #14
 80046b4:	6838      	ldr	r0, [r7, #0]
 80046b6:	f7ff f9e8 	bl	8003a8a <SPI_ETH_REG>
 80046ba:	4603      	mov	r3, r0
 80046bc:	b2da      	uxtb	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	739a      	strb	r2, [r3, #14]

	Y->SIPR[0]=SPI_ETH_REG(X, 15 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80046c8:	3318      	adds	r3, #24
 80046ca:	2201      	movs	r2, #1
 80046cc:	9201      	str	r2, [sp, #4]
 80046ce:	9300      	str	r3, [sp, #0]
 80046d0:	2300      	movs	r3, #0
 80046d2:	2200      	movs	r2, #0
 80046d4:	210f      	movs	r1, #15
 80046d6:	6838      	ldr	r0, [r7, #0]
 80046d8:	f7ff f9d7 	bl	8003a8a <SPI_ETH_REG>
 80046dc:	4603      	mov	r3, r0
 80046de:	b2da      	uxtb	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	73da      	strb	r2, [r3, #15]
	Y->SIPR[1]=SPI_ETH_REG(X, 16 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80046ea:	3318      	adds	r3, #24
 80046ec:	2201      	movs	r2, #1
 80046ee:	9201      	str	r2, [sp, #4]
 80046f0:	9300      	str	r3, [sp, #0]
 80046f2:	2300      	movs	r3, #0
 80046f4:	2200      	movs	r2, #0
 80046f6:	2110      	movs	r1, #16
 80046f8:	6838      	ldr	r0, [r7, #0]
 80046fa:	f7ff f9c6 	bl	8003a8a <SPI_ETH_REG>
 80046fe:	4603      	mov	r3, r0
 8004700:	b2da      	uxtb	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	741a      	strb	r2, [r3, #16]
	Y->SIPR[2]=SPI_ETH_REG(X, 17 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800470c:	3318      	adds	r3, #24
 800470e:	2201      	movs	r2, #1
 8004710:	9201      	str	r2, [sp, #4]
 8004712:	9300      	str	r3, [sp, #0]
 8004714:	2300      	movs	r3, #0
 8004716:	2200      	movs	r2, #0
 8004718:	2111      	movs	r1, #17
 800471a:	6838      	ldr	r0, [r7, #0]
 800471c:	f7ff f9b5 	bl	8003a8a <SPI_ETH_REG>
 8004720:	4603      	mov	r3, r0
 8004722:	b2da      	uxtb	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	745a      	strb	r2, [r3, #17]
	Y->SIPR[3]=SPI_ETH_REG(X, 18 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800472e:	3318      	adds	r3, #24
 8004730:	2201      	movs	r2, #1
 8004732:	9201      	str	r2, [sp, #4]
 8004734:	9300      	str	r3, [sp, #0]
 8004736:	2300      	movs	r3, #0
 8004738:	2200      	movs	r2, #0
 800473a:	2112      	movs	r1, #18
 800473c:	6838      	ldr	r0, [r7, #0]
 800473e:	f7ff f9a4 	bl	8003a8a <SPI_ETH_REG>
 8004742:	4603      	mov	r3, r0
 8004744:	b2da      	uxtb	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	749a      	strb	r2, [r3, #18]

	Y->INTLEVEL[0]=SPI_ETH_REG(X, 19 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004750:	3318      	adds	r3, #24
 8004752:	2201      	movs	r2, #1
 8004754:	9201      	str	r2, [sp, #4]
 8004756:	9300      	str	r3, [sp, #0]
 8004758:	2300      	movs	r3, #0
 800475a:	2200      	movs	r2, #0
 800475c:	2113      	movs	r1, #19
 800475e:	6838      	ldr	r0, [r7, #0]
 8004760:	f7ff f993 	bl	8003a8a <SPI_ETH_REG>
 8004764:	4603      	mov	r3, r0
 8004766:	b2da      	uxtb	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	74da      	strb	r2, [r3, #19]
	Y->INTLEVEL[1]=SPI_ETH_REG(X, 20 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004772:	3318      	adds	r3, #24
 8004774:	2201      	movs	r2, #1
 8004776:	9201      	str	r2, [sp, #4]
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	2300      	movs	r3, #0
 800477c:	2200      	movs	r2, #0
 800477e:	2114      	movs	r1, #20
 8004780:	6838      	ldr	r0, [r7, #0]
 8004782:	f7ff f982 	bl	8003a8a <SPI_ETH_REG>
 8004786:	4603      	mov	r3, r0
 8004788:	b2da      	uxtb	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	751a      	strb	r2, [r3, #20]

	Y->IR=SPI_ETH_REG(X, 21 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004794:	3318      	adds	r3, #24
 8004796:	2201      	movs	r2, #1
 8004798:	9201      	str	r2, [sp, #4]
 800479a:	9300      	str	r3, [sp, #0]
 800479c:	2300      	movs	r3, #0
 800479e:	2200      	movs	r2, #0
 80047a0:	2115      	movs	r1, #21
 80047a2:	6838      	ldr	r0, [r7, #0]
 80047a4:	f7ff f971 	bl	8003a8a <SPI_ETH_REG>
 80047a8:	4603      	mov	r3, r0
 80047aa:	b2da      	uxtb	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	755a      	strb	r2, [r3, #21]

	Y->IMR=SPI_ETH_REG(X, 22 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80047b6:	3318      	adds	r3, #24
 80047b8:	2201      	movs	r2, #1
 80047ba:	9201      	str	r2, [sp, #4]
 80047bc:	9300      	str	r3, [sp, #0]
 80047be:	2300      	movs	r3, #0
 80047c0:	2200      	movs	r2, #0
 80047c2:	2116      	movs	r1, #22
 80047c4:	6838      	ldr	r0, [r7, #0]
 80047c6:	f7ff f960 	bl	8003a8a <SPI_ETH_REG>
 80047ca:	4603      	mov	r3, r0
 80047cc:	b2da      	uxtb	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	759a      	strb	r2, [r3, #22]

	Y->SIR=SPI_ETH_REG(X, 23 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80047d8:	3318      	adds	r3, #24
 80047da:	2201      	movs	r2, #1
 80047dc:	9201      	str	r2, [sp, #4]
 80047de:	9300      	str	r3, [sp, #0]
 80047e0:	2300      	movs	r3, #0
 80047e2:	2200      	movs	r2, #0
 80047e4:	2117      	movs	r1, #23
 80047e6:	6838      	ldr	r0, [r7, #0]
 80047e8:	f7ff f94f 	bl	8003a8a <SPI_ETH_REG>
 80047ec:	4603      	mov	r3, r0
 80047ee:	b2da      	uxtb	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	75da      	strb	r2, [r3, #23]

	Y->SIMR=SPI_ETH_REG(X, 24 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80047fa:	3318      	adds	r3, #24
 80047fc:	2201      	movs	r2, #1
 80047fe:	9201      	str	r2, [sp, #4]
 8004800:	9300      	str	r3, [sp, #0]
 8004802:	2300      	movs	r3, #0
 8004804:	2200      	movs	r2, #0
 8004806:	2118      	movs	r1, #24
 8004808:	6838      	ldr	r0, [r7, #0]
 800480a:	f7ff f93e 	bl	8003a8a <SPI_ETH_REG>
 800480e:	4603      	mov	r3, r0
 8004810:	b2da      	uxtb	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	761a      	strb	r2, [r3, #24]

	Y->RTR[0]=SPI_ETH_REG(X, 25 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800481c:	3318      	adds	r3, #24
 800481e:	2201      	movs	r2, #1
 8004820:	9201      	str	r2, [sp, #4]
 8004822:	9300      	str	r3, [sp, #0]
 8004824:	2300      	movs	r3, #0
 8004826:	2200      	movs	r2, #0
 8004828:	2119      	movs	r1, #25
 800482a:	6838      	ldr	r0, [r7, #0]
 800482c:	f7ff f92d 	bl	8003a8a <SPI_ETH_REG>
 8004830:	4603      	mov	r3, r0
 8004832:	b2da      	uxtb	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	765a      	strb	r2, [r3, #25]
	Y->RTR[1]=SPI_ETH_REG(X, 26 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800483e:	3318      	adds	r3, #24
 8004840:	2201      	movs	r2, #1
 8004842:	9201      	str	r2, [sp, #4]
 8004844:	9300      	str	r3, [sp, #0]
 8004846:	2300      	movs	r3, #0
 8004848:	2200      	movs	r2, #0
 800484a:	211a      	movs	r1, #26
 800484c:	6838      	ldr	r0, [r7, #0]
 800484e:	f7ff f91c 	bl	8003a8a <SPI_ETH_REG>
 8004852:	4603      	mov	r3, r0
 8004854:	b2da      	uxtb	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	769a      	strb	r2, [r3, #26]

	Y->RCR=SPI_ETH_REG(X, 27 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004860:	3318      	adds	r3, #24
 8004862:	2201      	movs	r2, #1
 8004864:	9201      	str	r2, [sp, #4]
 8004866:	9300      	str	r3, [sp, #0]
 8004868:	2300      	movs	r3, #0
 800486a:	2200      	movs	r2, #0
 800486c:	211b      	movs	r1, #27
 800486e:	6838      	ldr	r0, [r7, #0]
 8004870:	f7ff f90b 	bl	8003a8a <SPI_ETH_REG>
 8004874:	4603      	mov	r3, r0
 8004876:	b2da      	uxtb	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	76da      	strb	r2, [r3, #27]

	Y->PTIMER=SPI_ETH_REG(X, 28 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004882:	3318      	adds	r3, #24
 8004884:	2201      	movs	r2, #1
 8004886:	9201      	str	r2, [sp, #4]
 8004888:	9300      	str	r3, [sp, #0]
 800488a:	2300      	movs	r3, #0
 800488c:	2200      	movs	r2, #0
 800488e:	211c      	movs	r1, #28
 8004890:	6838      	ldr	r0, [r7, #0]
 8004892:	f7ff f8fa 	bl	8003a8a <SPI_ETH_REG>
 8004896:	4603      	mov	r3, r0
 8004898:	b2da      	uxtb	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	771a      	strb	r2, [r3, #28]

	Y->PMAGIC=SPI_ETH_REG(X, 29 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80048a4:	3318      	adds	r3, #24
 80048a6:	2201      	movs	r2, #1
 80048a8:	9201      	str	r2, [sp, #4]
 80048aa:	9300      	str	r3, [sp, #0]
 80048ac:	2300      	movs	r3, #0
 80048ae:	2200      	movs	r2, #0
 80048b0:	211d      	movs	r1, #29
 80048b2:	6838      	ldr	r0, [r7, #0]
 80048b4:	f7ff f8e9 	bl	8003a8a <SPI_ETH_REG>
 80048b8:	4603      	mov	r3, r0
 80048ba:	b2da      	uxtb	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	775a      	strb	r2, [r3, #29]

	Y->PHAR[0]=SPI_ETH_REG(X, 30 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80048c6:	3318      	adds	r3, #24
 80048c8:	2201      	movs	r2, #1
 80048ca:	9201      	str	r2, [sp, #4]
 80048cc:	9300      	str	r3, [sp, #0]
 80048ce:	2300      	movs	r3, #0
 80048d0:	2200      	movs	r2, #0
 80048d2:	211e      	movs	r1, #30
 80048d4:	6838      	ldr	r0, [r7, #0]
 80048d6:	f7ff f8d8 	bl	8003a8a <SPI_ETH_REG>
 80048da:	4603      	mov	r3, r0
 80048dc:	b2da      	uxtb	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	779a      	strb	r2, [r3, #30]
	Y->PHAR[1]=SPI_ETH_REG(X, 31 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80048e8:	3318      	adds	r3, #24
 80048ea:	2201      	movs	r2, #1
 80048ec:	9201      	str	r2, [sp, #4]
 80048ee:	9300      	str	r3, [sp, #0]
 80048f0:	2300      	movs	r3, #0
 80048f2:	2200      	movs	r2, #0
 80048f4:	211f      	movs	r1, #31
 80048f6:	6838      	ldr	r0, [r7, #0]
 80048f8:	f7ff f8c7 	bl	8003a8a <SPI_ETH_REG>
 80048fc:	4603      	mov	r3, r0
 80048fe:	b2da      	uxtb	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	77da      	strb	r2, [r3, #31]
	Y->PHAR[2]=SPI_ETH_REG(X, 32 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800490a:	3318      	adds	r3, #24
 800490c:	2201      	movs	r2, #1
 800490e:	9201      	str	r2, [sp, #4]
 8004910:	9300      	str	r3, [sp, #0]
 8004912:	2300      	movs	r3, #0
 8004914:	2200      	movs	r2, #0
 8004916:	2120      	movs	r1, #32
 8004918:	6838      	ldr	r0, [r7, #0]
 800491a:	f7ff f8b6 	bl	8003a8a <SPI_ETH_REG>
 800491e:	4603      	mov	r3, r0
 8004920:	b2da      	uxtb	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f883 2020 	strb.w	r2, [r3, #32]
	Y->PHAR[3]=SPI_ETH_REG(X, 33 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800492e:	3318      	adds	r3, #24
 8004930:	2201      	movs	r2, #1
 8004932:	9201      	str	r2, [sp, #4]
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	2300      	movs	r3, #0
 8004938:	2200      	movs	r2, #0
 800493a:	2121      	movs	r1, #33	; 0x21
 800493c:	6838      	ldr	r0, [r7, #0]
 800493e:	f7ff f8a4 	bl	8003a8a <SPI_ETH_REG>
 8004942:	4603      	mov	r3, r0
 8004944:	b2da      	uxtb	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	Y->PHAR[4]=SPI_ETH_REG(X, 34 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004952:	3318      	adds	r3, #24
 8004954:	2201      	movs	r2, #1
 8004956:	9201      	str	r2, [sp, #4]
 8004958:	9300      	str	r3, [sp, #0]
 800495a:	2300      	movs	r3, #0
 800495c:	2200      	movs	r2, #0
 800495e:	2122      	movs	r1, #34	; 0x22
 8004960:	6838      	ldr	r0, [r7, #0]
 8004962:	f7ff f892 	bl	8003a8a <SPI_ETH_REG>
 8004966:	4603      	mov	r3, r0
 8004968:	b2da      	uxtb	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	Y->PHAR[5]=SPI_ETH_REG(X, 35 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004976:	3318      	adds	r3, #24
 8004978:	2201      	movs	r2, #1
 800497a:	9201      	str	r2, [sp, #4]
 800497c:	9300      	str	r3, [sp, #0]
 800497e:	2300      	movs	r3, #0
 8004980:	2200      	movs	r2, #0
 8004982:	2123      	movs	r1, #35	; 0x23
 8004984:	6838      	ldr	r0, [r7, #0]
 8004986:	f7ff f880 	bl	8003a8a <SPI_ETH_REG>
 800498a:	4603      	mov	r3, r0
 800498c:	b2da      	uxtb	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	Y->PSID[0]=SPI_ETH_REG(X, 36 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800499a:	3318      	adds	r3, #24
 800499c:	2201      	movs	r2, #1
 800499e:	9201      	str	r2, [sp, #4]
 80049a0:	9300      	str	r3, [sp, #0]
 80049a2:	2300      	movs	r3, #0
 80049a4:	2200      	movs	r2, #0
 80049a6:	2124      	movs	r1, #36	; 0x24
 80049a8:	6838      	ldr	r0, [r7, #0]
 80049aa:	f7ff f86e 	bl	8003a8a <SPI_ETH_REG>
 80049ae:	4603      	mov	r3, r0
 80049b0:	b2da      	uxtb	r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	Y->PSID[1]=SPI_ETH_REG(X, 37 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80049be:	3318      	adds	r3, #24
 80049c0:	2201      	movs	r2, #1
 80049c2:	9201      	str	r2, [sp, #4]
 80049c4:	9300      	str	r3, [sp, #0]
 80049c6:	2300      	movs	r3, #0
 80049c8:	2200      	movs	r2, #0
 80049ca:	2125      	movs	r1, #37	; 0x25
 80049cc:	6838      	ldr	r0, [r7, #0]
 80049ce:	f7ff f85c 	bl	8003a8a <SPI_ETH_REG>
 80049d2:	4603      	mov	r3, r0
 80049d4:	b2da      	uxtb	r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	Y->PMRU[0]=SPI_ETH_REG(X, 38 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80049e2:	3318      	adds	r3, #24
 80049e4:	2201      	movs	r2, #1
 80049e6:	9201      	str	r2, [sp, #4]
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	2300      	movs	r3, #0
 80049ec:	2200      	movs	r2, #0
 80049ee:	2126      	movs	r1, #38	; 0x26
 80049f0:	6838      	ldr	r0, [r7, #0]
 80049f2:	f7ff f84a 	bl	8003a8a <SPI_ETH_REG>
 80049f6:	4603      	mov	r3, r0
 80049f8:	b2da      	uxtb	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	Y->PMRU[1]=SPI_ETH_REG(X, 39 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004a06:	3318      	adds	r3, #24
 8004a08:	2201      	movs	r2, #1
 8004a0a:	9201      	str	r2, [sp, #4]
 8004a0c:	9300      	str	r3, [sp, #0]
 8004a0e:	2300      	movs	r3, #0
 8004a10:	2200      	movs	r2, #0
 8004a12:	2127      	movs	r1, #39	; 0x27
 8004a14:	6838      	ldr	r0, [r7, #0]
 8004a16:	f7ff f838 	bl	8003a8a <SPI_ETH_REG>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	b2da      	uxtb	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	Y->UIPR[0]=SPI_ETH_REG(X, 40 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004a2a:	3318      	adds	r3, #24
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	9201      	str	r2, [sp, #4]
 8004a30:	9300      	str	r3, [sp, #0]
 8004a32:	2300      	movs	r3, #0
 8004a34:	2200      	movs	r2, #0
 8004a36:	2128      	movs	r1, #40	; 0x28
 8004a38:	6838      	ldr	r0, [r7, #0]
 8004a3a:	f7ff f826 	bl	8003a8a <SPI_ETH_REG>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	b2da      	uxtb	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	Y->UIPR[1]=SPI_ETH_REG(X, 41 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004a4e:	3318      	adds	r3, #24
 8004a50:	2201      	movs	r2, #1
 8004a52:	9201      	str	r2, [sp, #4]
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	2300      	movs	r3, #0
 8004a58:	2200      	movs	r2, #0
 8004a5a:	2129      	movs	r1, #41	; 0x29
 8004a5c:	6838      	ldr	r0, [r7, #0]
 8004a5e:	f7ff f814 	bl	8003a8a <SPI_ETH_REG>
 8004a62:	4603      	mov	r3, r0
 8004a64:	b2da      	uxtb	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	Y->UIPR[2]=SPI_ETH_REG(X, 42 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004a72:	3318      	adds	r3, #24
 8004a74:	2201      	movs	r2, #1
 8004a76:	9201      	str	r2, [sp, #4]
 8004a78:	9300      	str	r3, [sp, #0]
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	212a      	movs	r1, #42	; 0x2a
 8004a80:	6838      	ldr	r0, [r7, #0]
 8004a82:	f7ff f802 	bl	8003a8a <SPI_ETH_REG>
 8004a86:	4603      	mov	r3, r0
 8004a88:	b2da      	uxtb	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	Y->UIPR[3]=SPI_ETH_REG(X, 43 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004a96:	3318      	adds	r3, #24
 8004a98:	2201      	movs	r2, #1
 8004a9a:	9201      	str	r2, [sp, #4]
 8004a9c:	9300      	str	r3, [sp, #0]
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	212b      	movs	r1, #43	; 0x2b
 8004aa4:	6838      	ldr	r0, [r7, #0]
 8004aa6:	f7fe fff0 	bl	8003a8a <SPI_ETH_REG>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	b2da      	uxtb	r2, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

	Y->UPORT[0]=SPI_ETH_REG(X, 44 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004aba:	3318      	adds	r3, #24
 8004abc:	2201      	movs	r2, #1
 8004abe:	9201      	str	r2, [sp, #4]
 8004ac0:	9300      	str	r3, [sp, #0]
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	212c      	movs	r1, #44	; 0x2c
 8004ac8:	6838      	ldr	r0, [r7, #0]
 8004aca:	f7fe ffde 	bl	8003a8a <SPI_ETH_REG>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	b2da      	uxtb	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	Y->UPORT[1]=SPI_ETH_REG(X, 45 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004ade:	3318      	adds	r3, #24
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	9201      	str	r2, [sp, #4]
 8004ae4:	9300      	str	r3, [sp, #0]
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	2200      	movs	r2, #0
 8004aea:	212d      	movs	r1, #45	; 0x2d
 8004aec:	6838      	ldr	r0, [r7, #0]
 8004aee:	f7fe ffcc 	bl	8003a8a <SPI_ETH_REG>
 8004af2:	4603      	mov	r3, r0
 8004af4:	b2da      	uxtb	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	Y->PHYCFGR=SPI_ETH_REG(X, 46 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004b02:	3318      	adds	r3, #24
 8004b04:	2201      	movs	r2, #1
 8004b06:	9201      	str	r2, [sp, #4]
 8004b08:	9300      	str	r3, [sp, #0]
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	212e      	movs	r1, #46	; 0x2e
 8004b10:	6838      	ldr	r0, [r7, #0]
 8004b12:	f7fe ffba 	bl	8003a8a <SPI_ETH_REG>
 8004b16:	4603      	mov	r3, r0
 8004b18:	b2da      	uxtb	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

	Y->VERSIONR=SPI_ETH_REG(X, 57 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004b26:	3318      	adds	r3, #24
 8004b28:	2201      	movs	r2, #1
 8004b2a:	9201      	str	r2, [sp, #4]
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	2300      	movs	r3, #0
 8004b30:	2200      	movs	r2, #0
 8004b32:	2139      	movs	r1, #57	; 0x39
 8004b34:	6838      	ldr	r0, [r7, #0]
 8004b36:	f7fe ffa8 	bl	8003a8a <SPI_ETH_REG>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	b2da      	uxtb	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	//---------------------------port -------------------------//
	Y->Sn_MR=SPI_ETH_REG(X, 0x00 ,S0_REG,SPI_READ, Y->DUMMY,1);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004b4a:	3318      	adds	r3, #24
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	9201      	str	r2, [sp, #4]
 8004b50:	9300      	str	r3, [sp, #0]
 8004b52:	2300      	movs	r3, #0
 8004b54:	2201      	movs	r2, #1
 8004b56:	2100      	movs	r1, #0
 8004b58:	6838      	ldr	r0, [r7, #0]
 8004b5a:	f7fe ff96 	bl	8003a8a <SPI_ETH_REG>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	b2da      	uxtb	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	Y->Sn_CR=SPI_ETH_REG(X, 0x01 ,S0_REG,SPI_READ, Y->DUMMY,1);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004b6e:	3318      	adds	r3, #24
 8004b70:	2201      	movs	r2, #1
 8004b72:	9201      	str	r2, [sp, #4]
 8004b74:	9300      	str	r3, [sp, #0]
 8004b76:	2300      	movs	r3, #0
 8004b78:	2201      	movs	r2, #1
 8004b7a:	2101      	movs	r1, #1
 8004b7c:	6838      	ldr	r0, [r7, #0]
 8004b7e:	f7fe ff84 	bl	8003a8a <SPI_ETH_REG>
 8004b82:	4603      	mov	r3, r0
 8004b84:	b2da      	uxtb	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

	Y->Sn_IR=SPI_ETH_REG(X, 0x02 ,S0_REG,SPI_READ, Y->DUMMY,1);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004b92:	3318      	adds	r3, #24
 8004b94:	2201      	movs	r2, #1
 8004b96:	9201      	str	r2, [sp, #4]
 8004b98:	9300      	str	r3, [sp, #0]
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	2102      	movs	r1, #2
 8004ba0:	6838      	ldr	r0, [r7, #0]
 8004ba2:	f7fe ff72 	bl	8003a8a <SPI_ETH_REG>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	b2da      	uxtb	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

	Y->Sn_SR=SPI_ETH_REG(X, 0x03 ,S0_REG,SPI_READ, Y->DUMMY,1);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004bb6:	3318      	adds	r3, #24
 8004bb8:	2201      	movs	r2, #1
 8004bba:	9201      	str	r2, [sp, #4]
 8004bbc:	9300      	str	r3, [sp, #0]
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	2103      	movs	r1, #3
 8004bc4:	6838      	ldr	r0, [r7, #0]
 8004bc6:	f7fe ff60 	bl	8003a8a <SPI_ETH_REG>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	b2da      	uxtb	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	Y->Sn_PORT[0]=SPI_ETH_REG(X, 0x04 ,S0_REG,SPI_READ, Y->DUMMY,1);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004bda:	3318      	adds	r3, #24
 8004bdc:	2201      	movs	r2, #1
 8004bde:	9201      	str	r2, [sp, #4]
 8004be0:	9300      	str	r3, [sp, #0]
 8004be2:	2300      	movs	r3, #0
 8004be4:	2201      	movs	r2, #1
 8004be6:	2104      	movs	r1, #4
 8004be8:	6838      	ldr	r0, [r7, #0]
 8004bea:	f7fe ff4e 	bl	8003a8a <SPI_ETH_REG>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	b2da      	uxtb	r2, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Y->Sn_PORT[1]=SPI_ETH_REG(X, 0x05 ,S0_REG,SPI_READ, Y->DUMMY,1);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004bfe:	3318      	adds	r3, #24
 8004c00:	2201      	movs	r2, #1
 8004c02:	9201      	str	r2, [sp, #4]
 8004c04:	9300      	str	r3, [sp, #0]
 8004c06:	2300      	movs	r3, #0
 8004c08:	2201      	movs	r2, #1
 8004c0a:	2105      	movs	r1, #5
 8004c0c:	6838      	ldr	r0, [r7, #0]
 8004c0e:	f7fe ff3c 	bl	8003a8a <SPI_ETH_REG>
 8004c12:	4603      	mov	r3, r0
 8004c14:	b2da      	uxtb	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	Y->Sn_DHAR[0]=SPI_ETH_REG(X, 0x06 ,S0_REG,SPI_READ, Y->DUMMY,1);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004c22:	3318      	adds	r3, #24
 8004c24:	2201      	movs	r2, #1
 8004c26:	9201      	str	r2, [sp, #4]
 8004c28:	9300      	str	r3, [sp, #0]
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	2106      	movs	r1, #6
 8004c30:	6838      	ldr	r0, [r7, #0]
 8004c32:	f7fe ff2a 	bl	8003a8a <SPI_ETH_REG>
 8004c36:	4603      	mov	r3, r0
 8004c38:	b2da      	uxtb	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	Y->Sn_DHAR[1]=SPI_ETH_REG(X, 0x07 ,S0_REG,SPI_READ, Y->DUMMY,1);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004c46:	3318      	adds	r3, #24
 8004c48:	2201      	movs	r2, #1
 8004c4a:	9201      	str	r2, [sp, #4]
 8004c4c:	9300      	str	r3, [sp, #0]
 8004c4e:	2300      	movs	r3, #0
 8004c50:	2201      	movs	r2, #1
 8004c52:	2107      	movs	r1, #7
 8004c54:	6838      	ldr	r0, [r7, #0]
 8004c56:	f7fe ff18 	bl	8003a8a <SPI_ETH_REG>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	b2da      	uxtb	r2, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	Y->Sn_DHAR[2]=SPI_ETH_REG(X, 0x08 ,S0_REG,SPI_READ, Y->DUMMY,1);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004c6a:	3318      	adds	r3, #24
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	9201      	str	r2, [sp, #4]
 8004c70:	9300      	str	r3, [sp, #0]
 8004c72:	2300      	movs	r3, #0
 8004c74:	2201      	movs	r2, #1
 8004c76:	2108      	movs	r1, #8
 8004c78:	6838      	ldr	r0, [r7, #0]
 8004c7a:	f7fe ff06 	bl	8003a8a <SPI_ETH_REG>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	b2da      	uxtb	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	Y->Sn_DHAR[3]=SPI_ETH_REG(X, 0x09 ,S0_REG,SPI_READ, Y->DUMMY,1);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004c8e:	3318      	adds	r3, #24
 8004c90:	2201      	movs	r2, #1
 8004c92:	9201      	str	r2, [sp, #4]
 8004c94:	9300      	str	r3, [sp, #0]
 8004c96:	2300      	movs	r3, #0
 8004c98:	2201      	movs	r2, #1
 8004c9a:	2109      	movs	r1, #9
 8004c9c:	6838      	ldr	r0, [r7, #0]
 8004c9e:	f7fe fef4 	bl	8003a8a <SPI_ETH_REG>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	b2da      	uxtb	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	Y->Sn_DHAR[4]=SPI_ETH_REG(X, 0x0A ,S0_REG,SPI_READ, Y->DUMMY,1);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004cb2:	3318      	adds	r3, #24
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	9201      	str	r2, [sp, #4]
 8004cb8:	9300      	str	r3, [sp, #0]
 8004cba:	2300      	movs	r3, #0
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	210a      	movs	r1, #10
 8004cc0:	6838      	ldr	r0, [r7, #0]
 8004cc2:	f7fe fee2 	bl	8003a8a <SPI_ETH_REG>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	b2da      	uxtb	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	Y->Sn_DHAR[5]=SPI_ETH_REG(X, 0x0B ,S0_REG,SPI_READ, Y->DUMMY,1);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004cd6:	3318      	adds	r3, #24
 8004cd8:	2201      	movs	r2, #1
 8004cda:	9201      	str	r2, [sp, #4]
 8004cdc:	9300      	str	r3, [sp, #0]
 8004cde:	2300      	movs	r3, #0
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	210b      	movs	r1, #11
 8004ce4:	6838      	ldr	r0, [r7, #0]
 8004ce6:	f7fe fed0 	bl	8003a8a <SPI_ETH_REG>
 8004cea:	4603      	mov	r3, r0
 8004cec:	b2da      	uxtb	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

	Y->Sn_DIPR[0]=SPI_ETH_REG(X, 0x0C ,S0_REG,SPI_READ, Y->DUMMY,1);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004cfa:	3318      	adds	r3, #24
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	9201      	str	r2, [sp, #4]
 8004d00:	9300      	str	r3, [sp, #0]
 8004d02:	2300      	movs	r3, #0
 8004d04:	2201      	movs	r2, #1
 8004d06:	210c      	movs	r1, #12
 8004d08:	6838      	ldr	r0, [r7, #0]
 8004d0a:	f7fe febe 	bl	8003a8a <SPI_ETH_REG>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	b2da      	uxtb	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Y->Sn_DIPR[1]=SPI_ETH_REG(X, 0x0D ,S0_REG,SPI_READ, Y->DUMMY,1);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004d1e:	3318      	adds	r3, #24
 8004d20:	2201      	movs	r2, #1
 8004d22:	9201      	str	r2, [sp, #4]
 8004d24:	9300      	str	r3, [sp, #0]
 8004d26:	2300      	movs	r3, #0
 8004d28:	2201      	movs	r2, #1
 8004d2a:	210d      	movs	r1, #13
 8004d2c:	6838      	ldr	r0, [r7, #0]
 8004d2e:	f7fe feac 	bl	8003a8a <SPI_ETH_REG>
 8004d32:	4603      	mov	r3, r0
 8004d34:	b2da      	uxtb	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	Y->Sn_DIPR[2]=SPI_ETH_REG(X, 0x0E ,S0_REG,SPI_READ, Y->DUMMY,1);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004d42:	3318      	adds	r3, #24
 8004d44:	2201      	movs	r2, #1
 8004d46:	9201      	str	r2, [sp, #4]
 8004d48:	9300      	str	r3, [sp, #0]
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	210e      	movs	r1, #14
 8004d50:	6838      	ldr	r0, [r7, #0]
 8004d52:	f7fe fe9a 	bl	8003a8a <SPI_ETH_REG>
 8004d56:	4603      	mov	r3, r0
 8004d58:	b2da      	uxtb	r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	Y->Sn_DIPR[3]=SPI_ETH_REG(X, 0x0F ,S0_REG,SPI_READ, Y->DUMMY,1);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004d66:	3318      	adds	r3, #24
 8004d68:	2201      	movs	r2, #1
 8004d6a:	9201      	str	r2, [sp, #4]
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	2300      	movs	r3, #0
 8004d70:	2201      	movs	r2, #1
 8004d72:	210f      	movs	r1, #15
 8004d74:	6838      	ldr	r0, [r7, #0]
 8004d76:	f7fe fe88 	bl	8003a8a <SPI_ETH_REG>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	b2da      	uxtb	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	Y->Sn_DPORT[0]=SPI_ETH_REG(X, 0x10 ,S0_REG,SPI_READ, Y->DUMMY,1);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004d8a:	3318      	adds	r3, #24
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	9201      	str	r2, [sp, #4]
 8004d90:	9300      	str	r3, [sp, #0]
 8004d92:	2300      	movs	r3, #0
 8004d94:	2201      	movs	r2, #1
 8004d96:	2110      	movs	r1, #16
 8004d98:	6838      	ldr	r0, [r7, #0]
 8004d9a:	f7fe fe76 	bl	8003a8a <SPI_ETH_REG>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	b2da      	uxtb	r2, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	Y->Sn_DPORT[1]=SPI_ETH_REG(X, 0x11 ,S0_REG,SPI_READ, Y->DUMMY,1);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004dae:	3318      	adds	r3, #24
 8004db0:	2201      	movs	r2, #1
 8004db2:	9201      	str	r2, [sp, #4]
 8004db4:	9300      	str	r3, [sp, #0]
 8004db6:	2300      	movs	r3, #0
 8004db8:	2201      	movs	r2, #1
 8004dba:	2111      	movs	r1, #17
 8004dbc:	6838      	ldr	r0, [r7, #0]
 8004dbe:	f7fe fe64 	bl	8003a8a <SPI_ETH_REG>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	b2da      	uxtb	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

	Y->Sn_MSSR[0]=SPI_ETH_REG(X, 0x12 ,S0_REG,SPI_READ, Y->DUMMY,1);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004dd2:	3318      	adds	r3, #24
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	9201      	str	r2, [sp, #4]
 8004dd8:	9300      	str	r3, [sp, #0]
 8004dda:	2300      	movs	r3, #0
 8004ddc:	2201      	movs	r2, #1
 8004dde:	2112      	movs	r1, #18
 8004de0:	6838      	ldr	r0, [r7, #0]
 8004de2:	f7fe fe52 	bl	8003a8a <SPI_ETH_REG>
 8004de6:	4603      	mov	r3, r0
 8004de8:	b2da      	uxtb	r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	Y->Sn_MSSR[1]=SPI_ETH_REG(X, 0x13 ,S0_REG,SPI_READ, Y->DUMMY,1);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004df6:	3318      	adds	r3, #24
 8004df8:	2201      	movs	r2, #1
 8004dfa:	9201      	str	r2, [sp, #4]
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	2300      	movs	r3, #0
 8004e00:	2201      	movs	r2, #1
 8004e02:	2113      	movs	r1, #19
 8004e04:	6838      	ldr	r0, [r7, #0]
 8004e06:	f7fe fe40 	bl	8003a8a <SPI_ETH_REG>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	b2da      	uxtb	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	Y->Sn_TOS=SPI_ETH_REG(X, 0x15 ,S0_REG,SPI_READ, Y->DUMMY,1);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004e1a:	3318      	adds	r3, #24
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	9201      	str	r2, [sp, #4]
 8004e20:	9300      	str	r3, [sp, #0]
 8004e22:	2300      	movs	r3, #0
 8004e24:	2201      	movs	r2, #1
 8004e26:	2115      	movs	r1, #21
 8004e28:	6838      	ldr	r0, [r7, #0]
 8004e2a:	f7fe fe2e 	bl	8003a8a <SPI_ETH_REG>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	b2da      	uxtb	r2, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	Y->Sn_TTL=SPI_ETH_REG(X, 0x16 ,S0_REG,SPI_READ, Y->DUMMY,1);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004e3e:	3318      	adds	r3, #24
 8004e40:	2201      	movs	r2, #1
 8004e42:	9201      	str	r2, [sp, #4]
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	2300      	movs	r3, #0
 8004e48:	2201      	movs	r2, #1
 8004e4a:	2116      	movs	r1, #22
 8004e4c:	6838      	ldr	r0, [r7, #0]
 8004e4e:	f7fe fe1c 	bl	8003a8a <SPI_ETH_REG>
 8004e52:	4603      	mov	r3, r0
 8004e54:	b2da      	uxtb	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

	Y->Sn_RXBUF_SIZE=SPI_ETH_REG(X, 0x1E ,S0_REG,SPI_READ, Y->DUMMY,1);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004e62:	3318      	adds	r3, #24
 8004e64:	2201      	movs	r2, #1
 8004e66:	9201      	str	r2, [sp, #4]
 8004e68:	9300      	str	r3, [sp, #0]
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	211e      	movs	r1, #30
 8004e70:	6838      	ldr	r0, [r7, #0]
 8004e72:	f7fe fe0a 	bl	8003a8a <SPI_ETH_REG>
 8004e76:	4603      	mov	r3, r0
 8004e78:	b2da      	uxtb	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

	Y->Sn_TXBUF_SIZE=SPI_ETH_REG(X, 0x1F ,S0_REG,SPI_READ, Y->DUMMY,1);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004e86:	3318      	adds	r3, #24
 8004e88:	2201      	movs	r2, #1
 8004e8a:	9201      	str	r2, [sp, #4]
 8004e8c:	9300      	str	r3, [sp, #0]
 8004e8e:	2300      	movs	r3, #0
 8004e90:	2201      	movs	r2, #1
 8004e92:	211f      	movs	r1, #31
 8004e94:	6838      	ldr	r0, [r7, #0]
 8004e96:	f7fe fdf8 	bl	8003a8a <SPI_ETH_REG>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	b2da      	uxtb	r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

	Y->Sn_TX_FSR[0]=SPI_ETH_REG(X, 0x20 ,S0_REG,SPI_READ, Y->DUMMY,1);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004eaa:	3318      	adds	r3, #24
 8004eac:	2201      	movs	r2, #1
 8004eae:	9201      	str	r2, [sp, #4]
 8004eb0:	9300      	str	r3, [sp, #0]
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	2120      	movs	r1, #32
 8004eb8:	6838      	ldr	r0, [r7, #0]
 8004eba:	f7fe fde6 	bl	8003a8a <SPI_ETH_REG>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	b2da      	uxtb	r2, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	Y->Sn_TX_FSR[1]=SPI_ETH_REG(X, 0x21 ,S0_REG,SPI_READ, Y->DUMMY,1);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004ece:	3318      	adds	r3, #24
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	9201      	str	r2, [sp, #4]
 8004ed4:	9300      	str	r3, [sp, #0]
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	2201      	movs	r2, #1
 8004eda:	2121      	movs	r1, #33	; 0x21
 8004edc:	6838      	ldr	r0, [r7, #0]
 8004ede:	f7fe fdd4 	bl	8003a8a <SPI_ETH_REG>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	b2da      	uxtb	r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

	Y->Sn_TX_RD[0]=SPI_ETH_REG(X, 0x22 ,S0_REG,SPI_READ, Y->DUMMY,1);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004ef2:	3318      	adds	r3, #24
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	9201      	str	r2, [sp, #4]
 8004ef8:	9300      	str	r3, [sp, #0]
 8004efa:	2300      	movs	r3, #0
 8004efc:	2201      	movs	r2, #1
 8004efe:	2122      	movs	r1, #34	; 0x22
 8004f00:	6838      	ldr	r0, [r7, #0]
 8004f02:	f7fe fdc2 	bl	8003a8a <SPI_ETH_REG>
 8004f06:	4603      	mov	r3, r0
 8004f08:	b2da      	uxtb	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	Y->Sn_TX_RD[1]=SPI_ETH_REG(X, 0x23 ,S0_REG,SPI_READ, Y->DUMMY,1);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004f16:	3318      	adds	r3, #24
 8004f18:	2201      	movs	r2, #1
 8004f1a:	9201      	str	r2, [sp, #4]
 8004f1c:	9300      	str	r3, [sp, #0]
 8004f1e:	2300      	movs	r3, #0
 8004f20:	2201      	movs	r2, #1
 8004f22:	2123      	movs	r1, #35	; 0x23
 8004f24:	6838      	ldr	r0, [r7, #0]
 8004f26:	f7fe fdb0 	bl	8003a8a <SPI_ETH_REG>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	b2da      	uxtb	r2, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	Y->Sn_TX_WR[0]=SPI_ETH_REG(X, 0x24 ,S0_REG,SPI_READ, Y->DUMMY,1);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004f3a:	3318      	adds	r3, #24
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	9201      	str	r2, [sp, #4]
 8004f40:	9300      	str	r3, [sp, #0]
 8004f42:	2300      	movs	r3, #0
 8004f44:	2201      	movs	r2, #1
 8004f46:	2124      	movs	r1, #36	; 0x24
 8004f48:	6838      	ldr	r0, [r7, #0]
 8004f4a:	f7fe fd9e 	bl	8003a8a <SPI_ETH_REG>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	b2da      	uxtb	r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	Y->Sn_TX_WR[1]=SPI_ETH_REG(X, 0x25 ,S0_REG,SPI_READ, Y->DUMMY,1);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004f5e:	3318      	adds	r3, #24
 8004f60:	2201      	movs	r2, #1
 8004f62:	9201      	str	r2, [sp, #4]
 8004f64:	9300      	str	r3, [sp, #0]
 8004f66:	2300      	movs	r3, #0
 8004f68:	2201      	movs	r2, #1
 8004f6a:	2125      	movs	r1, #37	; 0x25
 8004f6c:	6838      	ldr	r0, [r7, #0]
 8004f6e:	f7fe fd8c 	bl	8003a8a <SPI_ETH_REG>
 8004f72:	4603      	mov	r3, r0
 8004f74:	b2da      	uxtb	r2, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

	Y->Sn_RX_RSR[0]=SPI_ETH_REG(X, 0x26 ,S0_REG,SPI_READ, Y->DUMMY,1);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004f82:	3318      	adds	r3, #24
 8004f84:	2201      	movs	r2, #1
 8004f86:	9201      	str	r2, [sp, #4]
 8004f88:	9300      	str	r3, [sp, #0]
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	2126      	movs	r1, #38	; 0x26
 8004f90:	6838      	ldr	r0, [r7, #0]
 8004f92:	f7fe fd7a 	bl	8003a8a <SPI_ETH_REG>
 8004f96:	4603      	mov	r3, r0
 8004f98:	b2da      	uxtb	r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	Y->Sn_RX_RSR[1]=SPI_ETH_REG(X, 0x27 ,S0_REG,SPI_READ, Y->DUMMY,1);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004fa6:	3318      	adds	r3, #24
 8004fa8:	2201      	movs	r2, #1
 8004faa:	9201      	str	r2, [sp, #4]
 8004fac:	9300      	str	r3, [sp, #0]
 8004fae:	2300      	movs	r3, #0
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	2127      	movs	r1, #39	; 0x27
 8004fb4:	6838      	ldr	r0, [r7, #0]
 8004fb6:	f7fe fd68 	bl	8003a8a <SPI_ETH_REG>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	b2da      	uxtb	r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f

	Y->Sn_RX_RD[0]=SPI_ETH_REG(X, 0x28 ,S0_REG,SPI_READ, Y->DUMMY,1);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004fca:	3318      	adds	r3, #24
 8004fcc:	2201      	movs	r2, #1
 8004fce:	9201      	str	r2, [sp, #4]
 8004fd0:	9300      	str	r3, [sp, #0]
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	2128      	movs	r1, #40	; 0x28
 8004fd8:	6838      	ldr	r0, [r7, #0]
 8004fda:	f7fe fd56 	bl	8003a8a <SPI_ETH_REG>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	b2da      	uxtb	r2, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Y->Sn_RX_RD[1]=SPI_ETH_REG(X, 0x29 ,S0_REG,SPI_READ, Y->DUMMY,1);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004fee:	3318      	adds	r3, #24
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	9201      	str	r2, [sp, #4]
 8004ff4:	9300      	str	r3, [sp, #0]
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	2129      	movs	r1, #41	; 0x29
 8004ffc:	6838      	ldr	r0, [r7, #0]
 8004ffe:	f7fe fd44 	bl	8003a8a <SPI_ETH_REG>
 8005002:	4603      	mov	r3, r0
 8005004:	b2da      	uxtb	r2, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

	Y->Sn_RX_WR[0]=SPI_ETH_REG(X, 0x2A ,S0_REG,SPI_READ, Y->DUMMY,1);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8005012:	3318      	adds	r3, #24
 8005014:	2201      	movs	r2, #1
 8005016:	9201      	str	r2, [sp, #4]
 8005018:	9300      	str	r3, [sp, #0]
 800501a:	2300      	movs	r3, #0
 800501c:	2201      	movs	r2, #1
 800501e:	212a      	movs	r1, #42	; 0x2a
 8005020:	6838      	ldr	r0, [r7, #0]
 8005022:	f7fe fd32 	bl	8003a8a <SPI_ETH_REG>
 8005026:	4603      	mov	r3, r0
 8005028:	b2da      	uxtb	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	Y->Sn_RX_WR[1]=SPI_ETH_REG(X, 0x2B ,S0_REG,SPI_READ, Y->DUMMY,1);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8005036:	3318      	adds	r3, #24
 8005038:	2201      	movs	r2, #1
 800503a:	9201      	str	r2, [sp, #4]
 800503c:	9300      	str	r3, [sp, #0]
 800503e:	2300      	movs	r3, #0
 8005040:	2201      	movs	r2, #1
 8005042:	212b      	movs	r1, #43	; 0x2b
 8005044:	6838      	ldr	r0, [r7, #0]
 8005046:	f7fe fd20 	bl	8003a8a <SPI_ETH_REG>
 800504a:	4603      	mov	r3, r0
 800504c:	b2da      	uxtb	r2, r3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	Y->Sn_IMR=SPI_ETH_REG(X, 0x2C ,S0_REG,SPI_READ, Y->DUMMY,1);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800505a:	3318      	adds	r3, #24
 800505c:	2201      	movs	r2, #1
 800505e:	9201      	str	r2, [sp, #4]
 8005060:	9300      	str	r3, [sp, #0]
 8005062:	2300      	movs	r3, #0
 8005064:	2201      	movs	r2, #1
 8005066:	212c      	movs	r1, #44	; 0x2c
 8005068:	6838      	ldr	r0, [r7, #0]
 800506a:	f7fe fd0e 	bl	8003a8a <SPI_ETH_REG>
 800506e:	4603      	mov	r3, r0
 8005070:	b2da      	uxtb	r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	Y->Sn_FRAG[0]=SPI_ETH_REG(X, 0x2D ,S0_REG,SPI_READ, Y->DUMMY,1);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800507e:	3318      	adds	r3, #24
 8005080:	2201      	movs	r2, #1
 8005082:	9201      	str	r2, [sp, #4]
 8005084:	9300      	str	r3, [sp, #0]
 8005086:	2300      	movs	r3, #0
 8005088:	2201      	movs	r2, #1
 800508a:	212d      	movs	r1, #45	; 0x2d
 800508c:	6838      	ldr	r0, [r7, #0]
 800508e:	f7fe fcfc 	bl	8003a8a <SPI_ETH_REG>
 8005092:	4603      	mov	r3, r0
 8005094:	b2da      	uxtb	r2, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	Y->Sn_FRAG[1]=SPI_ETH_REG(X, 0x2E ,S0_REG,SPI_READ, Y->DUMMY,1);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80050a2:	3318      	adds	r3, #24
 80050a4:	2201      	movs	r2, #1
 80050a6:	9201      	str	r2, [sp, #4]
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	2300      	movs	r3, #0
 80050ac:	2201      	movs	r2, #1
 80050ae:	212e      	movs	r1, #46	; 0x2e
 80050b0:	6838      	ldr	r0, [r7, #0]
 80050b2:	f7fe fcea 	bl	8003a8a <SPI_ETH_REG>
 80050b6:	4603      	mov	r3, r0
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56


	Y->Sn_KPALVTR=SPI_ETH_REG(X, 0x2F ,S0_REG,SPI_READ, Y->DUMMY,1);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80050c6:	3318      	adds	r3, #24
 80050c8:	2201      	movs	r2, #1
 80050ca:	9201      	str	r2, [sp, #4]
 80050cc:	9300      	str	r3, [sp, #0]
 80050ce:	2300      	movs	r3, #0
 80050d0:	2201      	movs	r2, #1
 80050d2:	212f      	movs	r1, #47	; 0x2f
 80050d4:	6838      	ldr	r0, [r7, #0]
 80050d6:	f7fe fcd8 	bl	8003a8a <SPI_ETH_REG>
 80050da:	4603      	mov	r3, r0
 80050dc:	b2da      	uxtb	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
};
 80050e4:	bf00      	nop
 80050e6:	4618      	mov	r0, r3
 80050e8:	3708      	adds	r7, #8
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
	...

080050f0 <__libc_init_array>:
 80050f0:	b570      	push	{r4, r5, r6, lr}
 80050f2:	4d0d      	ldr	r5, [pc, #52]	; (8005128 <__libc_init_array+0x38>)
 80050f4:	4c0d      	ldr	r4, [pc, #52]	; (800512c <__libc_init_array+0x3c>)
 80050f6:	1b64      	subs	r4, r4, r5
 80050f8:	10a4      	asrs	r4, r4, #2
 80050fa:	2600      	movs	r6, #0
 80050fc:	42a6      	cmp	r6, r4
 80050fe:	d109      	bne.n	8005114 <__libc_init_array+0x24>
 8005100:	4d0b      	ldr	r5, [pc, #44]	; (8005130 <__libc_init_array+0x40>)
 8005102:	4c0c      	ldr	r4, [pc, #48]	; (8005134 <__libc_init_array+0x44>)
 8005104:	f000 f820 	bl	8005148 <_init>
 8005108:	1b64      	subs	r4, r4, r5
 800510a:	10a4      	asrs	r4, r4, #2
 800510c:	2600      	movs	r6, #0
 800510e:	42a6      	cmp	r6, r4
 8005110:	d105      	bne.n	800511e <__libc_init_array+0x2e>
 8005112:	bd70      	pop	{r4, r5, r6, pc}
 8005114:	f855 3b04 	ldr.w	r3, [r5], #4
 8005118:	4798      	blx	r3
 800511a:	3601      	adds	r6, #1
 800511c:	e7ee      	b.n	80050fc <__libc_init_array+0xc>
 800511e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005122:	4798      	blx	r3
 8005124:	3601      	adds	r6, #1
 8005126:	e7f2      	b.n	800510e <__libc_init_array+0x1e>
 8005128:	08005424 	.word	0x08005424
 800512c:	08005424 	.word	0x08005424
 8005130:	08005424 	.word	0x08005424
 8005134:	08005428 	.word	0x08005428

08005138 <memset>:
 8005138:	4402      	add	r2, r0
 800513a:	4603      	mov	r3, r0
 800513c:	4293      	cmp	r3, r2
 800513e:	d100      	bne.n	8005142 <memset+0xa>
 8005140:	4770      	bx	lr
 8005142:	f803 1b01 	strb.w	r1, [r3], #1
 8005146:	e7f9      	b.n	800513c <memset+0x4>

08005148 <_init>:
 8005148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800514a:	bf00      	nop
 800514c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800514e:	bc08      	pop	{r3}
 8005150:	469e      	mov	lr, r3
 8005152:	4770      	bx	lr

08005154 <_fini>:
 8005154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005156:	bf00      	nop
 8005158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800515a:	bc08      	pop	{r3}
 800515c:	469e      	mov	lr, r3
 800515e:	4770      	bx	lr
